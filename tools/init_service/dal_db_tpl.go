package main

const dalDBTpl = "package db\n\nimport (\n\t\"context\"\n\t\"math\"\n\n\t\"github.com/aiagt/aiagt/app/{{ .Service.Name }}/model\"\n\t\"github.com/aiagt/aiagt/kitex_gen/base\"\n\t\"github.com/pkg/errors\"\n\n\tktdb \"github.com/aiagt/kitextool/option/server/db\"\n\t\"gorm.io/gorm\"\n)\n\ntype {{ .Model.Camel }}Dao struct {\n\tm *model.{{ .Model.Camel }}\n}\n\n// New{{ .Model.Camel }}Dao make {{ .Model.Camel }} dao\nfunc New{{ .Model.Camel }}Dao() *{{ .Model.Camel }}Dao {\n\treturn &{{ .Model.Camel }}Dao{m: new(model.{{ .Model.Camel }})}\n}\n\nfunc (d *{{ .Model.Camel }}Dao) db(ctx context.Context) *gorm.DB {\n\treturn ktdb.DBCtx(ctx)\n}\n\n// GetByID get {{ .Model.Snake }} by id\nfunc (d *{{ .Model.Camel }}Dao) GetByID(ctx context.Context, id int64) (*model.{{ .Model.Camel }}, error) {\n\tvar result model.{{ .Model.Camel }}\n\n\terr := d.db(ctx).Model(d.m).Where(\"id = ?\", id).First(&result).Error\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"{{ .Model.Snake }} dao get by id error\")\n\t}\n\n\treturn &result, nil\n}\n\n// GetByIDs get {{ .Model.Snake }} list by ids\nfunc (d *{{ .Model.Camel }}Dao) GetByIDs(ctx context.Context, ids []int64) ([]*model.{{ .Model.Camel }}, error) {\n\tvar result []*model.{{ .Model.Camel }}\n\n\terr := d.db(ctx).Model(d.m).Where(\"id in ?\", ids).Find(&result).Error\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"{{ .Model.Snake }} dao get by ids error\")\n\t}\n\n\treturn result, nil\n}\n\n// List get {{ .Model.Snake }} list\nfunc (d *{{ .Model.Camel }}Dao) List(ctx context.Context, page *base.PaginationReq) ([]*model.{{ .Model.Camel }}, *base.PaginationResp, error) {\n\tvar (\n\t\tlist   []*model.{{ .Model.Camel }}\n\t\ttotal  int64\n\t\toffset = int((page.Page-1)*page.PageSize)\n\t\tlimit  = int(page.PageSize)\n\t)\n\n\n\terr := d.db(ctx).Model(d.m).Count(&total).Offset(offset).Limit(limit).Find(&list).Error\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"{{ .Model.Snake }} dao get page error\")\n\t}\n\n\tpageTotal := int32(math.Ceil(float64(total) / float64(page.PageSize)))\n\tpageResp := &base.PaginationResp{Page: page.Page, PageSize: page.PageSize, Total: int32(total), PageTotal: pageTotal}\n\n\treturn list, pageResp, nil\n}\n\n// Create insert a {{ .Model.Snake }} record\nfunc (d *{{ .Model.Camel }}Dao) Create(ctx context.Context, m *model.{{ .Model.Camel }}) error {\n\terr := d.db(ctx).Model(d.m).Create(m).Error\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"{{ .Model.Snake }} dao create error\")\n\t}\n\n\treturn nil\n}\n\n// Update {{ .Model.Snake }} by id\nfunc (d *{{ .Model.Camel }}Dao) Update(ctx context.Context, id int64, m *model.{{ .Model.Camel }}Optional) error {\n\terr := d.db(ctx).Model(d.m).Where(\"id = ?\", id).Updates(m).Error\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"{{ .Model.Snake }} dao update error\")\n\t}\n\n\treturn nil\n}\n\n// Delete delete {{ .Model.Snake }} by id\nfunc (d *{{ .Model.Camel }}Dao) Delete(ctx context.Context, id int64) error {\n\terr := d.db(ctx).Model(d.m).Where(\"id = ?\", id).Delete(d.m).Error\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"{{ .Model.Snake }} dao delete error\")\n\t}\n\n\treturn nil"

var DalDBTpl = NewTemplate("dal.db", dalDBTpl, false)

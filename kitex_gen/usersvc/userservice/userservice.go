// Code generated by Kitex v0.10.0. DO NOT EDIT.

package userservice

import (
	"context"
	"errors"
	base "github.com/aiagt/aiagt/kitex_gen/base"
	usersvc "github.com/aiagt/aiagt/kitex_gen/usersvc"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newUserServiceRegisterArgs,
		newUserServiceRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newUserServiceLoginArgs,
		newUserServiceLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ResetPassword": kitex.NewMethodInfo(
		resetPasswordHandler,
		newUserServiceResetPasswordArgs,
		newUserServiceResetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SendCaptcha": kitex.NewMethodInfo(
		sendCaptchaHandler,
		newUserServiceSendCaptchaArgs,
		newUserServiceSendCaptchaResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateUser": kitex.NewMethodInfo(
		updateUserHandler,
		newUserServiceUpdateUserArgs,
		newUserServiceUpdateUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUser": kitex.NewMethodInfo(
		getUserHandler,
		newUserServiceGetUserArgs,
		newUserServiceGetUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserByID": kitex.NewMethodInfo(
		getUserByIDHandler,
		newUserServiceGetUserByIDArgs,
		newUserServiceGetUserByIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserByIds": kitex.NewMethodInfo(
		getUserByIdsHandler,
		newUserServiceGetUserByIdsArgs,
		newUserServiceGetUserByIdsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateSecret": kitex.NewMethodInfo(
		createSecretHandler,
		newUserServiceCreateSecretArgs,
		newUserServiceCreateSecretResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateSecret": kitex.NewMethodInfo(
		updateSecretHandler,
		newUserServiceUpdateSecretArgs,
		newUserServiceUpdateSecretResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteSecret": kitex.NewMethodInfo(
		deleteSecretHandler,
		newUserServiceDeleteSecretArgs,
		newUserServiceDeleteSecretResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListSecret": kitex.NewMethodInfo(
		listSecretHandler,
		newUserServiceListSecretArgs,
		newUserServiceListSecretResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*usersvc.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "usersvc",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.0",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceRegisterArgs)
	realResult := result.(*usersvc.UserServiceRegisterResult)
	success, err := handler.(usersvc.UserService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterArgs() interface{} {
	return usersvc.NewUserServiceRegisterArgs()
}

func newUserServiceRegisterResult() interface{} {
	return usersvc.NewUserServiceRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceLoginArgs)
	realResult := result.(*usersvc.UserServiceLoginResult)
	success, err := handler.(usersvc.UserService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return usersvc.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return usersvc.NewUserServiceLoginResult()
}

func resetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceResetPasswordArgs)
	realResult := result.(*usersvc.UserServiceResetPasswordResult)
	success, err := handler.(usersvc.UserService).ResetPassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceResetPasswordArgs() interface{} {
	return usersvc.NewUserServiceResetPasswordArgs()
}

func newUserServiceResetPasswordResult() interface{} {
	return usersvc.NewUserServiceResetPasswordResult()
}

func sendCaptchaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceSendCaptchaArgs)
	realResult := result.(*usersvc.UserServiceSendCaptchaResult)
	success, err := handler.(usersvc.UserService).SendCaptcha(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceSendCaptchaArgs() interface{} {
	return usersvc.NewUserServiceSendCaptchaArgs()
}

func newUserServiceSendCaptchaResult() interface{} {
	return usersvc.NewUserServiceSendCaptchaResult()
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceUpdateUserArgs)
	realResult := result.(*usersvc.UserServiceUpdateUserResult)
	success, err := handler.(usersvc.UserService).UpdateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUpdateUserArgs() interface{} {
	return usersvc.NewUserServiceUpdateUserArgs()
}

func newUserServiceUpdateUserResult() interface{} {
	return usersvc.NewUserServiceUpdateUserResult()
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*usersvc.UserServiceGetUserArgs)
	realResult := result.(*usersvc.UserServiceGetUserResult)
	success, err := handler.(usersvc.UserService).GetUser(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserArgs() interface{} {
	return usersvc.NewUserServiceGetUserArgs()
}

func newUserServiceGetUserResult() interface{} {
	return usersvc.NewUserServiceGetUserResult()
}

func getUserByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceGetUserByIDArgs)
	realResult := result.(*usersvc.UserServiceGetUserByIDResult)
	success, err := handler.(usersvc.UserService).GetUserByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserByIDArgs() interface{} {
	return usersvc.NewUserServiceGetUserByIDArgs()
}

func newUserServiceGetUserByIDResult() interface{} {
	return usersvc.NewUserServiceGetUserByIDResult()
}

func getUserByIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceGetUserByIdsArgs)
	realResult := result.(*usersvc.UserServiceGetUserByIdsResult)
	success, err := handler.(usersvc.UserService).GetUserByIds(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserByIdsArgs() interface{} {
	return usersvc.NewUserServiceGetUserByIdsArgs()
}

func newUserServiceGetUserByIdsResult() interface{} {
	return usersvc.NewUserServiceGetUserByIdsResult()
}

func createSecretHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceCreateSecretArgs)
	realResult := result.(*usersvc.UserServiceCreateSecretResult)
	success, err := handler.(usersvc.UserService).CreateSecret(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCreateSecretArgs() interface{} {
	return usersvc.NewUserServiceCreateSecretArgs()
}

func newUserServiceCreateSecretResult() interface{} {
	return usersvc.NewUserServiceCreateSecretResult()
}

func updateSecretHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceUpdateSecretArgs)
	realResult := result.(*usersvc.UserServiceUpdateSecretResult)
	success, err := handler.(usersvc.UserService).UpdateSecret(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUpdateSecretArgs() interface{} {
	return usersvc.NewUserServiceUpdateSecretArgs()
}

func newUserServiceUpdateSecretResult() interface{} {
	return usersvc.NewUserServiceUpdateSecretResult()
}

func deleteSecretHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceDeleteSecretArgs)
	realResult := result.(*usersvc.UserServiceDeleteSecretResult)
	success, err := handler.(usersvc.UserService).DeleteSecret(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceDeleteSecretArgs() interface{} {
	return usersvc.NewUserServiceDeleteSecretArgs()
}

func newUserServiceDeleteSecretResult() interface{} {
	return usersvc.NewUserServiceDeleteSecretResult()
}

func listSecretHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersvc.UserServiceListSecretArgs)
	realResult := result.(*usersvc.UserServiceListSecretResult)
	success, err := handler.(usersvc.UserService).ListSecret(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceListSecretArgs() interface{} {
	return usersvc.NewUserServiceListSecretArgs()
}

func newUserServiceListSecretResult() interface{} {
	return usersvc.NewUserServiceListSecretResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *usersvc.RegisterReq) (r *usersvc.RegisterResp, err error) {
	var _args usersvc.UserServiceRegisterArgs
	_args.Req = req
	var _result usersvc.UserServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *usersvc.LoginReq) (r *usersvc.LoginResp, err error) {
	var _args usersvc.UserServiceLoginArgs
	_args.Req = req
	var _result usersvc.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetPassword(ctx context.Context, req *usersvc.ResetPasswordReq) (r *base.Empty, err error) {
	var _args usersvc.UserServiceResetPasswordArgs
	_args.Req = req
	var _result usersvc.UserServiceResetPasswordResult
	if err = p.c.Call(ctx, "ResetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendCaptcha(ctx context.Context, req *usersvc.SendCaptchaReq) (r *usersvc.SendCaptchaResp, err error) {
	var _args usersvc.UserServiceSendCaptchaArgs
	_args.Req = req
	var _result usersvc.UserServiceSendCaptchaResult
	if err = p.c.Call(ctx, "SendCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUser(ctx context.Context, req *usersvc.UpdateUserReq) (r *base.Empty, err error) {
	var _args usersvc.UserServiceUpdateUserArgs
	_args.Req = req
	var _result usersvc.UserServiceUpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUser(ctx context.Context) (r *usersvc.User, err error) {
	var _args usersvc.UserServiceGetUserArgs
	var _result usersvc.UserServiceGetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserByID(ctx context.Context, req *base.IDReq) (r *usersvc.User, err error) {
	var _args usersvc.UserServiceGetUserByIDArgs
	_args.Req = req
	var _result usersvc.UserServiceGetUserByIDResult
	if err = p.c.Call(ctx, "GetUserByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserByIds(ctx context.Context, req *base.IDsReq) (r []*usersvc.User, err error) {
	var _args usersvc.UserServiceGetUserByIdsArgs
	_args.Req = req
	var _result usersvc.UserServiceGetUserByIdsResult
	if err = p.c.Call(ctx, "GetUserByIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSecret(ctx context.Context, req *usersvc.CreateSecretReq) (r *base.Empty, err error) {
	var _args usersvc.UserServiceCreateSecretArgs
	_args.Req = req
	var _result usersvc.UserServiceCreateSecretResult
	if err = p.c.Call(ctx, "CreateSecret", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSecret(ctx context.Context, req *usersvc.UpdateSecretReq) (r *base.Empty, err error) {
	var _args usersvc.UserServiceUpdateSecretArgs
	_args.Req = req
	var _result usersvc.UserServiceUpdateSecretResult
	if err = p.c.Call(ctx, "UpdateSecret", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSecret(ctx context.Context, req *base.IDReq) (r *base.Empty, err error) {
	var _args usersvc.UserServiceDeleteSecretArgs
	_args.Req = req
	var _result usersvc.UserServiceDeleteSecretResult
	if err = p.c.Call(ctx, "DeleteSecret", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSecret(ctx context.Context, req *usersvc.ListSecretReq) (r *usersvc.ListSecretResp, err error) {
	var _args usersvc.UserServiceListSecretArgs
	_args.Req = req
	var _result usersvc.UserServiceListSecretResult
	if err = p.c.Call(ctx, "ListSecret", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

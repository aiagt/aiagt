// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package appsvc

import (
	"context"
	"fmt"
	"github.com/aiagt/aiagt/kitex_gen/base"
	"github.com/aiagt/aiagt/kitex_gen/openai"
	"github.com/aiagt/aiagt/kitex_gen/pluginsvc"
	"github.com/aiagt/aiagt/kitex_gen/usersvc"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type App struct {
	Id              int64                   `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Name            string                  `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Description     string                  `thrift:"description,3,required" frugal:"3,required,string" json:"description"`
	DescriptionMd   string                  `thrift:"description_md,4,required" frugal:"4,required,string" json:"description_md"`
	ModelId         int64                   `thrift:"model_id,5,required" frugal:"5,required,i64" json:"model_id"`
	EnableImage     bool                    `thrift:"enable_image,6,required" frugal:"6,required,bool" json:"enable_image"`
	EnableFile      bool                    `thrift:"enable_file,7,required" frugal:"7,required,bool" json:"enable_file"`
	Version         string                  `thrift:"version,8,required" frugal:"8,required,string" json:"version"`
	IsPrivate       bool                    `thrift:"is_private,9,required" frugal:"9,required,bool" json:"is_private"`
	HomePage        string                  `thrift:"home_page,10,required" frugal:"10,required,string" json:"home_page"`
	PresetQuestions []string                `thrift:"preset_questions,11,required" frugal:"11,required,list<string>" json:"preset_questions"`
	ToolIds         []int64                 `thrift:"tool_ids,12,required" frugal:"12,required,list<i64>" json:"tool_ids"`
	Tools           []*pluginsvc.PluginTool `thrift:"tools,13,optional" frugal:"13,optional,list<pluginsvc.PluginTool>" json:"tools,omitempty"`
	Logo            string                  `thrift:"logo,14,required" frugal:"14,required,string" json:"logo"`
	AuthorId        int64                   `thrift:"author_id,15,required" frugal:"15,required,i64" json:"author_id"`
	Author          *usersvc.User           `thrift:"author,16,optional" frugal:"16,optional,usersvc.User" json:"author,omitempty"`
	LabelIds        []int64                 `thrift:"label_ids,17,required" frugal:"17,required,list<i64>" json:"label_ids"`
	Labels          []*AppLabel             `thrift:"labels,18,optional" frugal:"18,optional,list<AppLabel>" json:"labels,omitempty"`
	ModelConfig     *ModelConfig            `thrift:"model_config,19,required" frugal:"19,required,ModelConfig" json:"model_config"`
	CreatedAt       *base.Time              `thrift:"created_at,20,required" frugal:"20,required,base.Time" json:"created_at"`
	UpdatedAt       *base.Time              `thrift:"updated_at,21,required" frugal:"21,required,base.Time" json:"updated_at"`
	PublishedAt     *base.Time              `thrift:"published_at,22,optional" frugal:"22,optional,base.Time" json:"published_at,omitempty"`
}

func NewApp() *App {
	return &App{}
}

func (p *App) InitDefault() {
}

func (p *App) GetId() (v int64) {
	return p.Id
}

func (p *App) GetName() (v string) {
	return p.Name
}

func (p *App) GetDescription() (v string) {
	return p.Description
}

func (p *App) GetDescriptionMd() (v string) {
	return p.DescriptionMd
}

func (p *App) GetModelId() (v int64) {
	return p.ModelId
}

func (p *App) GetEnableImage() (v bool) {
	return p.EnableImage
}

func (p *App) GetEnableFile() (v bool) {
	return p.EnableFile
}

func (p *App) GetVersion() (v string) {
	return p.Version
}

func (p *App) GetIsPrivate() (v bool) {
	return p.IsPrivate
}

func (p *App) GetHomePage() (v string) {
	return p.HomePage
}

func (p *App) GetPresetQuestions() (v []string) {
	return p.PresetQuestions
}

func (p *App) GetToolIds() (v []int64) {
	return p.ToolIds
}

var App_Tools_DEFAULT []*pluginsvc.PluginTool

func (p *App) GetTools() (v []*pluginsvc.PluginTool) {
	if !p.IsSetTools() {
		return App_Tools_DEFAULT
	}
	return p.Tools
}

func (p *App) GetLogo() (v string) {
	return p.Logo
}

func (p *App) GetAuthorId() (v int64) {
	return p.AuthorId
}

var App_Author_DEFAULT *usersvc.User

func (p *App) GetAuthor() (v *usersvc.User) {
	if !p.IsSetAuthor() {
		return App_Author_DEFAULT
	}
	return p.Author
}

func (p *App) GetLabelIds() (v []int64) {
	return p.LabelIds
}

var App_Labels_DEFAULT []*AppLabel

func (p *App) GetLabels() (v []*AppLabel) {
	if !p.IsSetLabels() {
		return App_Labels_DEFAULT
	}
	return p.Labels
}

var App_ModelConfig_DEFAULT *ModelConfig

func (p *App) GetModelConfig() (v *ModelConfig) {
	if !p.IsSetModelConfig() {
		return App_ModelConfig_DEFAULT
	}
	return p.ModelConfig
}

var App_CreatedAt_DEFAULT *base.Time

func (p *App) GetCreatedAt() (v *base.Time) {
	if !p.IsSetCreatedAt() {
		return App_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var App_UpdatedAt_DEFAULT *base.Time

func (p *App) GetUpdatedAt() (v *base.Time) {
	if !p.IsSetUpdatedAt() {
		return App_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var App_PublishedAt_DEFAULT *base.Time

func (p *App) GetPublishedAt() (v *base.Time) {
	if !p.IsSetPublishedAt() {
		return App_PublishedAt_DEFAULT
	}
	return p.PublishedAt
}
func (p *App) SetId(val int64) {
	p.Id = val
}
func (p *App) SetName(val string) {
	p.Name = val
}
func (p *App) SetDescription(val string) {
	p.Description = val
}
func (p *App) SetDescriptionMd(val string) {
	p.DescriptionMd = val
}
func (p *App) SetModelId(val int64) {
	p.ModelId = val
}
func (p *App) SetEnableImage(val bool) {
	p.EnableImage = val
}
func (p *App) SetEnableFile(val bool) {
	p.EnableFile = val
}
func (p *App) SetVersion(val string) {
	p.Version = val
}
func (p *App) SetIsPrivate(val bool) {
	p.IsPrivate = val
}
func (p *App) SetHomePage(val string) {
	p.HomePage = val
}
func (p *App) SetPresetQuestions(val []string) {
	p.PresetQuestions = val
}
func (p *App) SetToolIds(val []int64) {
	p.ToolIds = val
}
func (p *App) SetTools(val []*pluginsvc.PluginTool) {
	p.Tools = val
}
func (p *App) SetLogo(val string) {
	p.Logo = val
}
func (p *App) SetAuthorId(val int64) {
	p.AuthorId = val
}
func (p *App) SetAuthor(val *usersvc.User) {
	p.Author = val
}
func (p *App) SetLabelIds(val []int64) {
	p.LabelIds = val
}
func (p *App) SetLabels(val []*AppLabel) {
	p.Labels = val
}
func (p *App) SetModelConfig(val *ModelConfig) {
	p.ModelConfig = val
}
func (p *App) SetCreatedAt(val *base.Time) {
	p.CreatedAt = val
}
func (p *App) SetUpdatedAt(val *base.Time) {
	p.UpdatedAt = val
}
func (p *App) SetPublishedAt(val *base.Time) {
	p.PublishedAt = val
}

var fieldIDToName_App = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "description",
	4:  "description_md",
	5:  "model_id",
	6:  "enable_image",
	7:  "enable_file",
	8:  "version",
	9:  "is_private",
	10: "home_page",
	11: "preset_questions",
	12: "tool_ids",
	13: "tools",
	14: "logo",
	15: "author_id",
	16: "author",
	17: "label_ids",
	18: "labels",
	19: "model_config",
	20: "created_at",
	21: "updated_at",
	22: "published_at",
}

func (p *App) IsSetTools() bool {
	return p.Tools != nil
}

func (p *App) IsSetAuthor() bool {
	return p.Author != nil
}

func (p *App) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *App) IsSetModelConfig() bool {
	return p.ModelConfig != nil
}

func (p *App) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *App) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *App) IsSetPublishedAt() bool {
	return p.PublishedAt != nil
}

func (p *App) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetDescription bool = false
	var issetDescriptionMd bool = false
	var issetModelId bool = false
	var issetEnableImage bool = false
	var issetEnableFile bool = false
	var issetVersion bool = false
	var issetIsPrivate bool = false
	var issetHomePage bool = false
	var issetPresetQuestions bool = false
	var issetToolIds bool = false
	var issetLogo bool = false
	var issetAuthorId bool = false
	var issetLabelIds bool = false
	var issetModelConfig bool = false
	var issetCreatedAt bool = false
	var issetUpdatedAt bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescriptionMd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetModelId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableImage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableFile = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsPrivate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetHomePage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetPresetQuestions = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetToolIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetLogo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetAuthorId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabelIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetModelConfig = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreatedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdatedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDescriptionMd {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetModelId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetEnableImage {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetEnableFile {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetIsPrivate {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetHomePage {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetPresetQuestions {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetToolIds {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetLogo {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetAuthorId {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetLabelIds {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetModelConfig {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetCreatedAt {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetUpdatedAt {
		fieldId = 21
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_App[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_App[fieldId]))
}

func (p *App) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *App) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *App) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *App) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DescriptionMd = _field
	return nil
}
func (p *App) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ModelId = _field
	return nil
}
func (p *App) ReadField6(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableImage = _field
	return nil
}
func (p *App) ReadField7(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableFile = _field
	return nil
}
func (p *App) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *App) ReadField9(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsPrivate = _field
	return nil
}
func (p *App) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HomePage = _field
	return nil
}
func (p *App) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PresetQuestions = _field
	return nil
}
func (p *App) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolIds = _field
	return nil
}
func (p *App) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*pluginsvc.PluginTool, 0, size)
	values := make([]pluginsvc.PluginTool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tools = _field
	return nil
}
func (p *App) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Logo = _field
	return nil
}
func (p *App) ReadField15(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AuthorId = _field
	return nil
}
func (p *App) ReadField16(iprot thrift.TProtocol) error {
	_field := usersvc.NewUser()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Author = _field
	return nil
}
func (p *App) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LabelIds = _field
	return nil
}
func (p *App) ReadField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*AppLabel, 0, size)
	values := make([]AppLabel, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Labels = _field
	return nil
}
func (p *App) ReadField19(iprot thrift.TProtocol) error {
	_field := NewModelConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ModelConfig = _field
	return nil
}
func (p *App) ReadField20(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreatedAt = _field
	return nil
}
func (p *App) ReadField21(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UpdatedAt = _field
	return nil
}
func (p *App) ReadField22(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PublishedAt = _field
	return nil
}

func (p *App) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("App"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *App) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *App) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *App) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *App) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description_md", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DescriptionMd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *App) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("model_id", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ModelId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *App) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enable_image", thrift.BOOL, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableImage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *App) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enable_file", thrift.BOOL, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableFile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *App) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *App) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_private", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsPrivate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *App) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("home_page", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.HomePage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *App) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("preset_questions", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PresetQuestions)); err != nil {
		return err
	}
	for _, v := range p.PresetQuestions {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *App) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tool_ids", thrift.LIST, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ToolIds)); err != nil {
		return err
	}
	for _, v := range p.ToolIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *App) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTools() {
		if err = oprot.WriteFieldBegin("tools", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tools)); err != nil {
			return err
		}
		for _, v := range p.Tools {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *App) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("logo", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Logo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *App) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("author_id", thrift.I64, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.AuthorId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *App) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthor() {
		if err = oprot.WriteFieldBegin("author", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Author.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *App) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("label_ids", thrift.LIST, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.LabelIds)); err != nil {
		return err
	}
	for _, v := range p.LabelIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *App) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("labels", thrift.LIST, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *App) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("model_config", thrift.STRUCT, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ModelConfig.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *App) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRUCT, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CreatedAt.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *App) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.STRUCT, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.UpdatedAt.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *App) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublishedAt() {
		if err = oprot.WriteFieldBegin("published_at", thrift.STRUCT, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PublishedAt.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *App) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("App(%+v)", *p)

}

func (p *App) DeepEqual(ano *App) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.DescriptionMd) {
		return false
	}
	if !p.Field5DeepEqual(ano.ModelId) {
		return false
	}
	if !p.Field6DeepEqual(ano.EnableImage) {
		return false
	}
	if !p.Field7DeepEqual(ano.EnableFile) {
		return false
	}
	if !p.Field8DeepEqual(ano.Version) {
		return false
	}
	if !p.Field9DeepEqual(ano.IsPrivate) {
		return false
	}
	if !p.Field10DeepEqual(ano.HomePage) {
		return false
	}
	if !p.Field11DeepEqual(ano.PresetQuestions) {
		return false
	}
	if !p.Field12DeepEqual(ano.ToolIds) {
		return false
	}
	if !p.Field13DeepEqual(ano.Tools) {
		return false
	}
	if !p.Field14DeepEqual(ano.Logo) {
		return false
	}
	if !p.Field15DeepEqual(ano.AuthorId) {
		return false
	}
	if !p.Field16DeepEqual(ano.Author) {
		return false
	}
	if !p.Field17DeepEqual(ano.LabelIds) {
		return false
	}
	if !p.Field18DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field19DeepEqual(ano.ModelConfig) {
		return false
	}
	if !p.Field20DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field21DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field22DeepEqual(ano.PublishedAt) {
		return false
	}
	return true
}

func (p *App) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *App) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *App) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *App) Field4DeepEqual(src string) bool {

	if strings.Compare(p.DescriptionMd, src) != 0 {
		return false
	}
	return true
}
func (p *App) Field5DeepEqual(src int64) bool {

	if p.ModelId != src {
		return false
	}
	return true
}
func (p *App) Field6DeepEqual(src bool) bool {

	if p.EnableImage != src {
		return false
	}
	return true
}
func (p *App) Field7DeepEqual(src bool) bool {

	if p.EnableFile != src {
		return false
	}
	return true
}
func (p *App) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *App) Field9DeepEqual(src bool) bool {

	if p.IsPrivate != src {
		return false
	}
	return true
}
func (p *App) Field10DeepEqual(src string) bool {

	if strings.Compare(p.HomePage, src) != 0 {
		return false
	}
	return true
}
func (p *App) Field11DeepEqual(src []string) bool {

	if len(p.PresetQuestions) != len(src) {
		return false
	}
	for i, v := range p.PresetQuestions {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *App) Field12DeepEqual(src []int64) bool {

	if len(p.ToolIds) != len(src) {
		return false
	}
	for i, v := range p.ToolIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *App) Field13DeepEqual(src []*pluginsvc.PluginTool) bool {

	if len(p.Tools) != len(src) {
		return false
	}
	for i, v := range p.Tools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *App) Field14DeepEqual(src string) bool {

	if strings.Compare(p.Logo, src) != 0 {
		return false
	}
	return true
}
func (p *App) Field15DeepEqual(src int64) bool {

	if p.AuthorId != src {
		return false
	}
	return true
}
func (p *App) Field16DeepEqual(src *usersvc.User) bool {

	if !p.Author.DeepEqual(src) {
		return false
	}
	return true
}
func (p *App) Field17DeepEqual(src []int64) bool {

	if len(p.LabelIds) != len(src) {
		return false
	}
	for i, v := range p.LabelIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *App) Field18DeepEqual(src []*AppLabel) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *App) Field19DeepEqual(src *ModelConfig) bool {

	if !p.ModelConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *App) Field20DeepEqual(src *base.Time) bool {

	if !p.CreatedAt.DeepEqual(src) {
		return false
	}
	return true
}
func (p *App) Field21DeepEqual(src *base.Time) bool {

	if !p.UpdatedAt.DeepEqual(src) {
		return false
	}
	return true
}
func (p *App) Field22DeepEqual(src *base.Time) bool {

	if !p.PublishedAt.DeepEqual(src) {
		return false
	}
	return true
}

type ModelConfig struct {
	MaxTokens        *int32                               `thrift:"max_tokens,1,optional" frugal:"1,optional,i32" json:"max_tokens,omitempty"`
	Temperature      *float64                             `thrift:"temperature,2,optional" frugal:"2,optional,double" json:"temperature,omitempty"`
	TopP             *float64                             `thrift:"top_p,3,optional" frugal:"3,optional,double" json:"top_p,omitempty"`
	N                int32                                `thrift:"n,4,optional" frugal:"4,optional,i32" json:"n,omitempty"`
	Stream           bool                                 `thrift:"stream,5,optional" frugal:"5,optional,bool" json:"stream,omitempty"`
	Stop             []string                             `thrift:"stop,6,optional" frugal:"6,optional,list<string>" json:"stop,omitempty"`
	PresencePenalty  *float64                             `thrift:"presence_penalty,7,optional" frugal:"7,optional,double" json:"presence_penalty,omitempty"`
	ResponseFormat   *openai.ChatCompletionResponseFormat `thrift:"response_format,8,optional" frugal:"8,optional,openai.ChatCompletionResponseFormat" json:"response_format,omitempty"`
	Seed             *int32                               `thrift:"seed,9,optional" frugal:"9,optional,i32" json:"seed,omitempty"`
	FrequencyPenalty *float64                             `thrift:"frequency_penalty,10,optional" frugal:"10,optional,double" json:"frequency_penalty,omitempty"`
	LogitBias        map[string]int32                     `thrift:"logit_bias,11,optional" frugal:"11,optional,map<string:i32>" json:"logit_bias,omitempty"`
	Logprobs         *bool                                `thrift:"logprobs,12,optional" frugal:"12,optional,bool" json:"logprobs,omitempty"`
	TopLogprobs      *int32                               `thrift:"top_logprobs,13,optional" frugal:"13,optional,i32" json:"top_logprobs,omitempty"`
	User             *string                              `thrift:"user,14,optional" frugal:"14,optional,string" json:"user,omitempty"`
	StreamOptions    *openai.StreamOptions                `thrift:"stream_options,15,optional" frugal:"15,optional,openai.StreamOptions" json:"stream_options,omitempty"`
}

func NewModelConfig() *ModelConfig {
	return &ModelConfig{

		N:      1,
		Stream: true,
	}
}

func (p *ModelConfig) InitDefault() {
	p.N = 1
	p.Stream = true
}

var ModelConfig_MaxTokens_DEFAULT int32

func (p *ModelConfig) GetMaxTokens() (v int32) {
	if !p.IsSetMaxTokens() {
		return ModelConfig_MaxTokens_DEFAULT
	}
	return *p.MaxTokens
}

var ModelConfig_Temperature_DEFAULT float64

func (p *ModelConfig) GetTemperature() (v float64) {
	if !p.IsSetTemperature() {
		return ModelConfig_Temperature_DEFAULT
	}
	return *p.Temperature
}

var ModelConfig_TopP_DEFAULT float64

func (p *ModelConfig) GetTopP() (v float64) {
	if !p.IsSetTopP() {
		return ModelConfig_TopP_DEFAULT
	}
	return *p.TopP
}

var ModelConfig_N_DEFAULT int32 = 1

func (p *ModelConfig) GetN() (v int32) {
	if !p.IsSetN() {
		return ModelConfig_N_DEFAULT
	}
	return p.N
}

var ModelConfig_Stream_DEFAULT bool = true

func (p *ModelConfig) GetStream() (v bool) {
	if !p.IsSetStream() {
		return ModelConfig_Stream_DEFAULT
	}
	return p.Stream
}

var ModelConfig_Stop_DEFAULT []string

func (p *ModelConfig) GetStop() (v []string) {
	if !p.IsSetStop() {
		return ModelConfig_Stop_DEFAULT
	}
	return p.Stop
}

var ModelConfig_PresencePenalty_DEFAULT float64

func (p *ModelConfig) GetPresencePenalty() (v float64) {
	if !p.IsSetPresencePenalty() {
		return ModelConfig_PresencePenalty_DEFAULT
	}
	return *p.PresencePenalty
}

var ModelConfig_ResponseFormat_DEFAULT *openai.ChatCompletionResponseFormat

func (p *ModelConfig) GetResponseFormat() (v *openai.ChatCompletionResponseFormat) {
	if !p.IsSetResponseFormat() {
		return ModelConfig_ResponseFormat_DEFAULT
	}
	return p.ResponseFormat
}

var ModelConfig_Seed_DEFAULT int32

func (p *ModelConfig) GetSeed() (v int32) {
	if !p.IsSetSeed() {
		return ModelConfig_Seed_DEFAULT
	}
	return *p.Seed
}

var ModelConfig_FrequencyPenalty_DEFAULT float64

func (p *ModelConfig) GetFrequencyPenalty() (v float64) {
	if !p.IsSetFrequencyPenalty() {
		return ModelConfig_FrequencyPenalty_DEFAULT
	}
	return *p.FrequencyPenalty
}

var ModelConfig_LogitBias_DEFAULT map[string]int32

func (p *ModelConfig) GetLogitBias() (v map[string]int32) {
	if !p.IsSetLogitBias() {
		return ModelConfig_LogitBias_DEFAULT
	}
	return p.LogitBias
}

var ModelConfig_Logprobs_DEFAULT bool

func (p *ModelConfig) GetLogprobs() (v bool) {
	if !p.IsSetLogprobs() {
		return ModelConfig_Logprobs_DEFAULT
	}
	return *p.Logprobs
}

var ModelConfig_TopLogprobs_DEFAULT int32

func (p *ModelConfig) GetTopLogprobs() (v int32) {
	if !p.IsSetTopLogprobs() {
		return ModelConfig_TopLogprobs_DEFAULT
	}
	return *p.TopLogprobs
}

var ModelConfig_User_DEFAULT string

func (p *ModelConfig) GetUser() (v string) {
	if !p.IsSetUser() {
		return ModelConfig_User_DEFAULT
	}
	return *p.User
}

var ModelConfig_StreamOptions_DEFAULT *openai.StreamOptions

func (p *ModelConfig) GetStreamOptions() (v *openai.StreamOptions) {
	if !p.IsSetStreamOptions() {
		return ModelConfig_StreamOptions_DEFAULT
	}
	return p.StreamOptions
}
func (p *ModelConfig) SetMaxTokens(val *int32) {
	p.MaxTokens = val
}
func (p *ModelConfig) SetTemperature(val *float64) {
	p.Temperature = val
}
func (p *ModelConfig) SetTopP(val *float64) {
	p.TopP = val
}
func (p *ModelConfig) SetN(val int32) {
	p.N = val
}
func (p *ModelConfig) SetStream(val bool) {
	p.Stream = val
}
func (p *ModelConfig) SetStop(val []string) {
	p.Stop = val
}
func (p *ModelConfig) SetPresencePenalty(val *float64) {
	p.PresencePenalty = val
}
func (p *ModelConfig) SetResponseFormat(val *openai.ChatCompletionResponseFormat) {
	p.ResponseFormat = val
}
func (p *ModelConfig) SetSeed(val *int32) {
	p.Seed = val
}
func (p *ModelConfig) SetFrequencyPenalty(val *float64) {
	p.FrequencyPenalty = val
}
func (p *ModelConfig) SetLogitBias(val map[string]int32) {
	p.LogitBias = val
}
func (p *ModelConfig) SetLogprobs(val *bool) {
	p.Logprobs = val
}
func (p *ModelConfig) SetTopLogprobs(val *int32) {
	p.TopLogprobs = val
}
func (p *ModelConfig) SetUser(val *string) {
	p.User = val
}
func (p *ModelConfig) SetStreamOptions(val *openai.StreamOptions) {
	p.StreamOptions = val
}

var fieldIDToName_ModelConfig = map[int16]string{
	1:  "max_tokens",
	2:  "temperature",
	3:  "top_p",
	4:  "n",
	5:  "stream",
	6:  "stop",
	7:  "presence_penalty",
	8:  "response_format",
	9:  "seed",
	10: "frequency_penalty",
	11: "logit_bias",
	12: "logprobs",
	13: "top_logprobs",
	14: "user",
	15: "stream_options",
}

func (p *ModelConfig) IsSetMaxTokens() bool {
	return p.MaxTokens != nil
}

func (p *ModelConfig) IsSetTemperature() bool {
	return p.Temperature != nil
}

func (p *ModelConfig) IsSetTopP() bool {
	return p.TopP != nil
}

func (p *ModelConfig) IsSetN() bool {
	return p.N != ModelConfig_N_DEFAULT
}

func (p *ModelConfig) IsSetStream() bool {
	return p.Stream != ModelConfig_Stream_DEFAULT
}

func (p *ModelConfig) IsSetStop() bool {
	return p.Stop != nil
}

func (p *ModelConfig) IsSetPresencePenalty() bool {
	return p.PresencePenalty != nil
}

func (p *ModelConfig) IsSetResponseFormat() bool {
	return p.ResponseFormat != nil
}

func (p *ModelConfig) IsSetSeed() bool {
	return p.Seed != nil
}

func (p *ModelConfig) IsSetFrequencyPenalty() bool {
	return p.FrequencyPenalty != nil
}

func (p *ModelConfig) IsSetLogitBias() bool {
	return p.LogitBias != nil
}

func (p *ModelConfig) IsSetLogprobs() bool {
	return p.Logprobs != nil
}

func (p *ModelConfig) IsSetTopLogprobs() bool {
	return p.TopLogprobs != nil
}

func (p *ModelConfig) IsSetUser() bool {
	return p.User != nil
}

func (p *ModelConfig) IsSetStreamOptions() bool {
	return p.StreamOptions != nil
}

func (p *ModelConfig) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxTokens = _field
	return nil
}
func (p *ModelConfig) ReadField2(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Temperature = _field
	return nil
}
func (p *ModelConfig) ReadField3(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopP = _field
	return nil
}
func (p *ModelConfig) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.N = _field
	return nil
}
func (p *ModelConfig) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Stream = _field
	return nil
}
func (p *ModelConfig) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Stop = _field
	return nil
}
func (p *ModelConfig) ReadField7(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PresencePenalty = _field
	return nil
}
func (p *ModelConfig) ReadField8(iprot thrift.TProtocol) error {
	_field := openai.NewChatCompletionResponseFormat()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResponseFormat = _field
	return nil
}
func (p *ModelConfig) ReadField9(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Seed = _field
	return nil
}
func (p *ModelConfig) ReadField10(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FrequencyPenalty = _field
	return nil
}
func (p *ModelConfig) ReadField11(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]int32, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.LogitBias = _field
	return nil
}
func (p *ModelConfig) ReadField12(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Logprobs = _field
	return nil
}
func (p *ModelConfig) ReadField13(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopLogprobs = _field
	return nil
}
func (p *ModelConfig) ReadField14(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *ModelConfig) ReadField15(iprot thrift.TProtocol) error {
	_field := openai.NewStreamOptions()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.StreamOptions = _field
	return nil
}

func (p *ModelConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTokens() {
		if err = oprot.WriteFieldBegin("max_tokens", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ModelConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTemperature() {
		if err = oprot.WriteFieldBegin("temperature", thrift.DOUBLE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Temperature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ModelConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopP() {
		if err = oprot.WriteFieldBegin("top_p", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.TopP); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ModelConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetN() {
		if err = oprot.WriteFieldBegin("n", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.N); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ModelConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStream() {
		if err = oprot.WriteFieldBegin("stream", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.Stream); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelConfig) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStop() {
		if err = oprot.WriteFieldBegin("stop", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Stop)); err != nil {
			return err
		}
		for _, v := range p.Stop {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelConfig) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPresencePenalty() {
		if err = oprot.WriteFieldBegin("presence_penalty", thrift.DOUBLE, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.PresencePenalty); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ModelConfig) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseFormat() {
		if err = oprot.WriteFieldBegin("response_format", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResponseFormat.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelConfig) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSeed() {
		if err = oprot.WriteFieldBegin("seed", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Seed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ModelConfig) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFrequencyPenalty() {
		if err = oprot.WriteFieldBegin("frequency_penalty", thrift.DOUBLE, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.FrequencyPenalty); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelConfig) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogitBias() {
		if err = oprot.WriteFieldBegin("logit_bias", thrift.MAP, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.LogitBias)); err != nil {
			return err
		}
		for k, v := range p.LogitBias {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ModelConfig) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogprobs() {
		if err = oprot.WriteFieldBegin("logprobs", thrift.BOOL, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Logprobs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ModelConfig) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopLogprobs() {
		if err = oprot.WriteFieldBegin("top_logprobs", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TopLogprobs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ModelConfig) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ModelConfig) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetStreamOptions() {
		if err = oprot.WriteFieldBegin("stream_options", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.StreamOptions.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ModelConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelConfig(%+v)", *p)

}

func (p *ModelConfig) DeepEqual(ano *ModelConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaxTokens) {
		return false
	}
	if !p.Field2DeepEqual(ano.Temperature) {
		return false
	}
	if !p.Field3DeepEqual(ano.TopP) {
		return false
	}
	if !p.Field4DeepEqual(ano.N) {
		return false
	}
	if !p.Field5DeepEqual(ano.Stream) {
		return false
	}
	if !p.Field6DeepEqual(ano.Stop) {
		return false
	}
	if !p.Field7DeepEqual(ano.PresencePenalty) {
		return false
	}
	if !p.Field8DeepEqual(ano.ResponseFormat) {
		return false
	}
	if !p.Field9DeepEqual(ano.Seed) {
		return false
	}
	if !p.Field10DeepEqual(ano.FrequencyPenalty) {
		return false
	}
	if !p.Field11DeepEqual(ano.LogitBias) {
		return false
	}
	if !p.Field12DeepEqual(ano.Logprobs) {
		return false
	}
	if !p.Field13DeepEqual(ano.TopLogprobs) {
		return false
	}
	if !p.Field14DeepEqual(ano.User) {
		return false
	}
	if !p.Field15DeepEqual(ano.StreamOptions) {
		return false
	}
	return true
}

func (p *ModelConfig) Field1DeepEqual(src *int32) bool {

	if p.MaxTokens == src {
		return true
	} else if p.MaxTokens == nil || src == nil {
		return false
	}
	if *p.MaxTokens != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field2DeepEqual(src *float64) bool {

	if p.Temperature == src {
		return true
	} else if p.Temperature == nil || src == nil {
		return false
	}
	if *p.Temperature != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field3DeepEqual(src *float64) bool {

	if p.TopP == src {
		return true
	} else if p.TopP == nil || src == nil {
		return false
	}
	if *p.TopP != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field4DeepEqual(src int32) bool {

	if p.N != src {
		return false
	}
	return true
}
func (p *ModelConfig) Field5DeepEqual(src bool) bool {

	if p.Stream != src {
		return false
	}
	return true
}
func (p *ModelConfig) Field6DeepEqual(src []string) bool {

	if len(p.Stop) != len(src) {
		return false
	}
	for i, v := range p.Stop {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ModelConfig) Field7DeepEqual(src *float64) bool {

	if p.PresencePenalty == src {
		return true
	} else if p.PresencePenalty == nil || src == nil {
		return false
	}
	if *p.PresencePenalty != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field8DeepEqual(src *openai.ChatCompletionResponseFormat) bool {

	if !p.ResponseFormat.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ModelConfig) Field9DeepEqual(src *int32) bool {

	if p.Seed == src {
		return true
	} else if p.Seed == nil || src == nil {
		return false
	}
	if *p.Seed != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field10DeepEqual(src *float64) bool {

	if p.FrequencyPenalty == src {
		return true
	} else if p.FrequencyPenalty == nil || src == nil {
		return false
	}
	if *p.FrequencyPenalty != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field11DeepEqual(src map[string]int32) bool {

	if len(p.LogitBias) != len(src) {
		return false
	}
	for k, v := range p.LogitBias {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ModelConfig) Field12DeepEqual(src *bool) bool {

	if p.Logprobs == src {
		return true
	} else if p.Logprobs == nil || src == nil {
		return false
	}
	if *p.Logprobs != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field13DeepEqual(src *int32) bool {

	if p.TopLogprobs == src {
		return true
	} else if p.TopLogprobs == nil || src == nil {
		return false
	}
	if *p.TopLogprobs != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field14DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *ModelConfig) Field15DeepEqual(src *openai.StreamOptions) bool {

	if !p.StreamOptions.DeepEqual(src) {
		return false
	}
	return true
}

type CreateAppReq struct {
	Name            string       `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Description     string       `thrift:"description,2,required" frugal:"2,required,string" json:"description"`
	DescriptionMd   string       `thrift:"description_md,3,required" frugal:"3,required,string" json:"description_md"`
	ModelId         int64        `thrift:"model_id,4,required" frugal:"4,required,i64" json:"model_id"`
	EnableImage     bool         `thrift:"enable_image,5,required" frugal:"5,required,bool" json:"enable_image"`
	EnableFile      bool         `thrift:"enable_file,6,required" frugal:"6,required,bool" json:"enable_file"`
	Version         string       `thrift:"version,7,required" frugal:"7,required,string" json:"version"`
	IsPrivate       bool         `thrift:"is_private,8,required" frugal:"8,required,bool" json:"is_private"`
	HomePage        string       `thrift:"home_page,9,required" frugal:"9,required,string" json:"home_page"`
	PresetQuestions []string     `thrift:"preset_questions,10,required" frugal:"10,required,list<string>" json:"preset_questions"`
	ToolIds         []int64      `thrift:"tool_ids,11,required" frugal:"11,required,list<i64>" json:"tool_ids"`
	Logo            string       `thrift:"logo,12,required" frugal:"12,required,string" json:"logo"`
	LabelIds        []int64      `thrift:"label_ids,13,required" frugal:"13,required,list<i64>" json:"label_ids"`
	LabelTexts      []string     `thrift:"label_texts,14,required" frugal:"14,required,list<string>" json:"label_texts"`
	ModelConfig     *ModelConfig `thrift:"model_config,15,required" frugal:"15,required,ModelConfig" json:"model_config"`
}

func NewCreateAppReq() *CreateAppReq {
	return &CreateAppReq{}
}

func (p *CreateAppReq) InitDefault() {
}

func (p *CreateAppReq) GetName() (v string) {
	return p.Name
}

func (p *CreateAppReq) GetDescription() (v string) {
	return p.Description
}

func (p *CreateAppReq) GetDescriptionMd() (v string) {
	return p.DescriptionMd
}

func (p *CreateAppReq) GetModelId() (v int64) {
	return p.ModelId
}

func (p *CreateAppReq) GetEnableImage() (v bool) {
	return p.EnableImage
}

func (p *CreateAppReq) GetEnableFile() (v bool) {
	return p.EnableFile
}

func (p *CreateAppReq) GetVersion() (v string) {
	return p.Version
}

func (p *CreateAppReq) GetIsPrivate() (v bool) {
	return p.IsPrivate
}

func (p *CreateAppReq) GetHomePage() (v string) {
	return p.HomePage
}

func (p *CreateAppReq) GetPresetQuestions() (v []string) {
	return p.PresetQuestions
}

func (p *CreateAppReq) GetToolIds() (v []int64) {
	return p.ToolIds
}

func (p *CreateAppReq) GetLogo() (v string) {
	return p.Logo
}

func (p *CreateAppReq) GetLabelIds() (v []int64) {
	return p.LabelIds
}

func (p *CreateAppReq) GetLabelTexts() (v []string) {
	return p.LabelTexts
}

var CreateAppReq_ModelConfig_DEFAULT *ModelConfig

func (p *CreateAppReq) GetModelConfig() (v *ModelConfig) {
	if !p.IsSetModelConfig() {
		return CreateAppReq_ModelConfig_DEFAULT
	}
	return p.ModelConfig
}
func (p *CreateAppReq) SetName(val string) {
	p.Name = val
}
func (p *CreateAppReq) SetDescription(val string) {
	p.Description = val
}
func (p *CreateAppReq) SetDescriptionMd(val string) {
	p.DescriptionMd = val
}
func (p *CreateAppReq) SetModelId(val int64) {
	p.ModelId = val
}
func (p *CreateAppReq) SetEnableImage(val bool) {
	p.EnableImage = val
}
func (p *CreateAppReq) SetEnableFile(val bool) {
	p.EnableFile = val
}
func (p *CreateAppReq) SetVersion(val string) {
	p.Version = val
}
func (p *CreateAppReq) SetIsPrivate(val bool) {
	p.IsPrivate = val
}
func (p *CreateAppReq) SetHomePage(val string) {
	p.HomePage = val
}
func (p *CreateAppReq) SetPresetQuestions(val []string) {
	p.PresetQuestions = val
}
func (p *CreateAppReq) SetToolIds(val []int64) {
	p.ToolIds = val
}
func (p *CreateAppReq) SetLogo(val string) {
	p.Logo = val
}
func (p *CreateAppReq) SetLabelIds(val []int64) {
	p.LabelIds = val
}
func (p *CreateAppReq) SetLabelTexts(val []string) {
	p.LabelTexts = val
}
func (p *CreateAppReq) SetModelConfig(val *ModelConfig) {
	p.ModelConfig = val
}

var fieldIDToName_CreateAppReq = map[int16]string{
	1:  "name",
	2:  "description",
	3:  "description_md",
	4:  "model_id",
	5:  "enable_image",
	6:  "enable_file",
	7:  "version",
	8:  "is_private",
	9:  "home_page",
	10: "preset_questions",
	11: "tool_ids",
	12: "logo",
	13: "label_ids",
	14: "label_texts",
	15: "model_config",
}

func (p *CreateAppReq) IsSetModelConfig() bool {
	return p.ModelConfig != nil
}

func (p *CreateAppReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetDescription bool = false
	var issetDescriptionMd bool = false
	var issetModelId bool = false
	var issetEnableImage bool = false
	var issetEnableFile bool = false
	var issetVersion bool = false
	var issetIsPrivate bool = false
	var issetHomePage bool = false
	var issetPresetQuestions bool = false
	var issetToolIds bool = false
	var issetLogo bool = false
	var issetLabelIds bool = false
	var issetLabelTexts bool = false
	var issetModelConfig bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescriptionMd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetModelId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableImage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableFile = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsPrivate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetHomePage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetPresetQuestions = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetToolIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetLogo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabelIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabelTexts = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetModelConfig = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetDescriptionMd {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetModelId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetEnableImage {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetEnableFile {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetIsPrivate {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetHomePage {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetPresetQuestions {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetToolIds {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetLogo {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetLabelIds {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetLabelTexts {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetModelConfig {
		fieldId = 15
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateAppReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateAppReq[fieldId]))
}

func (p *CreateAppReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateAppReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *CreateAppReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DescriptionMd = _field
	return nil
}
func (p *CreateAppReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ModelId = _field
	return nil
}
func (p *CreateAppReq) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableImage = _field
	return nil
}
func (p *CreateAppReq) ReadField6(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableFile = _field
	return nil
}
func (p *CreateAppReq) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *CreateAppReq) ReadField8(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsPrivate = _field
	return nil
}
func (p *CreateAppReq) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HomePage = _field
	return nil
}
func (p *CreateAppReq) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PresetQuestions = _field
	return nil
}
func (p *CreateAppReq) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolIds = _field
	return nil
}
func (p *CreateAppReq) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Logo = _field
	return nil
}
func (p *CreateAppReq) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LabelIds = _field
	return nil
}
func (p *CreateAppReq) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LabelTexts = _field
	return nil
}
func (p *CreateAppReq) ReadField15(iprot thrift.TProtocol) error {
	_field := NewModelConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ModelConfig = _field
	return nil
}

func (p *CreateAppReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAppReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateAppReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateAppReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateAppReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description_md", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DescriptionMd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateAppReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("model_id", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ModelId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateAppReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enable_image", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableImage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateAppReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enable_file", thrift.BOOL, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableFile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateAppReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateAppReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_private", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsPrivate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateAppReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("home_page", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.HomePage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateAppReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("preset_questions", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PresetQuestions)); err != nil {
		return err
	}
	for _, v := range p.PresetQuestions {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateAppReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tool_ids", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ToolIds)); err != nil {
		return err
	}
	for _, v := range p.ToolIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateAppReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("logo", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Logo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateAppReq) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("label_ids", thrift.LIST, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.LabelIds)); err != nil {
		return err
	}
	for _, v := range p.LabelIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateAppReq) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("label_texts", thrift.LIST, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.LabelTexts)); err != nil {
		return err
	}
	for _, v := range p.LabelTexts {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *CreateAppReq) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("model_config", thrift.STRUCT, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ModelConfig.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *CreateAppReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateAppReq(%+v)", *p)

}

func (p *CreateAppReq) DeepEqual(ano *CreateAppReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.DescriptionMd) {
		return false
	}
	if !p.Field4DeepEqual(ano.ModelId) {
		return false
	}
	if !p.Field5DeepEqual(ano.EnableImage) {
		return false
	}
	if !p.Field6DeepEqual(ano.EnableFile) {
		return false
	}
	if !p.Field7DeepEqual(ano.Version) {
		return false
	}
	if !p.Field8DeepEqual(ano.IsPrivate) {
		return false
	}
	if !p.Field9DeepEqual(ano.HomePage) {
		return false
	}
	if !p.Field10DeepEqual(ano.PresetQuestions) {
		return false
	}
	if !p.Field11DeepEqual(ano.ToolIds) {
		return false
	}
	if !p.Field12DeepEqual(ano.Logo) {
		return false
	}
	if !p.Field13DeepEqual(ano.LabelIds) {
		return false
	}
	if !p.Field14DeepEqual(ano.LabelTexts) {
		return false
	}
	if !p.Field15DeepEqual(ano.ModelConfig) {
		return false
	}
	return true
}

func (p *CreateAppReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAppReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAppReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.DescriptionMd, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAppReq) Field4DeepEqual(src int64) bool {

	if p.ModelId != src {
		return false
	}
	return true
}
func (p *CreateAppReq) Field5DeepEqual(src bool) bool {

	if p.EnableImage != src {
		return false
	}
	return true
}
func (p *CreateAppReq) Field6DeepEqual(src bool) bool {

	if p.EnableFile != src {
		return false
	}
	return true
}
func (p *CreateAppReq) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAppReq) Field8DeepEqual(src bool) bool {

	if p.IsPrivate != src {
		return false
	}
	return true
}
func (p *CreateAppReq) Field9DeepEqual(src string) bool {

	if strings.Compare(p.HomePage, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAppReq) Field10DeepEqual(src []string) bool {

	if len(p.PresetQuestions) != len(src) {
		return false
	}
	for i, v := range p.PresetQuestions {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CreateAppReq) Field11DeepEqual(src []int64) bool {

	if len(p.ToolIds) != len(src) {
		return false
	}
	for i, v := range p.ToolIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *CreateAppReq) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Logo, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAppReq) Field13DeepEqual(src []int64) bool {

	if len(p.LabelIds) != len(src) {
		return false
	}
	for i, v := range p.LabelIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *CreateAppReq) Field14DeepEqual(src []string) bool {

	if len(p.LabelTexts) != len(src) {
		return false
	}
	for i, v := range p.LabelTexts {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CreateAppReq) Field15DeepEqual(src *ModelConfig) bool {

	if !p.ModelConfig.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateAppReq struct {
	Id              int64        `thrift:"id,1,required" frugal:"1,required,i64" path:"id"`
	Name            *string      `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Description     *string      `thrift:"description,3,optional" frugal:"3,optional,string" json:"description,omitempty"`
	DescriptionMd   *string      `thrift:"description_md,4,optional" frugal:"4,optional,string" json:"description_md,omitempty"`
	ModelId         *int64       `thrift:"model_id,5,optional" frugal:"5,optional,i64" json:"model_id,omitempty"`
	EnableImage     *bool        `thrift:"enable_image,6,optional" frugal:"6,optional,bool" json:"enable_image,omitempty"`
	EnableFile      *bool        `thrift:"enable_file,7,optional" frugal:"7,optional,bool" json:"enable_file,omitempty"`
	Version         *string      `thrift:"version,8,optional" frugal:"8,optional,string" json:"version,omitempty"`
	IsPrivate       *bool        `thrift:"is_private,9,optional" frugal:"9,optional,bool" json:"is_private,omitempty"`
	HomePage        *string      `thrift:"home_page,10,optional" frugal:"10,optional,string" json:"home_page,omitempty"`
	PresetQuestions []string     `thrift:"preset_questions,11,optional" frugal:"11,optional,list<string>" json:"preset_questions,omitempty"`
	ToolIds         []int64      `thrift:"tool_ids,12,optional" frugal:"12,optional,list<i64>" json:"tool_ids,omitempty"`
	Logo            *string      `thrift:"logo,13,optional" frugal:"13,optional,string" json:"logo,omitempty"`
	LabelIds        []int64      `thrift:"label_ids,14,optional" frugal:"14,optional,list<i64>" json:"label_ids,omitempty"`
	LabelTexts      []string     `thrift:"label_texts,15,optional" frugal:"15,optional,list<string>" json:"label_texts,omitempty"`
	ModelConfig     *ModelConfig `thrift:"model_config,16,optional" frugal:"16,optional,ModelConfig" json:"model_config,omitempty"`
}

func NewUpdateAppReq() *UpdateAppReq {
	return &UpdateAppReq{}
}

func (p *UpdateAppReq) InitDefault() {
}

func (p *UpdateAppReq) GetId() (v int64) {
	return p.Id
}

var UpdateAppReq_Name_DEFAULT string

func (p *UpdateAppReq) GetName() (v string) {
	if !p.IsSetName() {
		return UpdateAppReq_Name_DEFAULT
	}
	return *p.Name
}

var UpdateAppReq_Description_DEFAULT string

func (p *UpdateAppReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return UpdateAppReq_Description_DEFAULT
	}
	return *p.Description
}

var UpdateAppReq_DescriptionMd_DEFAULT string

func (p *UpdateAppReq) GetDescriptionMd() (v string) {
	if !p.IsSetDescriptionMd() {
		return UpdateAppReq_DescriptionMd_DEFAULT
	}
	return *p.DescriptionMd
}

var UpdateAppReq_ModelId_DEFAULT int64

func (p *UpdateAppReq) GetModelId() (v int64) {
	if !p.IsSetModelId() {
		return UpdateAppReq_ModelId_DEFAULT
	}
	return *p.ModelId
}

var UpdateAppReq_EnableImage_DEFAULT bool

func (p *UpdateAppReq) GetEnableImage() (v bool) {
	if !p.IsSetEnableImage() {
		return UpdateAppReq_EnableImage_DEFAULT
	}
	return *p.EnableImage
}

var UpdateAppReq_EnableFile_DEFAULT bool

func (p *UpdateAppReq) GetEnableFile() (v bool) {
	if !p.IsSetEnableFile() {
		return UpdateAppReq_EnableFile_DEFAULT
	}
	return *p.EnableFile
}

var UpdateAppReq_Version_DEFAULT string

func (p *UpdateAppReq) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return UpdateAppReq_Version_DEFAULT
	}
	return *p.Version
}

var UpdateAppReq_IsPrivate_DEFAULT bool

func (p *UpdateAppReq) GetIsPrivate() (v bool) {
	if !p.IsSetIsPrivate() {
		return UpdateAppReq_IsPrivate_DEFAULT
	}
	return *p.IsPrivate
}

var UpdateAppReq_HomePage_DEFAULT string

func (p *UpdateAppReq) GetHomePage() (v string) {
	if !p.IsSetHomePage() {
		return UpdateAppReq_HomePage_DEFAULT
	}
	return *p.HomePage
}

var UpdateAppReq_PresetQuestions_DEFAULT []string

func (p *UpdateAppReq) GetPresetQuestions() (v []string) {
	if !p.IsSetPresetQuestions() {
		return UpdateAppReq_PresetQuestions_DEFAULT
	}
	return p.PresetQuestions
}

var UpdateAppReq_ToolIds_DEFAULT []int64

func (p *UpdateAppReq) GetToolIds() (v []int64) {
	if !p.IsSetToolIds() {
		return UpdateAppReq_ToolIds_DEFAULT
	}
	return p.ToolIds
}

var UpdateAppReq_Logo_DEFAULT string

func (p *UpdateAppReq) GetLogo() (v string) {
	if !p.IsSetLogo() {
		return UpdateAppReq_Logo_DEFAULT
	}
	return *p.Logo
}

var UpdateAppReq_LabelIds_DEFAULT []int64

func (p *UpdateAppReq) GetLabelIds() (v []int64) {
	if !p.IsSetLabelIds() {
		return UpdateAppReq_LabelIds_DEFAULT
	}
	return p.LabelIds
}

var UpdateAppReq_LabelTexts_DEFAULT []string

func (p *UpdateAppReq) GetLabelTexts() (v []string) {
	if !p.IsSetLabelTexts() {
		return UpdateAppReq_LabelTexts_DEFAULT
	}
	return p.LabelTexts
}

var UpdateAppReq_ModelConfig_DEFAULT *ModelConfig

func (p *UpdateAppReq) GetModelConfig() (v *ModelConfig) {
	if !p.IsSetModelConfig() {
		return UpdateAppReq_ModelConfig_DEFAULT
	}
	return p.ModelConfig
}
func (p *UpdateAppReq) SetId(val int64) {
	p.Id = val
}
func (p *UpdateAppReq) SetName(val *string) {
	p.Name = val
}
func (p *UpdateAppReq) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdateAppReq) SetDescriptionMd(val *string) {
	p.DescriptionMd = val
}
func (p *UpdateAppReq) SetModelId(val *int64) {
	p.ModelId = val
}
func (p *UpdateAppReq) SetEnableImage(val *bool) {
	p.EnableImage = val
}
func (p *UpdateAppReq) SetEnableFile(val *bool) {
	p.EnableFile = val
}
func (p *UpdateAppReq) SetVersion(val *string) {
	p.Version = val
}
func (p *UpdateAppReq) SetIsPrivate(val *bool) {
	p.IsPrivate = val
}
func (p *UpdateAppReq) SetHomePage(val *string) {
	p.HomePage = val
}
func (p *UpdateAppReq) SetPresetQuestions(val []string) {
	p.PresetQuestions = val
}
func (p *UpdateAppReq) SetToolIds(val []int64) {
	p.ToolIds = val
}
func (p *UpdateAppReq) SetLogo(val *string) {
	p.Logo = val
}
func (p *UpdateAppReq) SetLabelIds(val []int64) {
	p.LabelIds = val
}
func (p *UpdateAppReq) SetLabelTexts(val []string) {
	p.LabelTexts = val
}
func (p *UpdateAppReq) SetModelConfig(val *ModelConfig) {
	p.ModelConfig = val
}

var fieldIDToName_UpdateAppReq = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "description",
	4:  "description_md",
	5:  "model_id",
	6:  "enable_image",
	7:  "enable_file",
	8:  "version",
	9:  "is_private",
	10: "home_page",
	11: "preset_questions",
	12: "tool_ids",
	13: "logo",
	14: "label_ids",
	15: "label_texts",
	16: "model_config",
}

func (p *UpdateAppReq) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdateAppReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdateAppReq) IsSetDescriptionMd() bool {
	return p.DescriptionMd != nil
}

func (p *UpdateAppReq) IsSetModelId() bool {
	return p.ModelId != nil
}

func (p *UpdateAppReq) IsSetEnableImage() bool {
	return p.EnableImage != nil
}

func (p *UpdateAppReq) IsSetEnableFile() bool {
	return p.EnableFile != nil
}

func (p *UpdateAppReq) IsSetVersion() bool {
	return p.Version != nil
}

func (p *UpdateAppReq) IsSetIsPrivate() bool {
	return p.IsPrivate != nil
}

func (p *UpdateAppReq) IsSetHomePage() bool {
	return p.HomePage != nil
}

func (p *UpdateAppReq) IsSetPresetQuestions() bool {
	return p.PresetQuestions != nil
}

func (p *UpdateAppReq) IsSetToolIds() bool {
	return p.ToolIds != nil
}

func (p *UpdateAppReq) IsSetLogo() bool {
	return p.Logo != nil
}

func (p *UpdateAppReq) IsSetLabelIds() bool {
	return p.LabelIds != nil
}

func (p *UpdateAppReq) IsSetLabelTexts() bool {
	return p.LabelTexts != nil
}

func (p *UpdateAppReq) IsSetModelConfig() bool {
	return p.ModelConfig != nil
}

func (p *UpdateAppReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateAppReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateAppReq[fieldId]))
}

func (p *UpdateAppReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateAppReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *UpdateAppReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *UpdateAppReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DescriptionMd = _field
	return nil
}
func (p *UpdateAppReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ModelId = _field
	return nil
}
func (p *UpdateAppReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableImage = _field
	return nil
}
func (p *UpdateAppReq) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableFile = _field
	return nil
}
func (p *UpdateAppReq) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *UpdateAppReq) ReadField9(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsPrivate = _field
	return nil
}
func (p *UpdateAppReq) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HomePage = _field
	return nil
}
func (p *UpdateAppReq) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PresetQuestions = _field
	return nil
}
func (p *UpdateAppReq) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolIds = _field
	return nil
}
func (p *UpdateAppReq) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Logo = _field
	return nil
}
func (p *UpdateAppReq) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LabelIds = _field
	return nil
}
func (p *UpdateAppReq) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LabelTexts = _field
	return nil
}
func (p *UpdateAppReq) ReadField16(iprot thrift.TProtocol) error {
	_field := NewModelConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ModelConfig = _field
	return nil
}

func (p *UpdateAppReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAppReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateAppReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateAppReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateAppReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateAppReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescriptionMd() {
		if err = oprot.WriteFieldBegin("description_md", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DescriptionMd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateAppReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelId() {
		if err = oprot.WriteFieldBegin("model_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ModelId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateAppReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableImage() {
		if err = oprot.WriteFieldBegin("enable_image", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableImage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateAppReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableFile() {
		if err = oprot.WriteFieldBegin("enable_file", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableFile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateAppReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdateAppReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsPrivate() {
		if err = oprot.WriteFieldBegin("is_private", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsPrivate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UpdateAppReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetHomePage() {
		if err = oprot.WriteFieldBegin("home_page", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HomePage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *UpdateAppReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPresetQuestions() {
		if err = oprot.WriteFieldBegin("preset_questions", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PresetQuestions)); err != nil {
			return err
		}
		for _, v := range p.PresetQuestions {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *UpdateAppReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolIds() {
		if err = oprot.WriteFieldBegin("tool_ids", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ToolIds)); err != nil {
			return err
		}
		for _, v := range p.ToolIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *UpdateAppReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogo() {
		if err = oprot.WriteFieldBegin("logo", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Logo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *UpdateAppReq) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabelIds() {
		if err = oprot.WriteFieldBegin("label_ids", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.LabelIds)); err != nil {
			return err
		}
		for _, v := range p.LabelIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *UpdateAppReq) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabelTexts() {
		if err = oprot.WriteFieldBegin("label_texts", thrift.LIST, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.LabelTexts)); err != nil {
			return err
		}
		for _, v := range p.LabelTexts {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *UpdateAppReq) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelConfig() {
		if err = oprot.WriteFieldBegin("model_config", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ModelConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *UpdateAppReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateAppReq(%+v)", *p)

}

func (p *UpdateAppReq) DeepEqual(ano *UpdateAppReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.DescriptionMd) {
		return false
	}
	if !p.Field5DeepEqual(ano.ModelId) {
		return false
	}
	if !p.Field6DeepEqual(ano.EnableImage) {
		return false
	}
	if !p.Field7DeepEqual(ano.EnableFile) {
		return false
	}
	if !p.Field8DeepEqual(ano.Version) {
		return false
	}
	if !p.Field9DeepEqual(ano.IsPrivate) {
		return false
	}
	if !p.Field10DeepEqual(ano.HomePage) {
		return false
	}
	if !p.Field11DeepEqual(ano.PresetQuestions) {
		return false
	}
	if !p.Field12DeepEqual(ano.ToolIds) {
		return false
	}
	if !p.Field13DeepEqual(ano.Logo) {
		return false
	}
	if !p.Field14DeepEqual(ano.LabelIds) {
		return false
	}
	if !p.Field15DeepEqual(ano.LabelTexts) {
		return false
	}
	if !p.Field16DeepEqual(ano.ModelConfig) {
		return false
	}
	return true
}

func (p *UpdateAppReq) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field4DeepEqual(src *string) bool {

	if p.DescriptionMd == src {
		return true
	} else if p.DescriptionMd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DescriptionMd, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field5DeepEqual(src *int64) bool {

	if p.ModelId == src {
		return true
	} else if p.ModelId == nil || src == nil {
		return false
	}
	if *p.ModelId != *src {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field6DeepEqual(src *bool) bool {

	if p.EnableImage == src {
		return true
	} else if p.EnableImage == nil || src == nil {
		return false
	}
	if *p.EnableImage != *src {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field7DeepEqual(src *bool) bool {

	if p.EnableFile == src {
		return true
	} else if p.EnableFile == nil || src == nil {
		return false
	}
	if *p.EnableFile != *src {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field8DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field9DeepEqual(src *bool) bool {

	if p.IsPrivate == src {
		return true
	} else if p.IsPrivate == nil || src == nil {
		return false
	}
	if *p.IsPrivate != *src {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field10DeepEqual(src *string) bool {

	if p.HomePage == src {
		return true
	} else if p.HomePage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HomePage, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field11DeepEqual(src []string) bool {

	if len(p.PresetQuestions) != len(src) {
		return false
	}
	for i, v := range p.PresetQuestions {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *UpdateAppReq) Field12DeepEqual(src []int64) bool {

	if len(p.ToolIds) != len(src) {
		return false
	}
	for i, v := range p.ToolIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *UpdateAppReq) Field13DeepEqual(src *string) bool {

	if p.Logo == src {
		return true
	} else if p.Logo == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Logo, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateAppReq) Field14DeepEqual(src []int64) bool {

	if len(p.LabelIds) != len(src) {
		return false
	}
	for i, v := range p.LabelIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *UpdateAppReq) Field15DeepEqual(src []string) bool {

	if len(p.LabelTexts) != len(src) {
		return false
	}
	for i, v := range p.LabelTexts {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *UpdateAppReq) Field16DeepEqual(src *ModelConfig) bool {

	if !p.ModelConfig.DeepEqual(src) {
		return false
	}
	return true
}

type ListAppReq struct {
	Pagination  *base.PaginationReq `thrift:"pagination,1,required" frugal:"1,required,base.PaginationReq" json:"pagination"`
	AuthorId    *int64              `thrift:"author_id,2,optional" frugal:"2,optional,i64" json:"author_id,omitempty"`
	Name        *string             `thrift:"name,3,optional" frugal:"3,optional,string" json:"name,omitempty"`
	Description *string             `thrift:"description,4,optional" frugal:"4,optional,string" json:"description,omitempty"`
	Labels      []string            `thrift:"labels,5,optional" frugal:"5,optional,list<string>" json:"labels,omitempty"`
}

func NewListAppReq() *ListAppReq {
	return &ListAppReq{}
}

func (p *ListAppReq) InitDefault() {
}

var ListAppReq_Pagination_DEFAULT *base.PaginationReq

func (p *ListAppReq) GetPagination() (v *base.PaginationReq) {
	if !p.IsSetPagination() {
		return ListAppReq_Pagination_DEFAULT
	}
	return p.Pagination
}

var ListAppReq_AuthorId_DEFAULT int64

func (p *ListAppReq) GetAuthorId() (v int64) {
	if !p.IsSetAuthorId() {
		return ListAppReq_AuthorId_DEFAULT
	}
	return *p.AuthorId
}

var ListAppReq_Name_DEFAULT string

func (p *ListAppReq) GetName() (v string) {
	if !p.IsSetName() {
		return ListAppReq_Name_DEFAULT
	}
	return *p.Name
}

var ListAppReq_Description_DEFAULT string

func (p *ListAppReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return ListAppReq_Description_DEFAULT
	}
	return *p.Description
}

var ListAppReq_Labels_DEFAULT []string

func (p *ListAppReq) GetLabels() (v []string) {
	if !p.IsSetLabels() {
		return ListAppReq_Labels_DEFAULT
	}
	return p.Labels
}
func (p *ListAppReq) SetPagination(val *base.PaginationReq) {
	p.Pagination = val
}
func (p *ListAppReq) SetAuthorId(val *int64) {
	p.AuthorId = val
}
func (p *ListAppReq) SetName(val *string) {
	p.Name = val
}
func (p *ListAppReq) SetDescription(val *string) {
	p.Description = val
}
func (p *ListAppReq) SetLabels(val []string) {
	p.Labels = val
}

var fieldIDToName_ListAppReq = map[int16]string{
	1: "pagination",
	2: "author_id",
	3: "name",
	4: "description",
	5: "labels",
}

func (p *ListAppReq) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *ListAppReq) IsSetAuthorId() bool {
	return p.AuthorId != nil
}

func (p *ListAppReq) IsSetName() bool {
	return p.Name != nil
}

func (p *ListAppReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *ListAppReq) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *ListAppReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListAppReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListAppReq[fieldId]))
}

func (p *ListAppReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewPaginationReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *ListAppReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthorId = _field
	return nil
}
func (p *ListAppReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ListAppReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *ListAppReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Labels = _field
	return nil
}

func (p *ListAppReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAppReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListAppReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListAppReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorId() {
		if err = oprot.WriteFieldBegin("author_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthorId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListAppReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListAppReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListAppReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("labels", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListAppReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAppReq(%+v)", *p)

}

func (p *ListAppReq) DeepEqual(ano *ListAppReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field2DeepEqual(ano.AuthorId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.Labels) {
		return false
	}
	return true
}

func (p *ListAppReq) Field1DeepEqual(src *base.PaginationReq) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListAppReq) Field2DeepEqual(src *int64) bool {

	if p.AuthorId == src {
		return true
	} else if p.AuthorId == nil || src == nil {
		return false
	}
	if *p.AuthorId != *src {
		return false
	}
	return true
}
func (p *ListAppReq) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ListAppReq) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *ListAppReq) Field5DeepEqual(src []string) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ListAppResp struct {
	Pagination *base.PaginationResp `thrift:"pagination,1,required" frugal:"1,required,base.PaginationResp" json:"pagination"`
	Apps       []*App               `thrift:"apps,2,required" frugal:"2,required,list<App>" json:"apps"`
}

func NewListAppResp() *ListAppResp {
	return &ListAppResp{}
}

func (p *ListAppResp) InitDefault() {
}

var ListAppResp_Pagination_DEFAULT *base.PaginationResp

func (p *ListAppResp) GetPagination() (v *base.PaginationResp) {
	if !p.IsSetPagination() {
		return ListAppResp_Pagination_DEFAULT
	}
	return p.Pagination
}

func (p *ListAppResp) GetApps() (v []*App) {
	return p.Apps
}
func (p *ListAppResp) SetPagination(val *base.PaginationResp) {
	p.Pagination = val
}
func (p *ListAppResp) SetApps(val []*App) {
	p.Apps = val
}

var fieldIDToName_ListAppResp = map[int16]string{
	1: "pagination",
	2: "apps",
}

func (p *ListAppResp) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *ListAppResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false
	var issetApps bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetApps = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetApps {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListAppResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListAppResp[fieldId]))
}

func (p *ListAppResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewPaginationResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *ListAppResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*App, 0, size)
	values := make([]App, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Apps = _field
	return nil
}

func (p *ListAppResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAppResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListAppResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListAppResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("apps", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Apps)); err != nil {
		return err
	}
	for _, v := range p.Apps {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListAppResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAppResp(%+v)", *p)

}

func (p *ListAppResp) DeepEqual(ano *ListAppResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field2DeepEqual(ano.Apps) {
		return false
	}
	return true
}

func (p *ListAppResp) Field1DeepEqual(src *base.PaginationResp) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListAppResp) Field2DeepEqual(src []*App) bool {

	if len(p.Apps) != len(src) {
		return false
	}
	for i, v := range p.Apps {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type PublishAppReq struct {
	Id      int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Version string `thrift:"version,2,required" frugal:"2,required,string" json:"version"`
}

func NewPublishAppReq() *PublishAppReq {
	return &PublishAppReq{}
}

func (p *PublishAppReq) InitDefault() {
}

func (p *PublishAppReq) GetId() (v int64) {
	return p.Id
}

func (p *PublishAppReq) GetVersion() (v string) {
	return p.Version
}
func (p *PublishAppReq) SetId(val int64) {
	p.Id = val
}
func (p *PublishAppReq) SetVersion(val string) {
	p.Version = val
}

var fieldIDToName_PublishAppReq = map[int16]string{
	1: "id",
	2: "version",
}

func (p *PublishAppReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PublishAppReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PublishAppReq[fieldId]))
}

func (p *PublishAppReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *PublishAppReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}

func (p *PublishAppReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishAppReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PublishAppReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PublishAppReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PublishAppReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishAppReq(%+v)", *p)

}

func (p *PublishAppReq) DeepEqual(ano *PublishAppReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	return true
}

func (p *PublishAppReq) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *PublishAppReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}

type AppLabel struct {
	Id        int64      `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Text      string     `thrift:"text,2,required" frugal:"2,required,string" json:"text"`
	CreatedAt *base.Time `thrift:"created_at,3,required" frugal:"3,required,base.Time" json:"created_at"`
}

func NewAppLabel() *AppLabel {
	return &AppLabel{}
}

func (p *AppLabel) InitDefault() {
}

func (p *AppLabel) GetId() (v int64) {
	return p.Id
}

func (p *AppLabel) GetText() (v string) {
	return p.Text
}

var AppLabel_CreatedAt_DEFAULT *base.Time

func (p *AppLabel) GetCreatedAt() (v *base.Time) {
	if !p.IsSetCreatedAt() {
		return AppLabel_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}
func (p *AppLabel) SetId(val int64) {
	p.Id = val
}
func (p *AppLabel) SetText(val string) {
	p.Text = val
}
func (p *AppLabel) SetCreatedAt(val *base.Time) {
	p.CreatedAt = val
}

var fieldIDToName_AppLabel = map[int16]string{
	1: "id",
	2: "text",
	3: "created_at",
}

func (p *AppLabel) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *AppLabel) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetText bool = false
	var issetCreatedAt bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetText = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreatedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetText {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCreatedAt {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppLabel[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AppLabel[fieldId]))
}

func (p *AppLabel) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *AppLabel) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Text = _field
	return nil
}
func (p *AppLabel) ReadField3(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreatedAt = _field
	return nil
}

func (p *AppLabel) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppLabel"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppLabel) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppLabel) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Text); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppLabel) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CreatedAt.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppLabel) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppLabel(%+v)", *p)

}

func (p *AppLabel) DeepEqual(ano *AppLabel) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreatedAt) {
		return false
	}
	return true
}

func (p *AppLabel) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *AppLabel) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Text, src) != 0 {
		return false
	}
	return true
}
func (p *AppLabel) Field3DeepEqual(src *base.Time) bool {

	if !p.CreatedAt.DeepEqual(src) {
		return false
	}
	return true
}

type ListAppLabelReq struct {
	Pagination *base.PaginationReq `thrift:"pagination,1,required" frugal:"1,required,base.PaginationReq" json:"pagination"`
	Text       *string             `thrift:"text,2,optional" frugal:"2,optional,string" query:"text"`
}

func NewListAppLabelReq() *ListAppLabelReq {
	return &ListAppLabelReq{}
}

func (p *ListAppLabelReq) InitDefault() {
}

var ListAppLabelReq_Pagination_DEFAULT *base.PaginationReq

func (p *ListAppLabelReq) GetPagination() (v *base.PaginationReq) {
	if !p.IsSetPagination() {
		return ListAppLabelReq_Pagination_DEFAULT
	}
	return p.Pagination
}

var ListAppLabelReq_Text_DEFAULT string

func (p *ListAppLabelReq) GetText() (v string) {
	if !p.IsSetText() {
		return ListAppLabelReq_Text_DEFAULT
	}
	return *p.Text
}
func (p *ListAppLabelReq) SetPagination(val *base.PaginationReq) {
	p.Pagination = val
}
func (p *ListAppLabelReq) SetText(val *string) {
	p.Text = val
}

var fieldIDToName_ListAppLabelReq = map[int16]string{
	1: "pagination",
	2: "text",
}

func (p *ListAppLabelReq) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *ListAppLabelReq) IsSetText() bool {
	return p.Text != nil
}

func (p *ListAppLabelReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListAppLabelReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListAppLabelReq[fieldId]))
}

func (p *ListAppLabelReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewPaginationReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *ListAppLabelReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Text = _field
	return nil
}

func (p *ListAppLabelReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAppLabelReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListAppLabelReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListAppLabelReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Text); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListAppLabelReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAppLabelReq(%+v)", *p)

}

func (p *ListAppLabelReq) DeepEqual(ano *ListAppLabelReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	return true
}

func (p *ListAppLabelReq) Field1DeepEqual(src *base.PaginationReq) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListAppLabelReq) Field2DeepEqual(src *string) bool {

	if p.Text == src {
		return true
	} else if p.Text == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Text, *src) != 0 {
		return false
	}
	return true
}

type ListAppLabelResp struct {
	Pagination *base.PaginationResp `thrift:"pagination,1,required" frugal:"1,required,base.PaginationResp" json:"pagination"`
	Labels     []*AppLabel          `thrift:"labels,2,required" frugal:"2,required,list<AppLabel>" json:"labels"`
}

func NewListAppLabelResp() *ListAppLabelResp {
	return &ListAppLabelResp{}
}

func (p *ListAppLabelResp) InitDefault() {
}

var ListAppLabelResp_Pagination_DEFAULT *base.PaginationResp

func (p *ListAppLabelResp) GetPagination() (v *base.PaginationResp) {
	if !p.IsSetPagination() {
		return ListAppLabelResp_Pagination_DEFAULT
	}
	return p.Pagination
}

func (p *ListAppLabelResp) GetLabels() (v []*AppLabel) {
	return p.Labels
}
func (p *ListAppLabelResp) SetPagination(val *base.PaginationResp) {
	p.Pagination = val
}
func (p *ListAppLabelResp) SetLabels(val []*AppLabel) {
	p.Labels = val
}

var fieldIDToName_ListAppLabelResp = map[int16]string{
	1: "pagination",
	2: "labels",
}

func (p *ListAppLabelResp) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *ListAppLabelResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false
	var issetLabels bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListAppLabelResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListAppLabelResp[fieldId]))
}

func (p *ListAppLabelResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewPaginationResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *ListAppLabelResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*AppLabel, 0, size)
	values := make([]AppLabel, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Labels = _field
	return nil
}

func (p *ListAppLabelResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAppLabelResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListAppLabelResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListAppLabelResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("labels", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListAppLabelResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAppLabelResp(%+v)", *p)

}

func (p *ListAppLabelResp) DeepEqual(ano *ListAppLabelResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field2DeepEqual(ano.Labels) {
		return false
	}
	return true
}

func (p *ListAppLabelResp) Field1DeepEqual(src *base.PaginationResp) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListAppLabelResp) Field2DeepEqual(src []*AppLabel) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetAppByIDReq struct {
	Id     int64 `thrift:"id,1,required" frugal:"1,required,i64" path:"id"`
	Unfold *bool `thrift:"unfold,2,optional" frugal:"2,optional,bool" json:"unfold,omitempty"`
}

func NewGetAppByIDReq() *GetAppByIDReq {
	return &GetAppByIDReq{}
}

func (p *GetAppByIDReq) InitDefault() {
}

func (p *GetAppByIDReq) GetId() (v int64) {
	return p.Id
}

var GetAppByIDReq_Unfold_DEFAULT bool

func (p *GetAppByIDReq) GetUnfold() (v bool) {
	if !p.IsSetUnfold() {
		return GetAppByIDReq_Unfold_DEFAULT
	}
	return *p.Unfold
}
func (p *GetAppByIDReq) SetId(val int64) {
	p.Id = val
}
func (p *GetAppByIDReq) SetUnfold(val *bool) {
	p.Unfold = val
}

var fieldIDToName_GetAppByIDReq = map[int16]string{
	1: "id",
	2: "unfold",
}

func (p *GetAppByIDReq) IsSetUnfold() bool {
	return p.Unfold != nil
}

func (p *GetAppByIDReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAppByIDReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetAppByIDReq[fieldId]))
}

func (p *GetAppByIDReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *GetAppByIDReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Unfold = _field
	return nil
}

func (p *GetAppByIDReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAppByIDReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAppByIDReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAppByIDReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnfold() {
		if err = oprot.WriteFieldBegin("unfold", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Unfold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetAppByIDReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAppByIDReq(%+v)", *p)

}

func (p *GetAppByIDReq) DeepEqual(ano *GetAppByIDReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Unfold) {
		return false
	}
	return true
}

func (p *GetAppByIDReq) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *GetAppByIDReq) Field2DeepEqual(src *bool) bool {

	if p.Unfold == src {
		return true
	} else if p.Unfold == nil || src == nil {
		return false
	}
	if *p.Unfold != *src {
		return false
	}
	return true
}

type GetAppByIDResp struct {
	App *App                  `thrift:"app,1,required" frugal:"1,required,App" json:"app"`
	Ext *GetAppByIDRespExtend `thrift:"ext,2,optional" frugal:"2,optional,GetAppByIDRespExtend" json:"ext,omitempty"`
}

func NewGetAppByIDResp() *GetAppByIDResp {
	return &GetAppByIDResp{}
}

func (p *GetAppByIDResp) InitDefault() {
}

var GetAppByIDResp_App_DEFAULT *App

func (p *GetAppByIDResp) GetApp() (v *App) {
	if !p.IsSetApp() {
		return GetAppByIDResp_App_DEFAULT
	}
	return p.App
}

var GetAppByIDResp_Ext_DEFAULT *GetAppByIDRespExtend

func (p *GetAppByIDResp) GetExt() (v *GetAppByIDRespExtend) {
	if !p.IsSetExt() {
		return GetAppByIDResp_Ext_DEFAULT
	}
	return p.Ext
}
func (p *GetAppByIDResp) SetApp(val *App) {
	p.App = val
}
func (p *GetAppByIDResp) SetExt(val *GetAppByIDRespExtend) {
	p.Ext = val
}

var fieldIDToName_GetAppByIDResp = map[int16]string{
	1: "app",
	2: "ext",
}

func (p *GetAppByIDResp) IsSetApp() bool {
	return p.App != nil
}

func (p *GetAppByIDResp) IsSetExt() bool {
	return p.Ext != nil
}

func (p *GetAppByIDResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetApp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetApp = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetApp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAppByIDResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetAppByIDResp[fieldId]))
}

func (p *GetAppByIDResp) ReadField1(iprot thrift.TProtocol) error {
	_field := NewApp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.App = _field
	return nil
}
func (p *GetAppByIDResp) ReadField2(iprot thrift.TProtocol) error {
	_field := NewGetAppByIDRespExtend()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Ext = _field
	return nil
}

func (p *GetAppByIDResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAppByIDResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAppByIDResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("app", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.App.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAppByIDResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExt() {
		if err = oprot.WriteFieldBegin("ext", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Ext.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetAppByIDResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAppByIDResp(%+v)", *p)

}

func (p *GetAppByIDResp) DeepEqual(ano *GetAppByIDResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.App) {
		return false
	}
	if !p.Field2DeepEqual(ano.Ext) {
		return false
	}
	return true
}

func (p *GetAppByIDResp) Field1DeepEqual(src *App) bool {

	if !p.App.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetAppByIDResp) Field2DeepEqual(src *GetAppByIDRespExtend) bool {

	if !p.Ext.DeepEqual(src) {
		return false
	}
	return true
}

type GetAppByIDRespExtend struct {
	PrivateToolsCount int32 `thrift:"private_tools_count,1,required" frugal:"1,required,i32" json:"private_tools_count"`
}

func NewGetAppByIDRespExtend() *GetAppByIDRespExtend {
	return &GetAppByIDRespExtend{}
}

func (p *GetAppByIDRespExtend) InitDefault() {
}

func (p *GetAppByIDRespExtend) GetPrivateToolsCount() (v int32) {
	return p.PrivateToolsCount
}
func (p *GetAppByIDRespExtend) SetPrivateToolsCount(val int32) {
	p.PrivateToolsCount = val
}

var fieldIDToName_GetAppByIDRespExtend = map[int16]string{
	1: "private_tools_count",
}

func (p *GetAppByIDRespExtend) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPrivateToolsCount bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrivateToolsCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPrivateToolsCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAppByIDRespExtend[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetAppByIDRespExtend[fieldId]))
}

func (p *GetAppByIDRespExtend) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PrivateToolsCount = _field
	return nil
}

func (p *GetAppByIDRespExtend) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAppByIDRespExtend"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAppByIDRespExtend) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("private_tools_count", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PrivateToolsCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAppByIDRespExtend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAppByIDRespExtend(%+v)", *p)

}

func (p *GetAppByIDRespExtend) DeepEqual(ano *GetAppByIDRespExtend) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PrivateToolsCount) {
		return false
	}
	return true
}

func (p *GetAppByIDRespExtend) Field1DeepEqual(src int32) bool {

	if p.PrivateToolsCount != src {
		return false
	}
	return true
}

type AppService interface {
	CreateApp(ctx context.Context, req *CreateAppReq) (r *base.Empty, err error)

	UpdateApp(ctx context.Context, req *UpdateAppReq) (r *base.Empty, err error)

	DeleteApp(ctx context.Context, req *base.IDReq) (r *base.Empty, err error)

	GetAppByID(ctx context.Context, req *GetAppByIDReq) (r *GetAppByIDResp, err error)

	ListApp(ctx context.Context, req *ListAppReq) (r *ListAppResp, err error)

	PublishApp(ctx context.Context, req *PublishAppReq) (r *base.Empty, err error)

	ListAppLabel(ctx context.Context, req *ListAppLabelReq) (r *ListAppLabelResp, err error)
}

type AppServiceCreateAppArgs struct {
	Req *CreateAppReq `thrift:"req,1" frugal:"1,default,CreateAppReq" json:"req"`
}

func NewAppServiceCreateAppArgs() *AppServiceCreateAppArgs {
	return &AppServiceCreateAppArgs{}
}

func (p *AppServiceCreateAppArgs) InitDefault() {
}

var AppServiceCreateAppArgs_Req_DEFAULT *CreateAppReq

func (p *AppServiceCreateAppArgs) GetReq() (v *CreateAppReq) {
	if !p.IsSetReq() {
		return AppServiceCreateAppArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppServiceCreateAppArgs) SetReq(val *CreateAppReq) {
	p.Req = val
}

var fieldIDToName_AppServiceCreateAppArgs = map[int16]string{
	1: "req",
}

func (p *AppServiceCreateAppArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppServiceCreateAppArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceCreateAppArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceCreateAppArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateAppReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AppServiceCreateAppArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateApp_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceCreateAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppServiceCreateAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceCreateAppArgs(%+v)", *p)

}

func (p *AppServiceCreateAppArgs) DeepEqual(ano *AppServiceCreateAppArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppServiceCreateAppArgs) Field1DeepEqual(src *CreateAppReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceCreateAppResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewAppServiceCreateAppResult() *AppServiceCreateAppResult {
	return &AppServiceCreateAppResult{}
}

func (p *AppServiceCreateAppResult) InitDefault() {
}

var AppServiceCreateAppResult_Success_DEFAULT *base.Empty

func (p *AppServiceCreateAppResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return AppServiceCreateAppResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AppServiceCreateAppResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_AppServiceCreateAppResult = map[int16]string{
	0: "success",
}

func (p *AppServiceCreateAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppServiceCreateAppResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceCreateAppResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceCreateAppResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AppServiceCreateAppResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateApp_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceCreateAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppServiceCreateAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceCreateAppResult(%+v)", *p)

}

func (p *AppServiceCreateAppResult) DeepEqual(ano *AppServiceCreateAppResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AppServiceCreateAppResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceUpdateAppArgs struct {
	Req *UpdateAppReq `thrift:"req,1" frugal:"1,default,UpdateAppReq" json:"req"`
}

func NewAppServiceUpdateAppArgs() *AppServiceUpdateAppArgs {
	return &AppServiceUpdateAppArgs{}
}

func (p *AppServiceUpdateAppArgs) InitDefault() {
}

var AppServiceUpdateAppArgs_Req_DEFAULT *UpdateAppReq

func (p *AppServiceUpdateAppArgs) GetReq() (v *UpdateAppReq) {
	if !p.IsSetReq() {
		return AppServiceUpdateAppArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppServiceUpdateAppArgs) SetReq(val *UpdateAppReq) {
	p.Req = val
}

var fieldIDToName_AppServiceUpdateAppArgs = map[int16]string{
	1: "req",
}

func (p *AppServiceUpdateAppArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppServiceUpdateAppArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceUpdateAppArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceUpdateAppArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateAppReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AppServiceUpdateAppArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateApp_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceUpdateAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppServiceUpdateAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceUpdateAppArgs(%+v)", *p)

}

func (p *AppServiceUpdateAppArgs) DeepEqual(ano *AppServiceUpdateAppArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppServiceUpdateAppArgs) Field1DeepEqual(src *UpdateAppReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceUpdateAppResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewAppServiceUpdateAppResult() *AppServiceUpdateAppResult {
	return &AppServiceUpdateAppResult{}
}

func (p *AppServiceUpdateAppResult) InitDefault() {
}

var AppServiceUpdateAppResult_Success_DEFAULT *base.Empty

func (p *AppServiceUpdateAppResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return AppServiceUpdateAppResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AppServiceUpdateAppResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_AppServiceUpdateAppResult = map[int16]string{
	0: "success",
}

func (p *AppServiceUpdateAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppServiceUpdateAppResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceUpdateAppResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceUpdateAppResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AppServiceUpdateAppResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateApp_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceUpdateAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppServiceUpdateAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceUpdateAppResult(%+v)", *p)

}

func (p *AppServiceUpdateAppResult) DeepEqual(ano *AppServiceUpdateAppResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AppServiceUpdateAppResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceDeleteAppArgs struct {
	Req *base.IDReq `thrift:"req,1" frugal:"1,default,base.IDReq" json:"req"`
}

func NewAppServiceDeleteAppArgs() *AppServiceDeleteAppArgs {
	return &AppServiceDeleteAppArgs{}
}

func (p *AppServiceDeleteAppArgs) InitDefault() {
}

var AppServiceDeleteAppArgs_Req_DEFAULT *base.IDReq

func (p *AppServiceDeleteAppArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return AppServiceDeleteAppArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppServiceDeleteAppArgs) SetReq(val *base.IDReq) {
	p.Req = val
}

var fieldIDToName_AppServiceDeleteAppArgs = map[int16]string{
	1: "req",
}

func (p *AppServiceDeleteAppArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppServiceDeleteAppArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceDeleteAppArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceDeleteAppArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AppServiceDeleteAppArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteApp_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceDeleteAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppServiceDeleteAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceDeleteAppArgs(%+v)", *p)

}

func (p *AppServiceDeleteAppArgs) DeepEqual(ano *AppServiceDeleteAppArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppServiceDeleteAppArgs) Field1DeepEqual(src *base.IDReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceDeleteAppResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewAppServiceDeleteAppResult() *AppServiceDeleteAppResult {
	return &AppServiceDeleteAppResult{}
}

func (p *AppServiceDeleteAppResult) InitDefault() {
}

var AppServiceDeleteAppResult_Success_DEFAULT *base.Empty

func (p *AppServiceDeleteAppResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return AppServiceDeleteAppResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AppServiceDeleteAppResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_AppServiceDeleteAppResult = map[int16]string{
	0: "success",
}

func (p *AppServiceDeleteAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppServiceDeleteAppResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceDeleteAppResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceDeleteAppResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AppServiceDeleteAppResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteApp_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceDeleteAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppServiceDeleteAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceDeleteAppResult(%+v)", *p)

}

func (p *AppServiceDeleteAppResult) DeepEqual(ano *AppServiceDeleteAppResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AppServiceDeleteAppResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceGetAppByIDArgs struct {
	Req *GetAppByIDReq `thrift:"req,1" frugal:"1,default,GetAppByIDReq" json:"req"`
}

func NewAppServiceGetAppByIDArgs() *AppServiceGetAppByIDArgs {
	return &AppServiceGetAppByIDArgs{}
}

func (p *AppServiceGetAppByIDArgs) InitDefault() {
}

var AppServiceGetAppByIDArgs_Req_DEFAULT *GetAppByIDReq

func (p *AppServiceGetAppByIDArgs) GetReq() (v *GetAppByIDReq) {
	if !p.IsSetReq() {
		return AppServiceGetAppByIDArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppServiceGetAppByIDArgs) SetReq(val *GetAppByIDReq) {
	p.Req = val
}

var fieldIDToName_AppServiceGetAppByIDArgs = map[int16]string{
	1: "req",
}

func (p *AppServiceGetAppByIDArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppServiceGetAppByIDArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceGetAppByIDArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceGetAppByIDArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetAppByIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AppServiceGetAppByIDArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAppByID_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceGetAppByIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppServiceGetAppByIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceGetAppByIDArgs(%+v)", *p)

}

func (p *AppServiceGetAppByIDArgs) DeepEqual(ano *AppServiceGetAppByIDArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppServiceGetAppByIDArgs) Field1DeepEqual(src *GetAppByIDReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceGetAppByIDResult struct {
	Success *GetAppByIDResp `thrift:"success,0,optional" frugal:"0,optional,GetAppByIDResp" json:"success,omitempty"`
}

func NewAppServiceGetAppByIDResult() *AppServiceGetAppByIDResult {
	return &AppServiceGetAppByIDResult{}
}

func (p *AppServiceGetAppByIDResult) InitDefault() {
}

var AppServiceGetAppByIDResult_Success_DEFAULT *GetAppByIDResp

func (p *AppServiceGetAppByIDResult) GetSuccess() (v *GetAppByIDResp) {
	if !p.IsSetSuccess() {
		return AppServiceGetAppByIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AppServiceGetAppByIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetAppByIDResp)
}

var fieldIDToName_AppServiceGetAppByIDResult = map[int16]string{
	0: "success",
}

func (p *AppServiceGetAppByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppServiceGetAppByIDResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceGetAppByIDResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceGetAppByIDResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetAppByIDResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AppServiceGetAppByIDResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAppByID_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceGetAppByIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppServiceGetAppByIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceGetAppByIDResult(%+v)", *p)

}

func (p *AppServiceGetAppByIDResult) DeepEqual(ano *AppServiceGetAppByIDResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AppServiceGetAppByIDResult) Field0DeepEqual(src *GetAppByIDResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceListAppArgs struct {
	Req *ListAppReq `thrift:"req,1" frugal:"1,default,ListAppReq" json:"req"`
}

func NewAppServiceListAppArgs() *AppServiceListAppArgs {
	return &AppServiceListAppArgs{}
}

func (p *AppServiceListAppArgs) InitDefault() {
}

var AppServiceListAppArgs_Req_DEFAULT *ListAppReq

func (p *AppServiceListAppArgs) GetReq() (v *ListAppReq) {
	if !p.IsSetReq() {
		return AppServiceListAppArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppServiceListAppArgs) SetReq(val *ListAppReq) {
	p.Req = val
}

var fieldIDToName_AppServiceListAppArgs = map[int16]string{
	1: "req",
}

func (p *AppServiceListAppArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppServiceListAppArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceListAppArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceListAppArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListAppReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AppServiceListAppArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListApp_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceListAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppServiceListAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceListAppArgs(%+v)", *p)

}

func (p *AppServiceListAppArgs) DeepEqual(ano *AppServiceListAppArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppServiceListAppArgs) Field1DeepEqual(src *ListAppReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceListAppResult struct {
	Success *ListAppResp `thrift:"success,0,optional" frugal:"0,optional,ListAppResp" json:"success,omitempty"`
}

func NewAppServiceListAppResult() *AppServiceListAppResult {
	return &AppServiceListAppResult{}
}

func (p *AppServiceListAppResult) InitDefault() {
}

var AppServiceListAppResult_Success_DEFAULT *ListAppResp

func (p *AppServiceListAppResult) GetSuccess() (v *ListAppResp) {
	if !p.IsSetSuccess() {
		return AppServiceListAppResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AppServiceListAppResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListAppResp)
}

var fieldIDToName_AppServiceListAppResult = map[int16]string{
	0: "success",
}

func (p *AppServiceListAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppServiceListAppResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceListAppResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceListAppResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListAppResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AppServiceListAppResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListApp_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceListAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppServiceListAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceListAppResult(%+v)", *p)

}

func (p *AppServiceListAppResult) DeepEqual(ano *AppServiceListAppResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AppServiceListAppResult) Field0DeepEqual(src *ListAppResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AppServicePublishAppArgs struct {
	Req *PublishAppReq `thrift:"req,1" frugal:"1,default,PublishAppReq" json:"req"`
}

func NewAppServicePublishAppArgs() *AppServicePublishAppArgs {
	return &AppServicePublishAppArgs{}
}

func (p *AppServicePublishAppArgs) InitDefault() {
}

var AppServicePublishAppArgs_Req_DEFAULT *PublishAppReq

func (p *AppServicePublishAppArgs) GetReq() (v *PublishAppReq) {
	if !p.IsSetReq() {
		return AppServicePublishAppArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppServicePublishAppArgs) SetReq(val *PublishAppReq) {
	p.Req = val
}

var fieldIDToName_AppServicePublishAppArgs = map[int16]string{
	1: "req",
}

func (p *AppServicePublishAppArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppServicePublishAppArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServicePublishAppArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServicePublishAppArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPublishAppReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AppServicePublishAppArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishApp_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServicePublishAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppServicePublishAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServicePublishAppArgs(%+v)", *p)

}

func (p *AppServicePublishAppArgs) DeepEqual(ano *AppServicePublishAppArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppServicePublishAppArgs) Field1DeepEqual(src *PublishAppReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppServicePublishAppResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewAppServicePublishAppResult() *AppServicePublishAppResult {
	return &AppServicePublishAppResult{}
}

func (p *AppServicePublishAppResult) InitDefault() {
}

var AppServicePublishAppResult_Success_DEFAULT *base.Empty

func (p *AppServicePublishAppResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return AppServicePublishAppResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AppServicePublishAppResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_AppServicePublishAppResult = map[int16]string{
	0: "success",
}

func (p *AppServicePublishAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppServicePublishAppResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServicePublishAppResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServicePublishAppResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AppServicePublishAppResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishApp_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServicePublishAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppServicePublishAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServicePublishAppResult(%+v)", *p)

}

func (p *AppServicePublishAppResult) DeepEqual(ano *AppServicePublishAppResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AppServicePublishAppResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceListAppLabelArgs struct {
	Req *ListAppLabelReq `thrift:"req,1" frugal:"1,default,ListAppLabelReq" json:"req"`
}

func NewAppServiceListAppLabelArgs() *AppServiceListAppLabelArgs {
	return &AppServiceListAppLabelArgs{}
}

func (p *AppServiceListAppLabelArgs) InitDefault() {
}

var AppServiceListAppLabelArgs_Req_DEFAULT *ListAppLabelReq

func (p *AppServiceListAppLabelArgs) GetReq() (v *ListAppLabelReq) {
	if !p.IsSetReq() {
		return AppServiceListAppLabelArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppServiceListAppLabelArgs) SetReq(val *ListAppLabelReq) {
	p.Req = val
}

var fieldIDToName_AppServiceListAppLabelArgs = map[int16]string{
	1: "req",
}

func (p *AppServiceListAppLabelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppServiceListAppLabelArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceListAppLabelArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceListAppLabelArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListAppLabelReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AppServiceListAppLabelArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAppLabel_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceListAppLabelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppServiceListAppLabelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceListAppLabelArgs(%+v)", *p)

}

func (p *AppServiceListAppLabelArgs) DeepEqual(ano *AppServiceListAppLabelArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppServiceListAppLabelArgs) Field1DeepEqual(src *ListAppLabelReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppServiceListAppLabelResult struct {
	Success *ListAppLabelResp `thrift:"success,0,optional" frugal:"0,optional,ListAppLabelResp" json:"success,omitempty"`
}

func NewAppServiceListAppLabelResult() *AppServiceListAppLabelResult {
	return &AppServiceListAppLabelResult{}
}

func (p *AppServiceListAppLabelResult) InitDefault() {
}

var AppServiceListAppLabelResult_Success_DEFAULT *ListAppLabelResp

func (p *AppServiceListAppLabelResult) GetSuccess() (v *ListAppLabelResp) {
	if !p.IsSetSuccess() {
		return AppServiceListAppLabelResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AppServiceListAppLabelResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListAppLabelResp)
}

var fieldIDToName_AppServiceListAppLabelResult = map[int16]string{
	0: "success",
}

func (p *AppServiceListAppLabelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppServiceListAppLabelResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppServiceListAppLabelResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppServiceListAppLabelResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListAppLabelResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AppServiceListAppLabelResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAppLabel_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppServiceListAppLabelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppServiceListAppLabelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppServiceListAppLabelResult(%+v)", *p)

}

func (p *AppServiceListAppLabelResult) DeepEqual(ano *AppServiceListAppLabelResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AppServiceListAppLabelResult) Field0DeepEqual(src *ListAppLabelResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

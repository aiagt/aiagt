// Code generated by Kitex v0.10.0. DO NOT EDIT.

package appservice

import (
	"context"
	appsvc "github.com/aiagt/aiagt/kitex_gen/appsvc"
	base "github.com/aiagt/aiagt/kitex_gen/base"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateApp(ctx context.Context, req *appsvc.CreateAppReq, callOptions ...callopt.Option) (r *base.Empty, err error)
	UpdateApp(ctx context.Context, req *appsvc.UpdateAppReq, callOptions ...callopt.Option) (r *base.Empty, err error)
	DeleteApp(ctx context.Context, req *base.IDReq, callOptions ...callopt.Option) (r *base.Empty, err error)
	GetAppByID(ctx context.Context, req *appsvc.GetAppByIDReq, callOptions ...callopt.Option) (r *appsvc.GetAppByIDResp, err error)
	ListApp(ctx context.Context, req *appsvc.ListAppReq, callOptions ...callopt.Option) (r *appsvc.ListAppResp, err error)
	PublishApp(ctx context.Context, req *appsvc.PublishAppReq, callOptions ...callopt.Option) (r *base.Empty, err error)
	ListAppLabel(ctx context.Context, req *appsvc.ListAppLabelReq, callOptions ...callopt.Option) (r *appsvc.ListAppLabelResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kAppServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAppServiceClient struct {
	*kClient
}

func (p *kAppServiceClient) CreateApp(ctx context.Context, req *appsvc.CreateAppReq, callOptions ...callopt.Option) (r *base.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateApp(ctx, req)
}

func (p *kAppServiceClient) UpdateApp(ctx context.Context, req *appsvc.UpdateAppReq, callOptions ...callopt.Option) (r *base.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateApp(ctx, req)
}

func (p *kAppServiceClient) DeleteApp(ctx context.Context, req *base.IDReq, callOptions ...callopt.Option) (r *base.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteApp(ctx, req)
}

func (p *kAppServiceClient) GetAppByID(ctx context.Context, req *appsvc.GetAppByIDReq, callOptions ...callopt.Option) (r *appsvc.GetAppByIDResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAppByID(ctx, req)
}

func (p *kAppServiceClient) ListApp(ctx context.Context, req *appsvc.ListAppReq, callOptions ...callopt.Option) (r *appsvc.ListAppResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListApp(ctx, req)
}

func (p *kAppServiceClient) PublishApp(ctx context.Context, req *appsvc.PublishAppReq, callOptions ...callopt.Option) (r *base.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishApp(ctx, req)
}

func (p *kAppServiceClient) ListAppLabel(ctx context.Context, req *appsvc.ListAppLabelReq, callOptions ...callopt.Option) (r *appsvc.ListAppLabelResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListAppLabel(ctx, req)
}

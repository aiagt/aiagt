// Code generated by Kitex v0.10.0. DO NOT EDIT.

package appservice

import (
	"context"
	"errors"
	appsvc "github.com/aiagt/aiagt/kitex_gen/appsvc"
	base "github.com/aiagt/aiagt/kitex_gen/base"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateApp": kitex.NewMethodInfo(
		createAppHandler,
		newAppServiceCreateAppArgs,
		newAppServiceCreateAppResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateApp": kitex.NewMethodInfo(
		updateAppHandler,
		newAppServiceUpdateAppArgs,
		newAppServiceUpdateAppResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteApp": kitex.NewMethodInfo(
		deleteAppHandler,
		newAppServiceDeleteAppArgs,
		newAppServiceDeleteAppResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetAppByID": kitex.NewMethodInfo(
		getAppByIDHandler,
		newAppServiceGetAppByIDArgs,
		newAppServiceGetAppByIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListApp": kitex.NewMethodInfo(
		listAppHandler,
		newAppServiceListAppArgs,
		newAppServiceListAppResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PublishApp": kitex.NewMethodInfo(
		publishAppHandler,
		newAppServicePublishAppArgs,
		newAppServicePublishAppResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListAppLabel": kitex.NewMethodInfo(
		listAppLabelHandler,
		newAppServiceListAppLabelArgs,
		newAppServiceListAppLabelResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	appServiceServiceInfo                = NewServiceInfo()
	appServiceServiceInfoForClient       = NewServiceInfoForClient()
	appServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return appServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return appServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return appServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AppService"
	handlerType := (*appsvc.AppService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "appsvc",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.0",
		Extra:           extra,
	}
	return svcInfo
}

func createAppHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appsvc.AppServiceCreateAppArgs)
	realResult := result.(*appsvc.AppServiceCreateAppResult)
	success, err := handler.(appsvc.AppService).CreateApp(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAppServiceCreateAppArgs() interface{} {
	return appsvc.NewAppServiceCreateAppArgs()
}

func newAppServiceCreateAppResult() interface{} {
	return appsvc.NewAppServiceCreateAppResult()
}

func updateAppHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appsvc.AppServiceUpdateAppArgs)
	realResult := result.(*appsvc.AppServiceUpdateAppResult)
	success, err := handler.(appsvc.AppService).UpdateApp(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAppServiceUpdateAppArgs() interface{} {
	return appsvc.NewAppServiceUpdateAppArgs()
}

func newAppServiceUpdateAppResult() interface{} {
	return appsvc.NewAppServiceUpdateAppResult()
}

func deleteAppHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appsvc.AppServiceDeleteAppArgs)
	realResult := result.(*appsvc.AppServiceDeleteAppResult)
	success, err := handler.(appsvc.AppService).DeleteApp(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAppServiceDeleteAppArgs() interface{} {
	return appsvc.NewAppServiceDeleteAppArgs()
}

func newAppServiceDeleteAppResult() interface{} {
	return appsvc.NewAppServiceDeleteAppResult()
}

func getAppByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appsvc.AppServiceGetAppByIDArgs)
	realResult := result.(*appsvc.AppServiceGetAppByIDResult)
	success, err := handler.(appsvc.AppService).GetAppByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAppServiceGetAppByIDArgs() interface{} {
	return appsvc.NewAppServiceGetAppByIDArgs()
}

func newAppServiceGetAppByIDResult() interface{} {
	return appsvc.NewAppServiceGetAppByIDResult()
}

func listAppHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appsvc.AppServiceListAppArgs)
	realResult := result.(*appsvc.AppServiceListAppResult)
	success, err := handler.(appsvc.AppService).ListApp(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAppServiceListAppArgs() interface{} {
	return appsvc.NewAppServiceListAppArgs()
}

func newAppServiceListAppResult() interface{} {
	return appsvc.NewAppServiceListAppResult()
}

func publishAppHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appsvc.AppServicePublishAppArgs)
	realResult := result.(*appsvc.AppServicePublishAppResult)
	success, err := handler.(appsvc.AppService).PublishApp(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAppServicePublishAppArgs() interface{} {
	return appsvc.NewAppServicePublishAppArgs()
}

func newAppServicePublishAppResult() interface{} {
	return appsvc.NewAppServicePublishAppResult()
}

func listAppLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appsvc.AppServiceListAppLabelArgs)
	realResult := result.(*appsvc.AppServiceListAppLabelResult)
	success, err := handler.(appsvc.AppService).ListAppLabel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAppServiceListAppLabelArgs() interface{} {
	return appsvc.NewAppServiceListAppLabelArgs()
}

func newAppServiceListAppLabelResult() interface{} {
	return appsvc.NewAppServiceListAppLabelResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateApp(ctx context.Context, req *appsvc.CreateAppReq) (r *base.Empty, err error) {
	var _args appsvc.AppServiceCreateAppArgs
	_args.Req = req
	var _result appsvc.AppServiceCreateAppResult
	if err = p.c.Call(ctx, "CreateApp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateApp(ctx context.Context, req *appsvc.UpdateAppReq) (r *base.Empty, err error) {
	var _args appsvc.AppServiceUpdateAppArgs
	_args.Req = req
	var _result appsvc.AppServiceUpdateAppResult
	if err = p.c.Call(ctx, "UpdateApp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteApp(ctx context.Context, req *base.IDReq) (r *base.Empty, err error) {
	var _args appsvc.AppServiceDeleteAppArgs
	_args.Req = req
	var _result appsvc.AppServiceDeleteAppResult
	if err = p.c.Call(ctx, "DeleteApp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAppByID(ctx context.Context, req *base.IDReq) (r *appsvc.App, err error) {
	var _args appsvc.AppServiceGetAppByIDArgs
	_args.Req = req
	var _result appsvc.AppServiceGetAppByIDResult
	if err = p.c.Call(ctx, "GetAppByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListApp(ctx context.Context, req *appsvc.ListAppReq) (r *appsvc.ListAppResp, err error) {
	var _args appsvc.AppServiceListAppArgs
	_args.Req = req
	var _result appsvc.AppServiceListAppResult
	if err = p.c.Call(ctx, "ListApp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishApp(ctx context.Context, req *base.IDReq) (r *base.Empty, err error) {
	var _args appsvc.AppServicePublishAppArgs
	_args.Req = req
	var _result appsvc.AppServicePublishAppResult
	if err = p.c.Call(ctx, "PublishApp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAppLabel(ctx context.Context, req *appsvc.ListAppLabelReq) (r *appsvc.ListAppLabelResp, err error) {
	var _args appsvc.AppServiceListAppLabelArgs
	_args.Req = req
	var _result appsvc.AppServiceListAppLabelResult
	if err = p.c.Call(ctx, "ListAppLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

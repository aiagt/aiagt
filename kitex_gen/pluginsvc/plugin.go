// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package pluginsvc

import (
	"bytes"
	"context"
	"fmt"
	"github.com/aiagt/aiagt/kitex_gen/base"
	"github.com/aiagt/aiagt/kitex_gen/usersvc"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type Plugin struct {
	Id            int64           `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Key           int64           `thrift:"key,2,required" frugal:"2,required,i64" json:"key"`
	Name          string          `thrift:"name,3,required" frugal:"3,required,string" json:"name"`
	Description   string          `thrift:"description,4,required" frugal:"4,required,string" json:"description"`
	DescriptionMd string          `thrift:"description_md,5,required" frugal:"5,required,string" json:"description_md"`
	AuthorId      int64           `thrift:"author_id,6,required" frugal:"6,required,i64" json:"author_id"`
	Author        *usersvc.User   `thrift:"author,7,optional" frugal:"7,optional,usersvc.User" json:"author,omitempty"`
	IsPrivate     bool            `thrift:"is_private,8,required" frugal:"8,required,bool" json:"is_private"`
	HomePage      string          `thrift:"home_page,9,required" frugal:"9,required,string" json:"home_page"`
	EnableSecret  bool            `thrift:"enable_secret,10,required" frugal:"10,required,bool" json:"enable_secret"`
	Secrets       []*PluginSecret `thrift:"secrets,11,required" frugal:"11,required,list<PluginSecret>" json:"secrets"`
	LabelIds      []int64         `thrift:"label_ids,12,required" frugal:"12,required,list<i64>" json:"label_ids"`
	Labels        []*PluginLabel  `thrift:"labels,13,optional" frugal:"13,optional,list<PluginLabel>" json:"labels,omitempty"`
	ToolIds       []int64         `thrift:"tool_ids,14,required" frugal:"14,required,list<i64>" json:"tool_ids"`
	Tools         []*PluginTool   `thrift:"tools,15,optional" frugal:"15,optional,list<PluginTool>" json:"tools,omitempty"`
	Logo          string          `thrift:"logo,16,required" frugal:"16,required,string" json:"logo"`
	CreatedAt     *base.Time      `thrift:"created_at,17,required" frugal:"17,required,base.Time" json:"created_at"`
	UpdatedAt     *base.Time      `thrift:"updated_at,18,required" frugal:"18,required,base.Time" json:"updated_at"`
	PublishedAt   *base.Time      `thrift:"published_at,19,optional" frugal:"19,optional,base.Time" json:"published_at,omitempty"`
}

func NewPlugin() *Plugin {
	return &Plugin{}
}

func (p *Plugin) InitDefault() {
}

func (p *Plugin) GetId() (v int64) {
	return p.Id
}

func (p *Plugin) GetKey() (v int64) {
	return p.Key
}

func (p *Plugin) GetName() (v string) {
	return p.Name
}

func (p *Plugin) GetDescription() (v string) {
	return p.Description
}

func (p *Plugin) GetDescriptionMd() (v string) {
	return p.DescriptionMd
}

func (p *Plugin) GetAuthorId() (v int64) {
	return p.AuthorId
}

var Plugin_Author_DEFAULT *usersvc.User

func (p *Plugin) GetAuthor() (v *usersvc.User) {
	if !p.IsSetAuthor() {
		return Plugin_Author_DEFAULT
	}
	return p.Author
}

func (p *Plugin) GetIsPrivate() (v bool) {
	return p.IsPrivate
}

func (p *Plugin) GetHomePage() (v string) {
	return p.HomePage
}

func (p *Plugin) GetEnableSecret() (v bool) {
	return p.EnableSecret
}

func (p *Plugin) GetSecrets() (v []*PluginSecret) {
	return p.Secrets
}

func (p *Plugin) GetLabelIds() (v []int64) {
	return p.LabelIds
}

var Plugin_Labels_DEFAULT []*PluginLabel

func (p *Plugin) GetLabels() (v []*PluginLabel) {
	if !p.IsSetLabels() {
		return Plugin_Labels_DEFAULT
	}
	return p.Labels
}

func (p *Plugin) GetToolIds() (v []int64) {
	return p.ToolIds
}

var Plugin_Tools_DEFAULT []*PluginTool

func (p *Plugin) GetTools() (v []*PluginTool) {
	if !p.IsSetTools() {
		return Plugin_Tools_DEFAULT
	}
	return p.Tools
}

func (p *Plugin) GetLogo() (v string) {
	return p.Logo
}

var Plugin_CreatedAt_DEFAULT *base.Time

func (p *Plugin) GetCreatedAt() (v *base.Time) {
	if !p.IsSetCreatedAt() {
		return Plugin_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var Plugin_UpdatedAt_DEFAULT *base.Time

func (p *Plugin) GetUpdatedAt() (v *base.Time) {
	if !p.IsSetUpdatedAt() {
		return Plugin_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var Plugin_PublishedAt_DEFAULT *base.Time

func (p *Plugin) GetPublishedAt() (v *base.Time) {
	if !p.IsSetPublishedAt() {
		return Plugin_PublishedAt_DEFAULT
	}
	return p.PublishedAt
}
func (p *Plugin) SetId(val int64) {
	p.Id = val
}
func (p *Plugin) SetKey(val int64) {
	p.Key = val
}
func (p *Plugin) SetName(val string) {
	p.Name = val
}
func (p *Plugin) SetDescription(val string) {
	p.Description = val
}
func (p *Plugin) SetDescriptionMd(val string) {
	p.DescriptionMd = val
}
func (p *Plugin) SetAuthorId(val int64) {
	p.AuthorId = val
}
func (p *Plugin) SetAuthor(val *usersvc.User) {
	p.Author = val
}
func (p *Plugin) SetIsPrivate(val bool) {
	p.IsPrivate = val
}
func (p *Plugin) SetHomePage(val string) {
	p.HomePage = val
}
func (p *Plugin) SetEnableSecret(val bool) {
	p.EnableSecret = val
}
func (p *Plugin) SetSecrets(val []*PluginSecret) {
	p.Secrets = val
}
func (p *Plugin) SetLabelIds(val []int64) {
	p.LabelIds = val
}
func (p *Plugin) SetLabels(val []*PluginLabel) {
	p.Labels = val
}
func (p *Plugin) SetToolIds(val []int64) {
	p.ToolIds = val
}
func (p *Plugin) SetTools(val []*PluginTool) {
	p.Tools = val
}
func (p *Plugin) SetLogo(val string) {
	p.Logo = val
}
func (p *Plugin) SetCreatedAt(val *base.Time) {
	p.CreatedAt = val
}
func (p *Plugin) SetUpdatedAt(val *base.Time) {
	p.UpdatedAt = val
}
func (p *Plugin) SetPublishedAt(val *base.Time) {
	p.PublishedAt = val
}

var fieldIDToName_Plugin = map[int16]string{
	1:  "id",
	2:  "key",
	3:  "name",
	4:  "description",
	5:  "description_md",
	6:  "author_id",
	7:  "author",
	8:  "is_private",
	9:  "home_page",
	10: "enable_secret",
	11: "secrets",
	12: "label_ids",
	13: "labels",
	14: "tool_ids",
	15: "tools",
	16: "logo",
	17: "created_at",
	18: "updated_at",
	19: "published_at",
}

func (p *Plugin) IsSetAuthor() bool {
	return p.Author != nil
}

func (p *Plugin) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *Plugin) IsSetTools() bool {
	return p.Tools != nil
}

func (p *Plugin) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Plugin) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Plugin) IsSetPublishedAt() bool {
	return p.PublishedAt != nil
}

func (p *Plugin) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetKey bool = false
	var issetName bool = false
	var issetDescription bool = false
	var issetDescriptionMd bool = false
	var issetAuthorId bool = false
	var issetIsPrivate bool = false
	var issetHomePage bool = false
	var issetEnableSecret bool = false
	var issetSecrets bool = false
	var issetLabelIds bool = false
	var issetToolIds bool = false
	var issetLogo bool = false
	var issetCreatedAt bool = false
	var issetUpdatedAt bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescriptionMd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAuthorId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsPrivate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetHomePage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableSecret = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetSecrets = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabelIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetToolIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetLogo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreatedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdatedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetKey {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetDescriptionMd {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetAuthorId {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetIsPrivate {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetHomePage {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetEnableSecret {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetSecrets {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetLabelIds {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetToolIds {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetLogo {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetCreatedAt {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetUpdatedAt {
		fieldId = 18
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Plugin[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Plugin[fieldId]))
}

func (p *Plugin) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *Plugin) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Key = _field
	return nil
}
func (p *Plugin) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *Plugin) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *Plugin) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DescriptionMd = _field
	return nil
}
func (p *Plugin) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AuthorId = _field
	return nil
}
func (p *Plugin) ReadField7(iprot thrift.TProtocol) error {
	_field := usersvc.NewUser()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Author = _field
	return nil
}
func (p *Plugin) ReadField8(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsPrivate = _field
	return nil
}
func (p *Plugin) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HomePage = _field
	return nil
}
func (p *Plugin) ReadField10(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableSecret = _field
	return nil
}
func (p *Plugin) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PluginSecret, 0, size)
	values := make([]PluginSecret, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Secrets = _field
	return nil
}
func (p *Plugin) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LabelIds = _field
	return nil
}
func (p *Plugin) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PluginLabel, 0, size)
	values := make([]PluginLabel, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Labels = _field
	return nil
}
func (p *Plugin) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolIds = _field
	return nil
}
func (p *Plugin) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PluginTool, 0, size)
	values := make([]PluginTool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tools = _field
	return nil
}
func (p *Plugin) ReadField16(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Logo = _field
	return nil
}
func (p *Plugin) ReadField17(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreatedAt = _field
	return nil
}
func (p *Plugin) ReadField18(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UpdatedAt = _field
	return nil
}
func (p *Plugin) ReadField19(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PublishedAt = _field
	return nil
}

func (p *Plugin) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Plugin"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Plugin) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Plugin) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("key", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Key); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Plugin) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Plugin) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Plugin) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description_md", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DescriptionMd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Plugin) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("author_id", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.AuthorId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Plugin) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthor() {
		if err = oprot.WriteFieldBegin("author", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Author.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Plugin) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_private", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsPrivate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Plugin) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("home_page", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.HomePage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Plugin) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enable_secret", thrift.BOOL, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableSecret); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Plugin) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("secrets", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Secrets)); err != nil {
		return err
	}
	for _, v := range p.Secrets {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Plugin) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("label_ids", thrift.LIST, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.LabelIds)); err != nil {
		return err
	}
	for _, v := range p.LabelIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *Plugin) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("labels", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *Plugin) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tool_ids", thrift.LIST, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ToolIds)); err != nil {
		return err
	}
	for _, v := range p.ToolIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *Plugin) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetTools() {
		if err = oprot.WriteFieldBegin("tools", thrift.LIST, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tools)); err != nil {
			return err
		}
		for _, v := range p.Tools {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *Plugin) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("logo", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Logo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *Plugin) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRUCT, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CreatedAt.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *Plugin) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.STRUCT, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.UpdatedAt.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *Plugin) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublishedAt() {
		if err = oprot.WriteFieldBegin("published_at", thrift.STRUCT, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PublishedAt.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *Plugin) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Plugin(%+v)", *p)

}

func (p *Plugin) DeepEqual(ano *Plugin) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Key) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.DescriptionMd) {
		return false
	}
	if !p.Field6DeepEqual(ano.AuthorId) {
		return false
	}
	if !p.Field7DeepEqual(ano.Author) {
		return false
	}
	if !p.Field8DeepEqual(ano.IsPrivate) {
		return false
	}
	if !p.Field9DeepEqual(ano.HomePage) {
		return false
	}
	if !p.Field10DeepEqual(ano.EnableSecret) {
		return false
	}
	if !p.Field11DeepEqual(ano.Secrets) {
		return false
	}
	if !p.Field12DeepEqual(ano.LabelIds) {
		return false
	}
	if !p.Field13DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field14DeepEqual(ano.ToolIds) {
		return false
	}
	if !p.Field15DeepEqual(ano.Tools) {
		return false
	}
	if !p.Field16DeepEqual(ano.Logo) {
		return false
	}
	if !p.Field17DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field18DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field19DeepEqual(ano.PublishedAt) {
		return false
	}
	return true
}

func (p *Plugin) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Plugin) Field2DeepEqual(src int64) bool {

	if p.Key != src {
		return false
	}
	return true
}
func (p *Plugin) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Plugin) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *Plugin) Field5DeepEqual(src string) bool {

	if strings.Compare(p.DescriptionMd, src) != 0 {
		return false
	}
	return true
}
func (p *Plugin) Field6DeepEqual(src int64) bool {

	if p.AuthorId != src {
		return false
	}
	return true
}
func (p *Plugin) Field7DeepEqual(src *usersvc.User) bool {

	if !p.Author.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Plugin) Field8DeepEqual(src bool) bool {

	if p.IsPrivate != src {
		return false
	}
	return true
}
func (p *Plugin) Field9DeepEqual(src string) bool {

	if strings.Compare(p.HomePage, src) != 0 {
		return false
	}
	return true
}
func (p *Plugin) Field10DeepEqual(src bool) bool {

	if p.EnableSecret != src {
		return false
	}
	return true
}
func (p *Plugin) Field11DeepEqual(src []*PluginSecret) bool {

	if len(p.Secrets) != len(src) {
		return false
	}
	for i, v := range p.Secrets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Plugin) Field12DeepEqual(src []int64) bool {

	if len(p.LabelIds) != len(src) {
		return false
	}
	for i, v := range p.LabelIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Plugin) Field13DeepEqual(src []*PluginLabel) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Plugin) Field14DeepEqual(src []int64) bool {

	if len(p.ToolIds) != len(src) {
		return false
	}
	for i, v := range p.ToolIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Plugin) Field15DeepEqual(src []*PluginTool) bool {

	if len(p.Tools) != len(src) {
		return false
	}
	for i, v := range p.Tools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Plugin) Field16DeepEqual(src string) bool {

	if strings.Compare(p.Logo, src) != 0 {
		return false
	}
	return true
}
func (p *Plugin) Field17DeepEqual(src *base.Time) bool {

	if !p.CreatedAt.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Plugin) Field18DeepEqual(src *base.Time) bool {

	if !p.UpdatedAt.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Plugin) Field19DeepEqual(src *base.Time) bool {

	if !p.PublishedAt.DeepEqual(src) {
		return false
	}
	return true
}

type PluginSecret struct {
	Name          string `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Description   string `thrift:"description,2,required" frugal:"2,required,string" json:"description"`
	AcquireMethod string `thrift:"acquire_method,3,required" frugal:"3,required,string" json:"acquire_method"`
	Link          string `thrift:"link,4,required" frugal:"4,required,string" json:"link"`
}

func NewPluginSecret() *PluginSecret {
	return &PluginSecret{}
}

func (p *PluginSecret) InitDefault() {
}

func (p *PluginSecret) GetName() (v string) {
	return p.Name
}

func (p *PluginSecret) GetDescription() (v string) {
	return p.Description
}

func (p *PluginSecret) GetAcquireMethod() (v string) {
	return p.AcquireMethod
}

func (p *PluginSecret) GetLink() (v string) {
	return p.Link
}
func (p *PluginSecret) SetName(val string) {
	p.Name = val
}
func (p *PluginSecret) SetDescription(val string) {
	p.Description = val
}
func (p *PluginSecret) SetAcquireMethod(val string) {
	p.AcquireMethod = val
}
func (p *PluginSecret) SetLink(val string) {
	p.Link = val
}

var fieldIDToName_PluginSecret = map[int16]string{
	1: "name",
	2: "description",
	3: "acquire_method",
	4: "link",
}

func (p *PluginSecret) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetDescription bool = false
	var issetAcquireMethod bool = false
	var issetLink bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetAcquireMethod = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLink = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetAcquireMethod {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLink {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginSecret[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PluginSecret[fieldId]))
}

func (p *PluginSecret) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *PluginSecret) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *PluginSecret) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcquireMethod = _field
	return nil
}
func (p *PluginSecret) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Link = _field
	return nil
}

func (p *PluginSecret) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PluginSecret"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginSecret) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginSecret) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PluginSecret) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("acquire_method", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcquireMethod); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PluginSecret) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("link", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Link); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PluginSecret) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginSecret(%+v)", *p)

}

func (p *PluginSecret) DeepEqual(ano *PluginSecret) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.AcquireMethod) {
		return false
	}
	if !p.Field4DeepEqual(ano.Link) {
		return false
	}
	return true
}

func (p *PluginSecret) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *PluginSecret) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *PluginSecret) Field3DeepEqual(src string) bool {

	if strings.Compare(p.AcquireMethod, src) != 0 {
		return false
	}
	return true
}
func (p *PluginSecret) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Link, src) != 0 {
		return false
	}
	return true
}

type PluginTool struct {
	Id            int64      `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Name          string     `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Description   string     `thrift:"description,3,required" frugal:"3,required,string" json:"description"`
	PluginId      int64      `thrift:"plugin_id,4,required" frugal:"4,required,i64" json:"plugin_id"`
	RequestType   []byte     `thrift:"request_type,5,required" frugal:"5,required,binary" json:"request_type"`
	ResponseType  []byte     `thrift:"response_type,6,required" frugal:"6,required,binary" json:"response_type"`
	ApiUrl        string     `thrift:"api_url,7,required" frugal:"7,required,string" json:"api_url"`
	ImportModelId *int64     `thrift:"import_model_id,8,optional" frugal:"8,optional,i64" json:"import_model_id,omitempty"`
	CreatedAt     *base.Time `thrift:"created_at,9,required" frugal:"9,required,base.Time" json:"created_at"`
	UpdatedAt     *base.Time `thrift:"updated_at,10,required" frugal:"10,required,base.Time" json:"updated_at"`
	TestedAt      *base.Time `thrift:"tested_at,11,optional" frugal:"11,optional,base.Time" json:"tested_at,omitempty"`
}

func NewPluginTool() *PluginTool {
	return &PluginTool{}
}

func (p *PluginTool) InitDefault() {
}

func (p *PluginTool) GetId() (v int64) {
	return p.Id
}

func (p *PluginTool) GetName() (v string) {
	return p.Name
}

func (p *PluginTool) GetDescription() (v string) {
	return p.Description
}

func (p *PluginTool) GetPluginId() (v int64) {
	return p.PluginId
}

func (p *PluginTool) GetRequestType() (v []byte) {
	return p.RequestType
}

func (p *PluginTool) GetResponseType() (v []byte) {
	return p.ResponseType
}

func (p *PluginTool) GetApiUrl() (v string) {
	return p.ApiUrl
}

var PluginTool_ImportModelId_DEFAULT int64

func (p *PluginTool) GetImportModelId() (v int64) {
	if !p.IsSetImportModelId() {
		return PluginTool_ImportModelId_DEFAULT
	}
	return *p.ImportModelId
}

var PluginTool_CreatedAt_DEFAULT *base.Time

func (p *PluginTool) GetCreatedAt() (v *base.Time) {
	if !p.IsSetCreatedAt() {
		return PluginTool_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}

var PluginTool_UpdatedAt_DEFAULT *base.Time

func (p *PluginTool) GetUpdatedAt() (v *base.Time) {
	if !p.IsSetUpdatedAt() {
		return PluginTool_UpdatedAt_DEFAULT
	}
	return p.UpdatedAt
}

var PluginTool_TestedAt_DEFAULT *base.Time

func (p *PluginTool) GetTestedAt() (v *base.Time) {
	if !p.IsSetTestedAt() {
		return PluginTool_TestedAt_DEFAULT
	}
	return p.TestedAt
}
func (p *PluginTool) SetId(val int64) {
	p.Id = val
}
func (p *PluginTool) SetName(val string) {
	p.Name = val
}
func (p *PluginTool) SetDescription(val string) {
	p.Description = val
}
func (p *PluginTool) SetPluginId(val int64) {
	p.PluginId = val
}
func (p *PluginTool) SetRequestType(val []byte) {
	p.RequestType = val
}
func (p *PluginTool) SetResponseType(val []byte) {
	p.ResponseType = val
}
func (p *PluginTool) SetApiUrl(val string) {
	p.ApiUrl = val
}
func (p *PluginTool) SetImportModelId(val *int64) {
	p.ImportModelId = val
}
func (p *PluginTool) SetCreatedAt(val *base.Time) {
	p.CreatedAt = val
}
func (p *PluginTool) SetUpdatedAt(val *base.Time) {
	p.UpdatedAt = val
}
func (p *PluginTool) SetTestedAt(val *base.Time) {
	p.TestedAt = val
}

var fieldIDToName_PluginTool = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "description",
	4:  "plugin_id",
	5:  "request_type",
	6:  "response_type",
	7:  "api_url",
	8:  "import_model_id",
	9:  "created_at",
	10: "updated_at",
	11: "tested_at",
}

func (p *PluginTool) IsSetImportModelId() bool {
	return p.ImportModelId != nil
}

func (p *PluginTool) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *PluginTool) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *PluginTool) IsSetTestedAt() bool {
	return p.TestedAt != nil
}

func (p *PluginTool) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetDescription bool = false
	var issetPluginId bool = false
	var issetRequestType bool = false
	var issetResponseType bool = false
	var issetApiUrl bool = false
	var issetCreatedAt bool = false
	var issetUpdatedAt bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPluginId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetRequestType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetResponseType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetApiUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreatedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdatedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPluginId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetRequestType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetResponseType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetApiUrl {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetCreatedAt {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetUpdatedAt {
		fieldId = 10
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginTool[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PluginTool[fieldId]))
}

func (p *PluginTool) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *PluginTool) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *PluginTool) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *PluginTool) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PluginId = _field
	return nil
}
func (p *PluginTool) ReadField5(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.RequestType = _field
	return nil
}
func (p *PluginTool) ReadField6(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.ResponseType = _field
	return nil
}
func (p *PluginTool) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ApiUrl = _field
	return nil
}
func (p *PluginTool) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ImportModelId = _field
	return nil
}
func (p *PluginTool) ReadField9(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreatedAt = _field
	return nil
}
func (p *PluginTool) ReadField10(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UpdatedAt = _field
	return nil
}
func (p *PluginTool) ReadField11(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TestedAt = _field
	return nil
}

func (p *PluginTool) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PluginTool"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginTool) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginTool) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PluginTool) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PluginTool) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("plugin_id", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PluginId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PluginTool) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request_type", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.RequestType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PluginTool) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("response_type", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.ResponseType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PluginTool) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("api_url", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ApiUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *PluginTool) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetImportModelId() {
		if err = oprot.WriteFieldBegin("import_model_id", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ImportModelId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *PluginTool) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRUCT, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CreatedAt.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *PluginTool) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.STRUCT, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.UpdatedAt.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *PluginTool) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTestedAt() {
		if err = oprot.WriteFieldBegin("tested_at", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TestedAt.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *PluginTool) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginTool(%+v)", *p)

}

func (p *PluginTool) DeepEqual(ano *PluginTool) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.PluginId) {
		return false
	}
	if !p.Field5DeepEqual(ano.RequestType) {
		return false
	}
	if !p.Field6DeepEqual(ano.ResponseType) {
		return false
	}
	if !p.Field7DeepEqual(ano.ApiUrl) {
		return false
	}
	if !p.Field8DeepEqual(ano.ImportModelId) {
		return false
	}
	if !p.Field9DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field11DeepEqual(ano.TestedAt) {
		return false
	}
	return true
}

func (p *PluginTool) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *PluginTool) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *PluginTool) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *PluginTool) Field4DeepEqual(src int64) bool {

	if p.PluginId != src {
		return false
	}
	return true
}
func (p *PluginTool) Field5DeepEqual(src []byte) bool {

	if bytes.Compare(p.RequestType, src) != 0 {
		return false
	}
	return true
}
func (p *PluginTool) Field6DeepEqual(src []byte) bool {

	if bytes.Compare(p.ResponseType, src) != 0 {
		return false
	}
	return true
}
func (p *PluginTool) Field7DeepEqual(src string) bool {

	if strings.Compare(p.ApiUrl, src) != 0 {
		return false
	}
	return true
}
func (p *PluginTool) Field8DeepEqual(src *int64) bool {

	if p.ImportModelId == src {
		return true
	} else if p.ImportModelId == nil || src == nil {
		return false
	}
	if *p.ImportModelId != *src {
		return false
	}
	return true
}
func (p *PluginTool) Field9DeepEqual(src *base.Time) bool {

	if !p.CreatedAt.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PluginTool) Field10DeepEqual(src *base.Time) bool {

	if !p.UpdatedAt.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PluginTool) Field11DeepEqual(src *base.Time) bool {

	if !p.TestedAt.DeepEqual(src) {
		return false
	}
	return true
}

type PluginLabel struct {
	Id        int64      `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Text      string     `thrift:"text,2,required" frugal:"2,required,string" json:"text"`
	CreatedAt *base.Time `thrift:"created_at,3,required" frugal:"3,required,base.Time" json:"created_at"`
}

func NewPluginLabel() *PluginLabel {
	return &PluginLabel{}
}

func (p *PluginLabel) InitDefault() {
}

func (p *PluginLabel) GetId() (v int64) {
	return p.Id
}

func (p *PluginLabel) GetText() (v string) {
	return p.Text
}

var PluginLabel_CreatedAt_DEFAULT *base.Time

func (p *PluginLabel) GetCreatedAt() (v *base.Time) {
	if !p.IsSetCreatedAt() {
		return PluginLabel_CreatedAt_DEFAULT
	}
	return p.CreatedAt
}
func (p *PluginLabel) SetId(val int64) {
	p.Id = val
}
func (p *PluginLabel) SetText(val string) {
	p.Text = val
}
func (p *PluginLabel) SetCreatedAt(val *base.Time) {
	p.CreatedAt = val
}

var fieldIDToName_PluginLabel = map[int16]string{
	1: "id",
	2: "text",
	3: "created_at",
}

func (p *PluginLabel) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *PluginLabel) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetText bool = false
	var issetCreatedAt bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetText = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreatedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetText {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCreatedAt {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginLabel[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PluginLabel[fieldId]))
}

func (p *PluginLabel) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *PluginLabel) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Text = _field
	return nil
}
func (p *PluginLabel) ReadField3(iprot thrift.TProtocol) error {
	_field := base.NewTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreatedAt = _field
	return nil
}

func (p *PluginLabel) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PluginLabel"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginLabel) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginLabel) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Text); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PluginLabel) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CreatedAt.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PluginLabel) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginLabel(%+v)", *p)

}

func (p *PluginLabel) DeepEqual(ano *PluginLabel) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreatedAt) {
		return false
	}
	return true
}

func (p *PluginLabel) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *PluginLabel) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Text, src) != 0 {
		return false
	}
	return true
}
func (p *PluginLabel) Field3DeepEqual(src *base.Time) bool {

	if !p.CreatedAt.DeepEqual(src) {
		return false
	}
	return true
}

type ListPluginLabelReq struct {
	Pagination *base.PaginationReq `thrift:"pagination,1,required" frugal:"1,required,base.PaginationReq" json:"pagination"`
	Text       *string             `thrift:"text,2,optional" frugal:"2,optional,string" json:"text,omitempty"`
}

func NewListPluginLabelReq() *ListPluginLabelReq {
	return &ListPluginLabelReq{}
}

func (p *ListPluginLabelReq) InitDefault() {
}

var ListPluginLabelReq_Pagination_DEFAULT *base.PaginationReq

func (p *ListPluginLabelReq) GetPagination() (v *base.PaginationReq) {
	if !p.IsSetPagination() {
		return ListPluginLabelReq_Pagination_DEFAULT
	}
	return p.Pagination
}

var ListPluginLabelReq_Text_DEFAULT string

func (p *ListPluginLabelReq) GetText() (v string) {
	if !p.IsSetText() {
		return ListPluginLabelReq_Text_DEFAULT
	}
	return *p.Text
}
func (p *ListPluginLabelReq) SetPagination(val *base.PaginationReq) {
	p.Pagination = val
}
func (p *ListPluginLabelReq) SetText(val *string) {
	p.Text = val
}

var fieldIDToName_ListPluginLabelReq = map[int16]string{
	1: "pagination",
	2: "text",
}

func (p *ListPluginLabelReq) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *ListPluginLabelReq) IsSetText() bool {
	return p.Text != nil
}

func (p *ListPluginLabelReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPluginLabelReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListPluginLabelReq[fieldId]))
}

func (p *ListPluginLabelReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewPaginationReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *ListPluginLabelReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Text = _field
	return nil
}

func (p *ListPluginLabelReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPluginLabelReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPluginLabelReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPluginLabelReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Text); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPluginLabelReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPluginLabelReq(%+v)", *p)

}

func (p *ListPluginLabelReq) DeepEqual(ano *ListPluginLabelReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	return true
}

func (p *ListPluginLabelReq) Field1DeepEqual(src *base.PaginationReq) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListPluginLabelReq) Field2DeepEqual(src *string) bool {

	if p.Text == src {
		return true
	} else if p.Text == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Text, *src) != 0 {
		return false
	}
	return true
}

type ListPluginLabelResp struct {
	Pagination *base.PaginationResp `thrift:"pagination,1,required" frugal:"1,required,base.PaginationResp" json:"pagination"`
	Labels     []*PluginLabel       `thrift:"labels,2,required" frugal:"2,required,list<PluginLabel>" json:"labels"`
}

func NewListPluginLabelResp() *ListPluginLabelResp {
	return &ListPluginLabelResp{}
}

func (p *ListPluginLabelResp) InitDefault() {
}

var ListPluginLabelResp_Pagination_DEFAULT *base.PaginationResp

func (p *ListPluginLabelResp) GetPagination() (v *base.PaginationResp) {
	if !p.IsSetPagination() {
		return ListPluginLabelResp_Pagination_DEFAULT
	}
	return p.Pagination
}

func (p *ListPluginLabelResp) GetLabels() (v []*PluginLabel) {
	return p.Labels
}
func (p *ListPluginLabelResp) SetPagination(val *base.PaginationResp) {
	p.Pagination = val
}
func (p *ListPluginLabelResp) SetLabels(val []*PluginLabel) {
	p.Labels = val
}

var fieldIDToName_ListPluginLabelResp = map[int16]string{
	1: "pagination",
	2: "labels",
}

func (p *ListPluginLabelResp) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *ListPluginLabelResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false
	var issetLabels bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPluginLabelResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListPluginLabelResp[fieldId]))
}

func (p *ListPluginLabelResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewPaginationResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *ListPluginLabelResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PluginLabel, 0, size)
	values := make([]PluginLabel, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Labels = _field
	return nil
}

func (p *ListPluginLabelResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPluginLabelResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPluginLabelResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPluginLabelResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("labels", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPluginLabelResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPluginLabelResp(%+v)", *p)

}

func (p *ListPluginLabelResp) DeepEqual(ano *ListPluginLabelResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field2DeepEqual(ano.Labels) {
		return false
	}
	return true
}

func (p *ListPluginLabelResp) Field1DeepEqual(src *base.PaginationResp) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListPluginLabelResp) Field2DeepEqual(src []*PluginLabel) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreatePluginReq struct {
	Key           int64           `thrift:"key,1,required" frugal:"1,required,i64" json:"key"`
	Name          string          `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Description   string          `thrift:"description,3,required" frugal:"3,required,string" json:"description"`
	DescriptionMd string          `thrift:"description_md,4,required" frugal:"4,required,string" json:"description_md"`
	IsPrivate     bool            `thrift:"is_private,5,required" frugal:"5,required,bool" json:"is_private"`
	HomePage      string          `thrift:"home_page,6,required" frugal:"6,required,string" json:"home_page"`
	EnableSecret  bool            `thrift:"enable_secret,7,required" frugal:"7,required,bool" json:"enable_secret"`
	Secrets       []*PluginSecret `thrift:"secrets,8,required" frugal:"8,required,list<PluginSecret>" json:"secrets"`
	LabelIds      []int64         `thrift:"label_ids,9,required" frugal:"9,required,list<i64>" json:"label_ids"`
	LabelTexts    []string        `thrift:"label_texts,10,required" frugal:"10,required,list<string>" json:"label_texts"`
	ToolIds       []int64         `thrift:"tool_ids,11,required" frugal:"11,required,list<i64>" json:"tool_ids"`
	Logo          string          `thrift:"logo,12,required" frugal:"12,required,string" json:"logo"`
}

func NewCreatePluginReq() *CreatePluginReq {
	return &CreatePluginReq{}
}

func (p *CreatePluginReq) InitDefault() {
}

func (p *CreatePluginReq) GetKey() (v int64) {
	return p.Key
}

func (p *CreatePluginReq) GetName() (v string) {
	return p.Name
}

func (p *CreatePluginReq) GetDescription() (v string) {
	return p.Description
}

func (p *CreatePluginReq) GetDescriptionMd() (v string) {
	return p.DescriptionMd
}

func (p *CreatePluginReq) GetIsPrivate() (v bool) {
	return p.IsPrivate
}

func (p *CreatePluginReq) GetHomePage() (v string) {
	return p.HomePage
}

func (p *CreatePluginReq) GetEnableSecret() (v bool) {
	return p.EnableSecret
}

func (p *CreatePluginReq) GetSecrets() (v []*PluginSecret) {
	return p.Secrets
}

func (p *CreatePluginReq) GetLabelIds() (v []int64) {
	return p.LabelIds
}

func (p *CreatePluginReq) GetLabelTexts() (v []string) {
	return p.LabelTexts
}

func (p *CreatePluginReq) GetToolIds() (v []int64) {
	return p.ToolIds
}

func (p *CreatePluginReq) GetLogo() (v string) {
	return p.Logo
}
func (p *CreatePluginReq) SetKey(val int64) {
	p.Key = val
}
func (p *CreatePluginReq) SetName(val string) {
	p.Name = val
}
func (p *CreatePluginReq) SetDescription(val string) {
	p.Description = val
}
func (p *CreatePluginReq) SetDescriptionMd(val string) {
	p.DescriptionMd = val
}
func (p *CreatePluginReq) SetIsPrivate(val bool) {
	p.IsPrivate = val
}
func (p *CreatePluginReq) SetHomePage(val string) {
	p.HomePage = val
}
func (p *CreatePluginReq) SetEnableSecret(val bool) {
	p.EnableSecret = val
}
func (p *CreatePluginReq) SetSecrets(val []*PluginSecret) {
	p.Secrets = val
}
func (p *CreatePluginReq) SetLabelIds(val []int64) {
	p.LabelIds = val
}
func (p *CreatePluginReq) SetLabelTexts(val []string) {
	p.LabelTexts = val
}
func (p *CreatePluginReq) SetToolIds(val []int64) {
	p.ToolIds = val
}
func (p *CreatePluginReq) SetLogo(val string) {
	p.Logo = val
}

var fieldIDToName_CreatePluginReq = map[int16]string{
	1:  "key",
	2:  "name",
	3:  "description",
	4:  "description_md",
	5:  "is_private",
	6:  "home_page",
	7:  "enable_secret",
	8:  "secrets",
	9:  "label_ids",
	10: "label_texts",
	11: "tool_ids",
	12: "logo",
}

func (p *CreatePluginReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKey bool = false
	var issetName bool = false
	var issetDescription bool = false
	var issetDescriptionMd bool = false
	var issetIsPrivate bool = false
	var issetHomePage bool = false
	var issetEnableSecret bool = false
	var issetSecrets bool = false
	var issetLabelIds bool = false
	var issetLabelTexts bool = false
	var issetToolIds bool = false
	var issetLogo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescriptionMd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsPrivate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetHomePage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableSecret = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSecrets = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabelIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabelTexts = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetToolIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetLogo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDescriptionMd {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetIsPrivate {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetHomePage {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetEnableSecret {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSecrets {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetLabelIds {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetLabelTexts {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetToolIds {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetLogo {
		fieldId = 12
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePluginReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreatePluginReq[fieldId]))
}

func (p *CreatePluginReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Key = _field
	return nil
}
func (p *CreatePluginReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreatePluginReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *CreatePluginReq) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DescriptionMd = _field
	return nil
}
func (p *CreatePluginReq) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsPrivate = _field
	return nil
}
func (p *CreatePluginReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HomePage = _field
	return nil
}
func (p *CreatePluginReq) ReadField7(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableSecret = _field
	return nil
}
func (p *CreatePluginReq) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PluginSecret, 0, size)
	values := make([]PluginSecret, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Secrets = _field
	return nil
}
func (p *CreatePluginReq) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LabelIds = _field
	return nil
}
func (p *CreatePluginReq) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LabelTexts = _field
	return nil
}
func (p *CreatePluginReq) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolIds = _field
	return nil
}
func (p *CreatePluginReq) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Logo = _field
	return nil
}

func (p *CreatePluginReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePluginReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePluginReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Key); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreatePluginReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreatePluginReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreatePluginReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description_md", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DescriptionMd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreatePluginReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_private", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsPrivate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreatePluginReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("home_page", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.HomePage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreatePluginReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enable_secret", thrift.BOOL, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableSecret); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreatePluginReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("secrets", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Secrets)); err != nil {
		return err
	}
	for _, v := range p.Secrets {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreatePluginReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("label_ids", thrift.LIST, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.LabelIds)); err != nil {
		return err
	}
	for _, v := range p.LabelIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreatePluginReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("label_texts", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.LabelTexts)); err != nil {
		return err
	}
	for _, v := range p.LabelTexts {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreatePluginReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tool_ids", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ToolIds)); err != nil {
		return err
	}
	for _, v := range p.ToolIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreatePluginReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("logo", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Logo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreatePluginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePluginReq(%+v)", *p)

}

func (p *CreatePluginReq) DeepEqual(ano *CreatePluginReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.DescriptionMd) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsPrivate) {
		return false
	}
	if !p.Field6DeepEqual(ano.HomePage) {
		return false
	}
	if !p.Field7DeepEqual(ano.EnableSecret) {
		return false
	}
	if !p.Field8DeepEqual(ano.Secrets) {
		return false
	}
	if !p.Field9DeepEqual(ano.LabelIds) {
		return false
	}
	if !p.Field10DeepEqual(ano.LabelTexts) {
		return false
	}
	if !p.Field11DeepEqual(ano.ToolIds) {
		return false
	}
	if !p.Field12DeepEqual(ano.Logo) {
		return false
	}
	return true
}

func (p *CreatePluginReq) Field1DeepEqual(src int64) bool {

	if p.Key != src {
		return false
	}
	return true
}
func (p *CreatePluginReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePluginReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePluginReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.DescriptionMd, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePluginReq) Field5DeepEqual(src bool) bool {

	if p.IsPrivate != src {
		return false
	}
	return true
}
func (p *CreatePluginReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.HomePage, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePluginReq) Field7DeepEqual(src bool) bool {

	if p.EnableSecret != src {
		return false
	}
	return true
}
func (p *CreatePluginReq) Field8DeepEqual(src []*PluginSecret) bool {

	if len(p.Secrets) != len(src) {
		return false
	}
	for i, v := range p.Secrets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreatePluginReq) Field9DeepEqual(src []int64) bool {

	if len(p.LabelIds) != len(src) {
		return false
	}
	for i, v := range p.LabelIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *CreatePluginReq) Field10DeepEqual(src []string) bool {

	if len(p.LabelTexts) != len(src) {
		return false
	}
	for i, v := range p.LabelTexts {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CreatePluginReq) Field11DeepEqual(src []int64) bool {

	if len(p.ToolIds) != len(src) {
		return false
	}
	for i, v := range p.ToolIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *CreatePluginReq) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Logo, src) != 0 {
		return false
	}
	return true
}

type UpdatePluginReq struct {
	Id            int64           `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Key           *int64          `thrift:"key,2,optional" frugal:"2,optional,i64" json:"key,omitempty"`
	Name          *string         `thrift:"name,3,optional" frugal:"3,optional,string" json:"name,omitempty"`
	Description   *string         `thrift:"description,4,optional" frugal:"4,optional,string" json:"description,omitempty"`
	DescriptionMd *string         `thrift:"description_md,5,optional" frugal:"5,optional,string" json:"description_md,omitempty"`
	IsPrivate     *bool           `thrift:"is_private,6,optional" frugal:"6,optional,bool" json:"is_private,omitempty"`
	HomePage      *string         `thrift:"home_page,7,optional" frugal:"7,optional,string" json:"home_page,omitempty"`
	EnableSecret  *bool           `thrift:"enable_secret,8,optional" frugal:"8,optional,bool" json:"enable_secret,omitempty"`
	Secrets       []*PluginSecret `thrift:"secrets,9,optional" frugal:"9,optional,list<PluginSecret>" json:"secrets,omitempty"`
	LabelIds      []int64         `thrift:"label_ids,10,optional" frugal:"10,optional,list<i64>" json:"label_ids,omitempty"`
	LabelTexts    []string        `thrift:"label_texts,11,optional" frugal:"11,optional,list<string>" json:"label_texts,omitempty"`
	ToolIds       []int64         `thrift:"tool_ids,12,optional" frugal:"12,optional,list<i64>" json:"tool_ids,omitempty"`
	Logo          *string         `thrift:"logo,13,optional" frugal:"13,optional,string" json:"logo,omitempty"`
}

func NewUpdatePluginReq() *UpdatePluginReq {
	return &UpdatePluginReq{}
}

func (p *UpdatePluginReq) InitDefault() {
}

func (p *UpdatePluginReq) GetId() (v int64) {
	return p.Id
}

var UpdatePluginReq_Key_DEFAULT int64

func (p *UpdatePluginReq) GetKey() (v int64) {
	if !p.IsSetKey() {
		return UpdatePluginReq_Key_DEFAULT
	}
	return *p.Key
}

var UpdatePluginReq_Name_DEFAULT string

func (p *UpdatePluginReq) GetName() (v string) {
	if !p.IsSetName() {
		return UpdatePluginReq_Name_DEFAULT
	}
	return *p.Name
}

var UpdatePluginReq_Description_DEFAULT string

func (p *UpdatePluginReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return UpdatePluginReq_Description_DEFAULT
	}
	return *p.Description
}

var UpdatePluginReq_DescriptionMd_DEFAULT string

func (p *UpdatePluginReq) GetDescriptionMd() (v string) {
	if !p.IsSetDescriptionMd() {
		return UpdatePluginReq_DescriptionMd_DEFAULT
	}
	return *p.DescriptionMd
}

var UpdatePluginReq_IsPrivate_DEFAULT bool

func (p *UpdatePluginReq) GetIsPrivate() (v bool) {
	if !p.IsSetIsPrivate() {
		return UpdatePluginReq_IsPrivate_DEFAULT
	}
	return *p.IsPrivate
}

var UpdatePluginReq_HomePage_DEFAULT string

func (p *UpdatePluginReq) GetHomePage() (v string) {
	if !p.IsSetHomePage() {
		return UpdatePluginReq_HomePage_DEFAULT
	}
	return *p.HomePage
}

var UpdatePluginReq_EnableSecret_DEFAULT bool

func (p *UpdatePluginReq) GetEnableSecret() (v bool) {
	if !p.IsSetEnableSecret() {
		return UpdatePluginReq_EnableSecret_DEFAULT
	}
	return *p.EnableSecret
}

var UpdatePluginReq_Secrets_DEFAULT []*PluginSecret

func (p *UpdatePluginReq) GetSecrets() (v []*PluginSecret) {
	if !p.IsSetSecrets() {
		return UpdatePluginReq_Secrets_DEFAULT
	}
	return p.Secrets
}

var UpdatePluginReq_LabelIds_DEFAULT []int64

func (p *UpdatePluginReq) GetLabelIds() (v []int64) {
	if !p.IsSetLabelIds() {
		return UpdatePluginReq_LabelIds_DEFAULT
	}
	return p.LabelIds
}

var UpdatePluginReq_LabelTexts_DEFAULT []string

func (p *UpdatePluginReq) GetLabelTexts() (v []string) {
	if !p.IsSetLabelTexts() {
		return UpdatePluginReq_LabelTexts_DEFAULT
	}
	return p.LabelTexts
}

var UpdatePluginReq_ToolIds_DEFAULT []int64

func (p *UpdatePluginReq) GetToolIds() (v []int64) {
	if !p.IsSetToolIds() {
		return UpdatePluginReq_ToolIds_DEFAULT
	}
	return p.ToolIds
}

var UpdatePluginReq_Logo_DEFAULT string

func (p *UpdatePluginReq) GetLogo() (v string) {
	if !p.IsSetLogo() {
		return UpdatePluginReq_Logo_DEFAULT
	}
	return *p.Logo
}
func (p *UpdatePluginReq) SetId(val int64) {
	p.Id = val
}
func (p *UpdatePluginReq) SetKey(val *int64) {
	p.Key = val
}
func (p *UpdatePluginReq) SetName(val *string) {
	p.Name = val
}
func (p *UpdatePluginReq) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdatePluginReq) SetDescriptionMd(val *string) {
	p.DescriptionMd = val
}
func (p *UpdatePluginReq) SetIsPrivate(val *bool) {
	p.IsPrivate = val
}
func (p *UpdatePluginReq) SetHomePage(val *string) {
	p.HomePage = val
}
func (p *UpdatePluginReq) SetEnableSecret(val *bool) {
	p.EnableSecret = val
}
func (p *UpdatePluginReq) SetSecrets(val []*PluginSecret) {
	p.Secrets = val
}
func (p *UpdatePluginReq) SetLabelIds(val []int64) {
	p.LabelIds = val
}
func (p *UpdatePluginReq) SetLabelTexts(val []string) {
	p.LabelTexts = val
}
func (p *UpdatePluginReq) SetToolIds(val []int64) {
	p.ToolIds = val
}
func (p *UpdatePluginReq) SetLogo(val *string) {
	p.Logo = val
}

var fieldIDToName_UpdatePluginReq = map[int16]string{
	1:  "id",
	2:  "key",
	3:  "name",
	4:  "description",
	5:  "description_md",
	6:  "is_private",
	7:  "home_page",
	8:  "enable_secret",
	9:  "secrets",
	10: "label_ids",
	11: "label_texts",
	12: "tool_ids",
	13: "logo",
}

func (p *UpdatePluginReq) IsSetKey() bool {
	return p.Key != nil
}

func (p *UpdatePluginReq) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdatePluginReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdatePluginReq) IsSetDescriptionMd() bool {
	return p.DescriptionMd != nil
}

func (p *UpdatePluginReq) IsSetIsPrivate() bool {
	return p.IsPrivate != nil
}

func (p *UpdatePluginReq) IsSetHomePage() bool {
	return p.HomePage != nil
}

func (p *UpdatePluginReq) IsSetEnableSecret() bool {
	return p.EnableSecret != nil
}

func (p *UpdatePluginReq) IsSetSecrets() bool {
	return p.Secrets != nil
}

func (p *UpdatePluginReq) IsSetLabelIds() bool {
	return p.LabelIds != nil
}

func (p *UpdatePluginReq) IsSetLabelTexts() bool {
	return p.LabelTexts != nil
}

func (p *UpdatePluginReq) IsSetToolIds() bool {
	return p.ToolIds != nil
}

func (p *UpdatePluginReq) IsSetLogo() bool {
	return p.Logo != nil
}

func (p *UpdatePluginReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePluginReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdatePluginReq[fieldId]))
}

func (p *UpdatePluginReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdatePluginReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *UpdatePluginReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *UpdatePluginReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *UpdatePluginReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DescriptionMd = _field
	return nil
}
func (p *UpdatePluginReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsPrivate = _field
	return nil
}
func (p *UpdatePluginReq) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HomePage = _field
	return nil
}
func (p *UpdatePluginReq) ReadField8(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableSecret = _field
	return nil
}
func (p *UpdatePluginReq) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PluginSecret, 0, size)
	values := make([]PluginSecret, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Secrets = _field
	return nil
}
func (p *UpdatePluginReq) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LabelIds = _field
	return nil
}
func (p *UpdatePluginReq) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LabelTexts = _field
	return nil
}
func (p *UpdatePluginReq) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolIds = _field
	return nil
}
func (p *UpdatePluginReq) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Logo = _field
	return nil
}

func (p *UpdatePluginReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePluginReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePluginReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescriptionMd() {
		if err = oprot.WriteFieldBegin("description_md", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DescriptionMd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsPrivate() {
		if err = oprot.WriteFieldBegin("is_private", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsPrivate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetHomePage() {
		if err = oprot.WriteFieldBegin("home_page", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HomePage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSecret() {
		if err = oprot.WriteFieldBegin("enable_secret", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableSecret); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecrets() {
		if err = oprot.WriteFieldBegin("secrets", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Secrets)); err != nil {
			return err
		}
		for _, v := range p.Secrets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabelIds() {
		if err = oprot.WriteFieldBegin("label_ids", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.LabelIds)); err != nil {
			return err
		}
		for _, v := range p.LabelIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabelTexts() {
		if err = oprot.WriteFieldBegin("label_texts", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.LabelTexts)); err != nil {
			return err
		}
		for _, v := range p.LabelTexts {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolIds() {
		if err = oprot.WriteFieldBegin("tool_ids", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ToolIds)); err != nil {
			return err
		}
		for _, v := range p.ToolIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *UpdatePluginReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogo() {
		if err = oprot.WriteFieldBegin("logo", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Logo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *UpdatePluginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePluginReq(%+v)", *p)

}

func (p *UpdatePluginReq) DeepEqual(ano *UpdatePluginReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Key) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.DescriptionMd) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsPrivate) {
		return false
	}
	if !p.Field7DeepEqual(ano.HomePage) {
		return false
	}
	if !p.Field8DeepEqual(ano.EnableSecret) {
		return false
	}
	if !p.Field9DeepEqual(ano.Secrets) {
		return false
	}
	if !p.Field10DeepEqual(ano.LabelIds) {
		return false
	}
	if !p.Field11DeepEqual(ano.LabelTexts) {
		return false
	}
	if !p.Field12DeepEqual(ano.ToolIds) {
		return false
	}
	if !p.Field13DeepEqual(ano.Logo) {
		return false
	}
	return true
}

func (p *UpdatePluginReq) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdatePluginReq) Field2DeepEqual(src *int64) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if *p.Key != *src {
		return false
	}
	return true
}
func (p *UpdatePluginReq) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePluginReq) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePluginReq) Field5DeepEqual(src *string) bool {

	if p.DescriptionMd == src {
		return true
	} else if p.DescriptionMd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DescriptionMd, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePluginReq) Field6DeepEqual(src *bool) bool {

	if p.IsPrivate == src {
		return true
	} else if p.IsPrivate == nil || src == nil {
		return false
	}
	if *p.IsPrivate != *src {
		return false
	}
	return true
}
func (p *UpdatePluginReq) Field7DeepEqual(src *string) bool {

	if p.HomePage == src {
		return true
	} else if p.HomePage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HomePage, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePluginReq) Field8DeepEqual(src *bool) bool {

	if p.EnableSecret == src {
		return true
	} else if p.EnableSecret == nil || src == nil {
		return false
	}
	if *p.EnableSecret != *src {
		return false
	}
	return true
}
func (p *UpdatePluginReq) Field9DeepEqual(src []*PluginSecret) bool {

	if len(p.Secrets) != len(src) {
		return false
	}
	for i, v := range p.Secrets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdatePluginReq) Field10DeepEqual(src []int64) bool {

	if len(p.LabelIds) != len(src) {
		return false
	}
	for i, v := range p.LabelIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *UpdatePluginReq) Field11DeepEqual(src []string) bool {

	if len(p.LabelTexts) != len(src) {
		return false
	}
	for i, v := range p.LabelTexts {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *UpdatePluginReq) Field12DeepEqual(src []int64) bool {

	if len(p.ToolIds) != len(src) {
		return false
	}
	for i, v := range p.ToolIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *UpdatePluginReq) Field13DeepEqual(src *string) bool {

	if p.Logo == src {
		return true
	} else if p.Logo == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Logo, *src) != 0 {
		return false
	}
	return true
}

type ListPluginReq struct {
	Pagination  *base.PaginationReq `thrift:"pagination,1,required" frugal:"1,required,base.PaginationReq" json:"pagination"`
	AuthorId    *int64              `thrift:"author_id,2,optional" frugal:"2,optional,i64" json:"author_id,omitempty"`
	Name        *string             `thrift:"name,3,optional" frugal:"3,optional,string" json:"name,omitempty"`
	Description *string             `thrift:"description,4,optional" frugal:"4,optional,string" json:"description,omitempty"`
	Labels      []int64             `thrift:"labels,5,optional" frugal:"5,optional,list<i64>" json:"labels,omitempty"`
}

func NewListPluginReq() *ListPluginReq {
	return &ListPluginReq{}
}

func (p *ListPluginReq) InitDefault() {
}

var ListPluginReq_Pagination_DEFAULT *base.PaginationReq

func (p *ListPluginReq) GetPagination() (v *base.PaginationReq) {
	if !p.IsSetPagination() {
		return ListPluginReq_Pagination_DEFAULT
	}
	return p.Pagination
}

var ListPluginReq_AuthorId_DEFAULT int64

func (p *ListPluginReq) GetAuthorId() (v int64) {
	if !p.IsSetAuthorId() {
		return ListPluginReq_AuthorId_DEFAULT
	}
	return *p.AuthorId
}

var ListPluginReq_Name_DEFAULT string

func (p *ListPluginReq) GetName() (v string) {
	if !p.IsSetName() {
		return ListPluginReq_Name_DEFAULT
	}
	return *p.Name
}

var ListPluginReq_Description_DEFAULT string

func (p *ListPluginReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return ListPluginReq_Description_DEFAULT
	}
	return *p.Description
}

var ListPluginReq_Labels_DEFAULT []int64

func (p *ListPluginReq) GetLabels() (v []int64) {
	if !p.IsSetLabels() {
		return ListPluginReq_Labels_DEFAULT
	}
	return p.Labels
}
func (p *ListPluginReq) SetPagination(val *base.PaginationReq) {
	p.Pagination = val
}
func (p *ListPluginReq) SetAuthorId(val *int64) {
	p.AuthorId = val
}
func (p *ListPluginReq) SetName(val *string) {
	p.Name = val
}
func (p *ListPluginReq) SetDescription(val *string) {
	p.Description = val
}
func (p *ListPluginReq) SetLabels(val []int64) {
	p.Labels = val
}

var fieldIDToName_ListPluginReq = map[int16]string{
	1: "pagination",
	2: "author_id",
	3: "name",
	4: "description",
	5: "labels",
}

func (p *ListPluginReq) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *ListPluginReq) IsSetAuthorId() bool {
	return p.AuthorId != nil
}

func (p *ListPluginReq) IsSetName() bool {
	return p.Name != nil
}

func (p *ListPluginReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *ListPluginReq) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *ListPluginReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPluginReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListPluginReq[fieldId]))
}

func (p *ListPluginReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewPaginationReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *ListPluginReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthorId = _field
	return nil
}
func (p *ListPluginReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ListPluginReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *ListPluginReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Labels = _field
	return nil
}

func (p *ListPluginReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPluginReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPluginReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPluginReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorId() {
		if err = oprot.WriteFieldBegin("author_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthorId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPluginReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListPluginReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListPluginReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("labels", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListPluginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPluginReq(%+v)", *p)

}

func (p *ListPluginReq) DeepEqual(ano *ListPluginReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field2DeepEqual(ano.AuthorId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.Labels) {
		return false
	}
	return true
}

func (p *ListPluginReq) Field1DeepEqual(src *base.PaginationReq) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListPluginReq) Field2DeepEqual(src *int64) bool {

	if p.AuthorId == src {
		return true
	} else if p.AuthorId == nil || src == nil {
		return false
	}
	if *p.AuthorId != *src {
		return false
	}
	return true
}
func (p *ListPluginReq) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ListPluginReq) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *ListPluginReq) Field5DeepEqual(src []int64) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type ListPluginResp struct {
	Pagination *base.PaginationResp `thrift:"pagination,1,required" frugal:"1,required,base.PaginationResp" json:"pagination"`
	Plugins    []*Plugin            `thrift:"plugins,2,required" frugal:"2,required,list<Plugin>" json:"plugins"`
}

func NewListPluginResp() *ListPluginResp {
	return &ListPluginResp{}
}

func (p *ListPluginResp) InitDefault() {
}

var ListPluginResp_Pagination_DEFAULT *base.PaginationResp

func (p *ListPluginResp) GetPagination() (v *base.PaginationResp) {
	if !p.IsSetPagination() {
		return ListPluginResp_Pagination_DEFAULT
	}
	return p.Pagination
}

func (p *ListPluginResp) GetPlugins() (v []*Plugin) {
	return p.Plugins
}
func (p *ListPluginResp) SetPagination(val *base.PaginationResp) {
	p.Pagination = val
}
func (p *ListPluginResp) SetPlugins(val []*Plugin) {
	p.Plugins = val
}

var fieldIDToName_ListPluginResp = map[int16]string{
	1: "pagination",
	2: "plugins",
}

func (p *ListPluginResp) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *ListPluginResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false
	var issetPlugins bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlugins = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPlugins {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPluginResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListPluginResp[fieldId]))
}

func (p *ListPluginResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewPaginationResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *ListPluginResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Plugin, 0, size)
	values := make([]Plugin, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Plugins = _field
	return nil
}

func (p *ListPluginResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPluginResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPluginResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPluginResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("plugins", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Plugins)); err != nil {
		return err
	}
	for _, v := range p.Plugins {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPluginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPluginResp(%+v)", *p)

}

func (p *ListPluginResp) DeepEqual(ano *ListPluginResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field2DeepEqual(ano.Plugins) {
		return false
	}
	return true
}

func (p *ListPluginResp) Field1DeepEqual(src *base.PaginationResp) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListPluginResp) Field2DeepEqual(src []*Plugin) bool {

	if len(p.Plugins) != len(src) {
		return false
	}
	for i, v := range p.Plugins {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreatePluginToolReq struct {
	Name          string `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Description   string `thrift:"description,2,required" frugal:"2,required,string" json:"description"`
	PluginId      int64  `thrift:"plugin_id,3,required" frugal:"3,required,i64" json:"plugin_id"`
	RequestType   []byte `thrift:"request_type,4,required" frugal:"4,required,binary" json:"request_type"`
	ResponseType  []byte `thrift:"response_type,5,required" frugal:"5,required,binary" json:"response_type"`
	ApiUrl        string `thrift:"api_url,6,required" frugal:"6,required,string" json:"api_url"`
	ImportModelId *int64 `thrift:"import_model_id,7,optional" frugal:"7,optional,i64" json:"import_model_id,omitempty"`
}

func NewCreatePluginToolReq() *CreatePluginToolReq {
	return &CreatePluginToolReq{}
}

func (p *CreatePluginToolReq) InitDefault() {
}

func (p *CreatePluginToolReq) GetName() (v string) {
	return p.Name
}

func (p *CreatePluginToolReq) GetDescription() (v string) {
	return p.Description
}

func (p *CreatePluginToolReq) GetPluginId() (v int64) {
	return p.PluginId
}

func (p *CreatePluginToolReq) GetRequestType() (v []byte) {
	return p.RequestType
}

func (p *CreatePluginToolReq) GetResponseType() (v []byte) {
	return p.ResponseType
}

func (p *CreatePluginToolReq) GetApiUrl() (v string) {
	return p.ApiUrl
}

var CreatePluginToolReq_ImportModelId_DEFAULT int64

func (p *CreatePluginToolReq) GetImportModelId() (v int64) {
	if !p.IsSetImportModelId() {
		return CreatePluginToolReq_ImportModelId_DEFAULT
	}
	return *p.ImportModelId
}
func (p *CreatePluginToolReq) SetName(val string) {
	p.Name = val
}
func (p *CreatePluginToolReq) SetDescription(val string) {
	p.Description = val
}
func (p *CreatePluginToolReq) SetPluginId(val int64) {
	p.PluginId = val
}
func (p *CreatePluginToolReq) SetRequestType(val []byte) {
	p.RequestType = val
}
func (p *CreatePluginToolReq) SetResponseType(val []byte) {
	p.ResponseType = val
}
func (p *CreatePluginToolReq) SetApiUrl(val string) {
	p.ApiUrl = val
}
func (p *CreatePluginToolReq) SetImportModelId(val *int64) {
	p.ImportModelId = val
}

var fieldIDToName_CreatePluginToolReq = map[int16]string{
	1: "name",
	2: "description",
	3: "plugin_id",
	4: "request_type",
	5: "response_type",
	6: "api_url",
	7: "import_model_id",
}

func (p *CreatePluginToolReq) IsSetImportModelId() bool {
	return p.ImportModelId != nil
}

func (p *CreatePluginToolReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetDescription bool = false
	var issetPluginId bool = false
	var issetRequestType bool = false
	var issetResponseType bool = false
	var issetApiUrl bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPluginId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetRequestType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetResponseType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetApiUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPluginId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetRequestType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetResponseType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetApiUrl {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePluginToolReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreatePluginToolReq[fieldId]))
}

func (p *CreatePluginToolReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreatePluginToolReq) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *CreatePluginToolReq) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PluginId = _field
	return nil
}
func (p *CreatePluginToolReq) ReadField4(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.RequestType = _field
	return nil
}
func (p *CreatePluginToolReq) ReadField5(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.ResponseType = _field
	return nil
}
func (p *CreatePluginToolReq) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ApiUrl = _field
	return nil
}
func (p *CreatePluginToolReq) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ImportModelId = _field
	return nil
}

func (p *CreatePluginToolReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePluginToolReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePluginToolReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreatePluginToolReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreatePluginToolReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("plugin_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PluginId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreatePluginToolReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request_type", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.RequestType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreatePluginToolReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("response_type", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.ResponseType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreatePluginToolReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("api_url", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ApiUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreatePluginToolReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetImportModelId() {
		if err = oprot.WriteFieldBegin("import_model_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ImportModelId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreatePluginToolReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePluginToolReq(%+v)", *p)

}

func (p *CreatePluginToolReq) DeepEqual(ano *CreatePluginToolReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.PluginId) {
		return false
	}
	if !p.Field4DeepEqual(ano.RequestType) {
		return false
	}
	if !p.Field5DeepEqual(ano.ResponseType) {
		return false
	}
	if !p.Field6DeepEqual(ano.ApiUrl) {
		return false
	}
	if !p.Field7DeepEqual(ano.ImportModelId) {
		return false
	}
	return true
}

func (p *CreatePluginToolReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePluginToolReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePluginToolReq) Field3DeepEqual(src int64) bool {

	if p.PluginId != src {
		return false
	}
	return true
}
func (p *CreatePluginToolReq) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.RequestType, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePluginToolReq) Field5DeepEqual(src []byte) bool {

	if bytes.Compare(p.ResponseType, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePluginToolReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ApiUrl, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePluginToolReq) Field7DeepEqual(src *int64) bool {

	if p.ImportModelId == src {
		return true
	} else if p.ImportModelId == nil || src == nil {
		return false
	}
	if *p.ImportModelId != *src {
		return false
	}
	return true
}

type UpdatePluginToolReq struct {
	Id            int64   `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Name          *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Description   *string `thrift:"description,3,optional" frugal:"3,optional,string" json:"description,omitempty"`
	PluginId      *int64  `thrift:"plugin_id,4,optional" frugal:"4,optional,i64" json:"plugin_id,omitempty"`
	RequestType   []byte  `thrift:"request_type,5,optional" frugal:"5,optional,binary" json:"request_type,omitempty"`
	ResponseType  []byte  `thrift:"response_type,6,optional" frugal:"6,optional,binary" json:"response_type,omitempty"`
	ApiUrl        *string `thrift:"api_url,7,optional" frugal:"7,optional,string" json:"api_url,omitempty"`
	ImportModelId *int64  `thrift:"import_model_id,8,optional" frugal:"8,optional,i64" json:"import_model_id,omitempty"`
}

func NewUpdatePluginToolReq() *UpdatePluginToolReq {
	return &UpdatePluginToolReq{}
}

func (p *UpdatePluginToolReq) InitDefault() {
}

func (p *UpdatePluginToolReq) GetId() (v int64) {
	return p.Id
}

var UpdatePluginToolReq_Name_DEFAULT string

func (p *UpdatePluginToolReq) GetName() (v string) {
	if !p.IsSetName() {
		return UpdatePluginToolReq_Name_DEFAULT
	}
	return *p.Name
}

var UpdatePluginToolReq_Description_DEFAULT string

func (p *UpdatePluginToolReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return UpdatePluginToolReq_Description_DEFAULT
	}
	return *p.Description
}

var UpdatePluginToolReq_PluginId_DEFAULT int64

func (p *UpdatePluginToolReq) GetPluginId() (v int64) {
	if !p.IsSetPluginId() {
		return UpdatePluginToolReq_PluginId_DEFAULT
	}
	return *p.PluginId
}

var UpdatePluginToolReq_RequestType_DEFAULT []byte

func (p *UpdatePluginToolReq) GetRequestType() (v []byte) {
	if !p.IsSetRequestType() {
		return UpdatePluginToolReq_RequestType_DEFAULT
	}
	return p.RequestType
}

var UpdatePluginToolReq_ResponseType_DEFAULT []byte

func (p *UpdatePluginToolReq) GetResponseType() (v []byte) {
	if !p.IsSetResponseType() {
		return UpdatePluginToolReq_ResponseType_DEFAULT
	}
	return p.ResponseType
}

var UpdatePluginToolReq_ApiUrl_DEFAULT string

func (p *UpdatePluginToolReq) GetApiUrl() (v string) {
	if !p.IsSetApiUrl() {
		return UpdatePluginToolReq_ApiUrl_DEFAULT
	}
	return *p.ApiUrl
}

var UpdatePluginToolReq_ImportModelId_DEFAULT int64

func (p *UpdatePluginToolReq) GetImportModelId() (v int64) {
	if !p.IsSetImportModelId() {
		return UpdatePluginToolReq_ImportModelId_DEFAULT
	}
	return *p.ImportModelId
}
func (p *UpdatePluginToolReq) SetId(val int64) {
	p.Id = val
}
func (p *UpdatePluginToolReq) SetName(val *string) {
	p.Name = val
}
func (p *UpdatePluginToolReq) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdatePluginToolReq) SetPluginId(val *int64) {
	p.PluginId = val
}
func (p *UpdatePluginToolReq) SetRequestType(val []byte) {
	p.RequestType = val
}
func (p *UpdatePluginToolReq) SetResponseType(val []byte) {
	p.ResponseType = val
}
func (p *UpdatePluginToolReq) SetApiUrl(val *string) {
	p.ApiUrl = val
}
func (p *UpdatePluginToolReq) SetImportModelId(val *int64) {
	p.ImportModelId = val
}

var fieldIDToName_UpdatePluginToolReq = map[int16]string{
	1: "id",
	2: "name",
	3: "description",
	4: "plugin_id",
	5: "request_type",
	6: "response_type",
	7: "api_url",
	8: "import_model_id",
}

func (p *UpdatePluginToolReq) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdatePluginToolReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdatePluginToolReq) IsSetPluginId() bool {
	return p.PluginId != nil
}

func (p *UpdatePluginToolReq) IsSetRequestType() bool {
	return p.RequestType != nil
}

func (p *UpdatePluginToolReq) IsSetResponseType() bool {
	return p.ResponseType != nil
}

func (p *UpdatePluginToolReq) IsSetApiUrl() bool {
	return p.ApiUrl != nil
}

func (p *UpdatePluginToolReq) IsSetImportModelId() bool {
	return p.ImportModelId != nil
}

func (p *UpdatePluginToolReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePluginToolReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdatePluginToolReq[fieldId]))
}

func (p *UpdatePluginToolReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdatePluginToolReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *UpdatePluginToolReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *UpdatePluginToolReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PluginId = _field
	return nil
}
func (p *UpdatePluginToolReq) ReadField5(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.RequestType = _field
	return nil
}
func (p *UpdatePluginToolReq) ReadField6(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.ResponseType = _field
	return nil
}
func (p *UpdatePluginToolReq) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ApiUrl = _field
	return nil
}
func (p *UpdatePluginToolReq) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ImportModelId = _field
	return nil
}

func (p *UpdatePluginToolReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePluginToolReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePluginToolReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdatePluginToolReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdatePluginToolReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdatePluginToolReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPluginId() {
		if err = oprot.WriteFieldBegin("plugin_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PluginId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdatePluginToolReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestType() {
		if err = oprot.WriteFieldBegin("request_type", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.RequestType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdatePluginToolReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseType() {
		if err = oprot.WriteFieldBegin("response_type", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.ResponseType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdatePluginToolReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiUrl() {
		if err = oprot.WriteFieldBegin("api_url", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ApiUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdatePluginToolReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetImportModelId() {
		if err = oprot.WriteFieldBegin("import_model_id", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ImportModelId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdatePluginToolReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePluginToolReq(%+v)", *p)

}

func (p *UpdatePluginToolReq) DeepEqual(ano *UpdatePluginToolReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.PluginId) {
		return false
	}
	if !p.Field5DeepEqual(ano.RequestType) {
		return false
	}
	if !p.Field6DeepEqual(ano.ResponseType) {
		return false
	}
	if !p.Field7DeepEqual(ano.ApiUrl) {
		return false
	}
	if !p.Field8DeepEqual(ano.ImportModelId) {
		return false
	}
	return true
}

func (p *UpdatePluginToolReq) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdatePluginToolReq) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePluginToolReq) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePluginToolReq) Field4DeepEqual(src *int64) bool {

	if p.PluginId == src {
		return true
	} else if p.PluginId == nil || src == nil {
		return false
	}
	if *p.PluginId != *src {
		return false
	}
	return true
}
func (p *UpdatePluginToolReq) Field5DeepEqual(src []byte) bool {

	if bytes.Compare(p.RequestType, src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePluginToolReq) Field6DeepEqual(src []byte) bool {

	if bytes.Compare(p.ResponseType, src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePluginToolReq) Field7DeepEqual(src *string) bool {

	if p.ApiUrl == src {
		return true
	} else if p.ApiUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ApiUrl, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePluginToolReq) Field8DeepEqual(src *int64) bool {

	if p.ImportModelId == src {
		return true
	} else if p.ImportModelId == nil || src == nil {
		return false
	}
	if *p.ImportModelId != *src {
		return false
	}
	return true
}

type ListPluginToolReq struct {
	Pagination *base.PaginationReq `thrift:"pagination,1,required" frugal:"1,required,base.PaginationReq" json:"pagination"`
	PluginId   *int64              `thrift:"plugin_id,2,optional" frugal:"2,optional,i64" json:"plugin_id,omitempty"`
	ToolIds    []int64             `thrift:"tool_ids,3,optional" frugal:"3,optional,list<i64>" json:"tool_ids,omitempty"`
}

func NewListPluginToolReq() *ListPluginToolReq {
	return &ListPluginToolReq{}
}

func (p *ListPluginToolReq) InitDefault() {
}

var ListPluginToolReq_Pagination_DEFAULT *base.PaginationReq

func (p *ListPluginToolReq) GetPagination() (v *base.PaginationReq) {
	if !p.IsSetPagination() {
		return ListPluginToolReq_Pagination_DEFAULT
	}
	return p.Pagination
}

var ListPluginToolReq_PluginId_DEFAULT int64

func (p *ListPluginToolReq) GetPluginId() (v int64) {
	if !p.IsSetPluginId() {
		return ListPluginToolReq_PluginId_DEFAULT
	}
	return *p.PluginId
}

var ListPluginToolReq_ToolIds_DEFAULT []int64

func (p *ListPluginToolReq) GetToolIds() (v []int64) {
	if !p.IsSetToolIds() {
		return ListPluginToolReq_ToolIds_DEFAULT
	}
	return p.ToolIds
}
func (p *ListPluginToolReq) SetPagination(val *base.PaginationReq) {
	p.Pagination = val
}
func (p *ListPluginToolReq) SetPluginId(val *int64) {
	p.PluginId = val
}
func (p *ListPluginToolReq) SetToolIds(val []int64) {
	p.ToolIds = val
}

var fieldIDToName_ListPluginToolReq = map[int16]string{
	1: "pagination",
	2: "plugin_id",
	3: "tool_ids",
}

func (p *ListPluginToolReq) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *ListPluginToolReq) IsSetPluginId() bool {
	return p.PluginId != nil
}

func (p *ListPluginToolReq) IsSetToolIds() bool {
	return p.ToolIds != nil
}

func (p *ListPluginToolReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPluginToolReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListPluginToolReq[fieldId]))
}

func (p *ListPluginToolReq) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewPaginationReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *ListPluginToolReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PluginId = _field
	return nil
}
func (p *ListPluginToolReq) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolIds = _field
	return nil
}

func (p *ListPluginToolReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPluginToolReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPluginToolReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPluginToolReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPluginId() {
		if err = oprot.WriteFieldBegin("plugin_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PluginId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPluginToolReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolIds() {
		if err = oprot.WriteFieldBegin("tool_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ToolIds)); err != nil {
			return err
		}
		for _, v := range p.ToolIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListPluginToolReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPluginToolReq(%+v)", *p)

}

func (p *ListPluginToolReq) DeepEqual(ano *ListPluginToolReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field2DeepEqual(ano.PluginId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ToolIds) {
		return false
	}
	return true
}

func (p *ListPluginToolReq) Field1DeepEqual(src *base.PaginationReq) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListPluginToolReq) Field2DeepEqual(src *int64) bool {

	if p.PluginId == src {
		return true
	} else if p.PluginId == nil || src == nil {
		return false
	}
	if *p.PluginId != *src {
		return false
	}
	return true
}
func (p *ListPluginToolReq) Field3DeepEqual(src []int64) bool {

	if len(p.ToolIds) != len(src) {
		return false
	}
	for i, v := range p.ToolIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type ListPluginToolResp struct {
	Tools      []*PluginTool        `thrift:"tools,1,required" frugal:"1,required,list<PluginTool>" json:"tools"`
	Pagination *base.PaginationResp `thrift:"pagination,2,required" frugal:"2,required,base.PaginationResp" json:"pagination"`
}

func NewListPluginToolResp() *ListPluginToolResp {
	return &ListPluginToolResp{}
}

func (p *ListPluginToolResp) InitDefault() {
}

func (p *ListPluginToolResp) GetTools() (v []*PluginTool) {
	return p.Tools
}

var ListPluginToolResp_Pagination_DEFAULT *base.PaginationResp

func (p *ListPluginToolResp) GetPagination() (v *base.PaginationResp) {
	if !p.IsSetPagination() {
		return ListPluginToolResp_Pagination_DEFAULT
	}
	return p.Pagination
}
func (p *ListPluginToolResp) SetTools(val []*PluginTool) {
	p.Tools = val
}
func (p *ListPluginToolResp) SetPagination(val *base.PaginationResp) {
	p.Pagination = val
}

var fieldIDToName_ListPluginToolResp = map[int16]string{
	1: "tools",
	2: "pagination",
}

func (p *ListPluginToolResp) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *ListPluginToolResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTools bool = false
	var issetPagination bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTools = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTools {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPagination {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPluginToolResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListPluginToolResp[fieldId]))
}

func (p *ListPluginToolResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PluginTool, 0, size)
	values := make([]PluginTool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tools = _field
	return nil
}
func (p *ListPluginToolResp) ReadField2(iprot thrift.TProtocol) error {
	_field := base.NewPaginationResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}

func (p *ListPluginToolResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPluginToolResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPluginToolResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tools", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tools)); err != nil {
		return err
	}
	for _, v := range p.Tools {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPluginToolResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPluginToolResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPluginToolResp(%+v)", *p)

}

func (p *ListPluginToolResp) DeepEqual(ano *ListPluginToolResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tools) {
		return false
	}
	if !p.Field2DeepEqual(ano.Pagination) {
		return false
	}
	return true
}

func (p *ListPluginToolResp) Field1DeepEqual(src []*PluginTool) bool {

	if len(p.Tools) != len(src) {
		return false
	}
	for i, v := range p.Tools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListPluginToolResp) Field2DeepEqual(src *base.PaginationResp) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}

type CallPluginToolReq struct {
	PluginId int64             `thrift:"plugin_id,1,required" frugal:"1,required,i64" json:"plugin_id"`
	ToolId   int64             `thrift:"tool_id,2,required" frugal:"2,required,i64" json:"tool_id"`
	Secrets  map[string]string `thrift:"secrets,3,optional" frugal:"3,optional,map<string:string>" json:"secrets,omitempty"`
	Request  []byte            `thrift:"request,4,required" frugal:"4,required,binary" json:"request"`
}

func NewCallPluginToolReq() *CallPluginToolReq {
	return &CallPluginToolReq{}
}

func (p *CallPluginToolReq) InitDefault() {
}

func (p *CallPluginToolReq) GetPluginId() (v int64) {
	return p.PluginId
}

func (p *CallPluginToolReq) GetToolId() (v int64) {
	return p.ToolId
}

var CallPluginToolReq_Secrets_DEFAULT map[string]string

func (p *CallPluginToolReq) GetSecrets() (v map[string]string) {
	if !p.IsSetSecrets() {
		return CallPluginToolReq_Secrets_DEFAULT
	}
	return p.Secrets
}

func (p *CallPluginToolReq) GetRequest() (v []byte) {
	return p.Request
}
func (p *CallPluginToolReq) SetPluginId(val int64) {
	p.PluginId = val
}
func (p *CallPluginToolReq) SetToolId(val int64) {
	p.ToolId = val
}
func (p *CallPluginToolReq) SetSecrets(val map[string]string) {
	p.Secrets = val
}
func (p *CallPluginToolReq) SetRequest(val []byte) {
	p.Request = val
}

var fieldIDToName_CallPluginToolReq = map[int16]string{
	1: "plugin_id",
	2: "tool_id",
	3: "secrets",
	4: "request",
}

func (p *CallPluginToolReq) IsSetSecrets() bool {
	return p.Secrets != nil
}

func (p *CallPluginToolReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPluginId bool = false
	var issetToolId bool = false
	var issetRequest bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPluginId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetToolId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetRequest = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPluginId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetToolId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetRequest {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CallPluginToolReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CallPluginToolReq[fieldId]))
}

func (p *CallPluginToolReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PluginId = _field
	return nil
}
func (p *CallPluginToolReq) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ToolId = _field
	return nil
}
func (p *CallPluginToolReq) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Secrets = _field
	return nil
}
func (p *CallPluginToolReq) ReadField4(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Request = _field
	return nil
}

func (p *CallPluginToolReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CallPluginToolReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CallPluginToolReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("plugin_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PluginId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CallPluginToolReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tool_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ToolId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CallPluginToolReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecrets() {
		if err = oprot.WriteFieldBegin("secrets", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Secrets)); err != nil {
			return err
		}
		for k, v := range p.Secrets {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CallPluginToolReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Request)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CallPluginToolReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallPluginToolReq(%+v)", *p)

}

func (p *CallPluginToolReq) DeepEqual(ano *CallPluginToolReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PluginId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ToolId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Secrets) {
		return false
	}
	if !p.Field4DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *CallPluginToolReq) Field1DeepEqual(src int64) bool {

	if p.PluginId != src {
		return false
	}
	return true
}
func (p *CallPluginToolReq) Field2DeepEqual(src int64) bool {

	if p.ToolId != src {
		return false
	}
	return true
}
func (p *CallPluginToolReq) Field3DeepEqual(src map[string]string) bool {

	if len(p.Secrets) != len(src) {
		return false
	}
	for k, v := range p.Secrets {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CallPluginToolReq) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.Request, src) != 0 {
		return false
	}
	return true
}

type CallPluginToolResp struct {
	Code     int64  `thrift:"code,1,required" frugal:"1,required,i64" json:"code"`
	Msg      string `thrift:"msg,2,required" frugal:"2,required,string" json:"msg"`
	Response []byte `thrift:"response,3,required" frugal:"3,required,binary" json:"response"`
}

func NewCallPluginToolResp() *CallPluginToolResp {
	return &CallPluginToolResp{}
}

func (p *CallPluginToolResp) InitDefault() {
}

func (p *CallPluginToolResp) GetCode() (v int64) {
	return p.Code
}

func (p *CallPluginToolResp) GetMsg() (v string) {
	return p.Msg
}

func (p *CallPluginToolResp) GetResponse() (v []byte) {
	return p.Response
}
func (p *CallPluginToolResp) SetCode(val int64) {
	p.Code = val
}
func (p *CallPluginToolResp) SetMsg(val string) {
	p.Msg = val
}
func (p *CallPluginToolResp) SetResponse(val []byte) {
	p.Response = val
}

var fieldIDToName_CallPluginToolResp = map[int16]string{
	1: "code",
	2: "msg",
	3: "response",
}

func (p *CallPluginToolResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCode bool = false
	var issetMsg bool = false
	var issetResponse bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetResponse = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMsg {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetResponse {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CallPluginToolResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CallPluginToolResp[fieldId]))
}

func (p *CallPluginToolResp) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Code = _field
	return nil
}
func (p *CallPluginToolResp) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Msg = _field
	return nil
}
func (p *CallPluginToolResp) ReadField3(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Response = _field
	return nil
}

func (p *CallPluginToolResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CallPluginToolResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CallPluginToolResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CallPluginToolResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CallPluginToolResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("response", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Response)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CallPluginToolResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallPluginToolResp(%+v)", *p)

}

func (p *CallPluginToolResp) DeepEqual(ano *CallPluginToolResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Response) {
		return false
	}
	return true
}

func (p *CallPluginToolResp) Field1DeepEqual(src int64) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *CallPluginToolResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}
func (p *CallPluginToolResp) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.Response, src) != 0 {
		return false
	}
	return true
}

type TestPluginToolResp struct {
	Code     bool   `thrift:"code,1,required" frugal:"1,required,bool" json:"code"`
	Msg      string `thrift:"msg,2,required" frugal:"2,required,string" json:"msg"`
	Response []byte `thrift:"response,3,required" frugal:"3,required,binary" json:"response"`
}

func NewTestPluginToolResp() *TestPluginToolResp {
	return &TestPluginToolResp{}
}

func (p *TestPluginToolResp) InitDefault() {
}

func (p *TestPluginToolResp) GetCode() (v bool) {
	return p.Code
}

func (p *TestPluginToolResp) GetMsg() (v string) {
	return p.Msg
}

func (p *TestPluginToolResp) GetResponse() (v []byte) {
	return p.Response
}
func (p *TestPluginToolResp) SetCode(val bool) {
	p.Code = val
}
func (p *TestPluginToolResp) SetMsg(val string) {
	p.Msg = val
}
func (p *TestPluginToolResp) SetResponse(val []byte) {
	p.Response = val
}

var fieldIDToName_TestPluginToolResp = map[int16]string{
	1: "code",
	2: "msg",
	3: "response",
}

func (p *TestPluginToolResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCode bool = false
	var issetMsg bool = false
	var issetResponse bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetResponse = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMsg {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetResponse {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TestPluginToolResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TestPluginToolResp[fieldId]))
}

func (p *TestPluginToolResp) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Code = _field
	return nil
}
func (p *TestPluginToolResp) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Msg = _field
	return nil
}
func (p *TestPluginToolResp) ReadField3(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Response = _field
	return nil
}

func (p *TestPluginToolResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TestPluginToolResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TestPluginToolResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TestPluginToolResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TestPluginToolResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("response", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Response)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TestPluginToolResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestPluginToolResp(%+v)", *p)

}

func (p *TestPluginToolResp) DeepEqual(ano *TestPluginToolResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Response) {
		return false
	}
	return true
}

func (p *TestPluginToolResp) Field1DeepEqual(src bool) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *TestPluginToolResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}
func (p *TestPluginToolResp) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.Response, src) != 0 {
		return false
	}
	return true
}

type PluginService interface {
	CreatePlugin(ctx context.Context, req *CreatePluginReq) (r *base.Empty, err error)

	UpdatePlugin(ctx context.Context, req *UpdatePluginReq) (r *base.Empty, err error)

	DeletePlugin(ctx context.Context, req *base.IDReq) (r *base.Empty, err error)

	GetPluginByID(ctx context.Context, req *base.IDReq) (r *Plugin, err error)

	ListPlugin(ctx context.Context, req *ListPluginReq) (r *ListPluginResp, err error)

	PublishPlugin(ctx context.Context, req *base.IDReq) (r *base.Empty, err error)

	CreateTool(ctx context.Context, req *CreatePluginToolReq) (r *base.Empty, err error)

	UpdateTool(ctx context.Context, req *UpdatePluginToolReq) (r *base.Empty, err error)

	DeleteTool(ctx context.Context, req *base.IDReq) (r *base.Empty, err error)

	GetToolByID(ctx context.Context, req *base.IDReq) (r *PluginTool, err error)

	ListPluginTool(ctx context.Context, req *ListPluginToolReq) (r *ListPluginToolResp, err error)

	ListPluginLabel(ctx context.Context, req *ListPluginLabelReq) (r *ListPluginLabelResp, err error)

	CallPluginTool(ctx context.Context, req *CallPluginToolReq) (r *CallPluginToolResp, err error)

	TestPluginTool(ctx context.Context, req *CallPluginToolReq) (r *TestPluginToolResp, err error)
}

type PluginServiceCreatePluginArgs struct {
	Req *CreatePluginReq `thrift:"req,1" frugal:"1,default,CreatePluginReq" json:"req"`
}

func NewPluginServiceCreatePluginArgs() *PluginServiceCreatePluginArgs {
	return &PluginServiceCreatePluginArgs{}
}

func (p *PluginServiceCreatePluginArgs) InitDefault() {
}

var PluginServiceCreatePluginArgs_Req_DEFAULT *CreatePluginReq

func (p *PluginServiceCreatePluginArgs) GetReq() (v *CreatePluginReq) {
	if !p.IsSetReq() {
		return PluginServiceCreatePluginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceCreatePluginArgs) SetReq(val *CreatePluginReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceCreatePluginArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceCreatePluginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceCreatePluginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceCreatePluginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceCreatePluginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreatePluginReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceCreatePluginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePlugin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceCreatePluginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceCreatePluginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceCreatePluginArgs(%+v)", *p)

}

func (p *PluginServiceCreatePluginArgs) DeepEqual(ano *PluginServiceCreatePluginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceCreatePluginArgs) Field1DeepEqual(src *CreatePluginReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceCreatePluginResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewPluginServiceCreatePluginResult() *PluginServiceCreatePluginResult {
	return &PluginServiceCreatePluginResult{}
}

func (p *PluginServiceCreatePluginResult) InitDefault() {
}

var PluginServiceCreatePluginResult_Success_DEFAULT *base.Empty

func (p *PluginServiceCreatePluginResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return PluginServiceCreatePluginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceCreatePluginResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_PluginServiceCreatePluginResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceCreatePluginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceCreatePluginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceCreatePluginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceCreatePluginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceCreatePluginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePlugin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceCreatePluginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceCreatePluginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceCreatePluginResult(%+v)", *p)

}

func (p *PluginServiceCreatePluginResult) DeepEqual(ano *PluginServiceCreatePluginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceCreatePluginResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceUpdatePluginArgs struct {
	Req *UpdatePluginReq `thrift:"req,1" frugal:"1,default,UpdatePluginReq" json:"req"`
}

func NewPluginServiceUpdatePluginArgs() *PluginServiceUpdatePluginArgs {
	return &PluginServiceUpdatePluginArgs{}
}

func (p *PluginServiceUpdatePluginArgs) InitDefault() {
}

var PluginServiceUpdatePluginArgs_Req_DEFAULT *UpdatePluginReq

func (p *PluginServiceUpdatePluginArgs) GetReq() (v *UpdatePluginReq) {
	if !p.IsSetReq() {
		return PluginServiceUpdatePluginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceUpdatePluginArgs) SetReq(val *UpdatePluginReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceUpdatePluginArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceUpdatePluginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceUpdatePluginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceUpdatePluginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceUpdatePluginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdatePluginReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceUpdatePluginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePlugin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceUpdatePluginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceUpdatePluginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceUpdatePluginArgs(%+v)", *p)

}

func (p *PluginServiceUpdatePluginArgs) DeepEqual(ano *PluginServiceUpdatePluginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceUpdatePluginArgs) Field1DeepEqual(src *UpdatePluginReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceUpdatePluginResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewPluginServiceUpdatePluginResult() *PluginServiceUpdatePluginResult {
	return &PluginServiceUpdatePluginResult{}
}

func (p *PluginServiceUpdatePluginResult) InitDefault() {
}

var PluginServiceUpdatePluginResult_Success_DEFAULT *base.Empty

func (p *PluginServiceUpdatePluginResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return PluginServiceUpdatePluginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceUpdatePluginResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_PluginServiceUpdatePluginResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceUpdatePluginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceUpdatePluginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceUpdatePluginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceUpdatePluginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceUpdatePluginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePlugin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceUpdatePluginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceUpdatePluginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceUpdatePluginResult(%+v)", *p)

}

func (p *PluginServiceUpdatePluginResult) DeepEqual(ano *PluginServiceUpdatePluginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceUpdatePluginResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceDeletePluginArgs struct {
	Req *base.IDReq `thrift:"req,1" frugal:"1,default,base.IDReq" json:"req"`
}

func NewPluginServiceDeletePluginArgs() *PluginServiceDeletePluginArgs {
	return &PluginServiceDeletePluginArgs{}
}

func (p *PluginServiceDeletePluginArgs) InitDefault() {
}

var PluginServiceDeletePluginArgs_Req_DEFAULT *base.IDReq

func (p *PluginServiceDeletePluginArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return PluginServiceDeletePluginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceDeletePluginArgs) SetReq(val *base.IDReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceDeletePluginArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceDeletePluginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceDeletePluginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceDeletePluginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceDeletePluginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceDeletePluginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePlugin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceDeletePluginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceDeletePluginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceDeletePluginArgs(%+v)", *p)

}

func (p *PluginServiceDeletePluginArgs) DeepEqual(ano *PluginServiceDeletePluginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceDeletePluginArgs) Field1DeepEqual(src *base.IDReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceDeletePluginResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewPluginServiceDeletePluginResult() *PluginServiceDeletePluginResult {
	return &PluginServiceDeletePluginResult{}
}

func (p *PluginServiceDeletePluginResult) InitDefault() {
}

var PluginServiceDeletePluginResult_Success_DEFAULT *base.Empty

func (p *PluginServiceDeletePluginResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return PluginServiceDeletePluginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceDeletePluginResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_PluginServiceDeletePluginResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceDeletePluginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceDeletePluginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceDeletePluginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceDeletePluginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceDeletePluginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePlugin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceDeletePluginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceDeletePluginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceDeletePluginResult(%+v)", *p)

}

func (p *PluginServiceDeletePluginResult) DeepEqual(ano *PluginServiceDeletePluginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceDeletePluginResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceGetPluginByIDArgs struct {
	Req *base.IDReq `thrift:"req,1" frugal:"1,default,base.IDReq" json:"req"`
}

func NewPluginServiceGetPluginByIDArgs() *PluginServiceGetPluginByIDArgs {
	return &PluginServiceGetPluginByIDArgs{}
}

func (p *PluginServiceGetPluginByIDArgs) InitDefault() {
}

var PluginServiceGetPluginByIDArgs_Req_DEFAULT *base.IDReq

func (p *PluginServiceGetPluginByIDArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return PluginServiceGetPluginByIDArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceGetPluginByIDArgs) SetReq(val *base.IDReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceGetPluginByIDArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceGetPluginByIDArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceGetPluginByIDArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceGetPluginByIDArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceGetPluginByIDArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceGetPluginByIDArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPluginByID_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceGetPluginByIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceGetPluginByIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceGetPluginByIDArgs(%+v)", *p)

}

func (p *PluginServiceGetPluginByIDArgs) DeepEqual(ano *PluginServiceGetPluginByIDArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceGetPluginByIDArgs) Field1DeepEqual(src *base.IDReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceGetPluginByIDResult struct {
	Success *Plugin `thrift:"success,0,optional" frugal:"0,optional,Plugin" json:"success,omitempty"`
}

func NewPluginServiceGetPluginByIDResult() *PluginServiceGetPluginByIDResult {
	return &PluginServiceGetPluginByIDResult{}
}

func (p *PluginServiceGetPluginByIDResult) InitDefault() {
}

var PluginServiceGetPluginByIDResult_Success_DEFAULT *Plugin

func (p *PluginServiceGetPluginByIDResult) GetSuccess() (v *Plugin) {
	if !p.IsSetSuccess() {
		return PluginServiceGetPluginByIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceGetPluginByIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*Plugin)
}

var fieldIDToName_PluginServiceGetPluginByIDResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceGetPluginByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceGetPluginByIDResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceGetPluginByIDResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceGetPluginByIDResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewPlugin()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceGetPluginByIDResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPluginByID_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceGetPluginByIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceGetPluginByIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceGetPluginByIDResult(%+v)", *p)

}

func (p *PluginServiceGetPluginByIDResult) DeepEqual(ano *PluginServiceGetPluginByIDResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceGetPluginByIDResult) Field0DeepEqual(src *Plugin) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceListPluginArgs struct {
	Req *ListPluginReq `thrift:"req,1" frugal:"1,default,ListPluginReq" json:"req"`
}

func NewPluginServiceListPluginArgs() *PluginServiceListPluginArgs {
	return &PluginServiceListPluginArgs{}
}

func (p *PluginServiceListPluginArgs) InitDefault() {
}

var PluginServiceListPluginArgs_Req_DEFAULT *ListPluginReq

func (p *PluginServiceListPluginArgs) GetReq() (v *ListPluginReq) {
	if !p.IsSetReq() {
		return PluginServiceListPluginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceListPluginArgs) SetReq(val *ListPluginReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceListPluginArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceListPluginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceListPluginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceListPluginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceListPluginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListPluginReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceListPluginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPlugin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceListPluginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceListPluginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceListPluginArgs(%+v)", *p)

}

func (p *PluginServiceListPluginArgs) DeepEqual(ano *PluginServiceListPluginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceListPluginArgs) Field1DeepEqual(src *ListPluginReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceListPluginResult struct {
	Success *ListPluginResp `thrift:"success,0,optional" frugal:"0,optional,ListPluginResp" json:"success,omitempty"`
}

func NewPluginServiceListPluginResult() *PluginServiceListPluginResult {
	return &PluginServiceListPluginResult{}
}

func (p *PluginServiceListPluginResult) InitDefault() {
}

var PluginServiceListPluginResult_Success_DEFAULT *ListPluginResp

func (p *PluginServiceListPluginResult) GetSuccess() (v *ListPluginResp) {
	if !p.IsSetSuccess() {
		return PluginServiceListPluginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceListPluginResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListPluginResp)
}

var fieldIDToName_PluginServiceListPluginResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceListPluginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceListPluginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceListPluginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceListPluginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListPluginResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceListPluginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPlugin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceListPluginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceListPluginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceListPluginResult(%+v)", *p)

}

func (p *PluginServiceListPluginResult) DeepEqual(ano *PluginServiceListPluginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceListPluginResult) Field0DeepEqual(src *ListPluginResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServicePublishPluginArgs struct {
	Req *base.IDReq `thrift:"req,1" frugal:"1,default,base.IDReq" json:"req"`
}

func NewPluginServicePublishPluginArgs() *PluginServicePublishPluginArgs {
	return &PluginServicePublishPluginArgs{}
}

func (p *PluginServicePublishPluginArgs) InitDefault() {
}

var PluginServicePublishPluginArgs_Req_DEFAULT *base.IDReq

func (p *PluginServicePublishPluginArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return PluginServicePublishPluginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServicePublishPluginArgs) SetReq(val *base.IDReq) {
	p.Req = val
}

var fieldIDToName_PluginServicePublishPluginArgs = map[int16]string{
	1: "req",
}

func (p *PluginServicePublishPluginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServicePublishPluginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServicePublishPluginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServicePublishPluginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServicePublishPluginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishPlugin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServicePublishPluginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServicePublishPluginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServicePublishPluginArgs(%+v)", *p)

}

func (p *PluginServicePublishPluginArgs) DeepEqual(ano *PluginServicePublishPluginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServicePublishPluginArgs) Field1DeepEqual(src *base.IDReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServicePublishPluginResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewPluginServicePublishPluginResult() *PluginServicePublishPluginResult {
	return &PluginServicePublishPluginResult{}
}

func (p *PluginServicePublishPluginResult) InitDefault() {
}

var PluginServicePublishPluginResult_Success_DEFAULT *base.Empty

func (p *PluginServicePublishPluginResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return PluginServicePublishPluginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServicePublishPluginResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_PluginServicePublishPluginResult = map[int16]string{
	0: "success",
}

func (p *PluginServicePublishPluginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServicePublishPluginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServicePublishPluginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServicePublishPluginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServicePublishPluginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishPlugin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServicePublishPluginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServicePublishPluginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServicePublishPluginResult(%+v)", *p)

}

func (p *PluginServicePublishPluginResult) DeepEqual(ano *PluginServicePublishPluginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServicePublishPluginResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceCreateToolArgs struct {
	Req *CreatePluginToolReq `thrift:"req,1" frugal:"1,default,CreatePluginToolReq" json:"req"`
}

func NewPluginServiceCreateToolArgs() *PluginServiceCreateToolArgs {
	return &PluginServiceCreateToolArgs{}
}

func (p *PluginServiceCreateToolArgs) InitDefault() {
}

var PluginServiceCreateToolArgs_Req_DEFAULT *CreatePluginToolReq

func (p *PluginServiceCreateToolArgs) GetReq() (v *CreatePluginToolReq) {
	if !p.IsSetReq() {
		return PluginServiceCreateToolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceCreateToolArgs) SetReq(val *CreatePluginToolReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceCreateToolArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceCreateToolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceCreateToolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceCreateToolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceCreateToolArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreatePluginToolReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceCreateToolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceCreateToolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceCreateToolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceCreateToolArgs(%+v)", *p)

}

func (p *PluginServiceCreateToolArgs) DeepEqual(ano *PluginServiceCreateToolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceCreateToolArgs) Field1DeepEqual(src *CreatePluginToolReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceCreateToolResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewPluginServiceCreateToolResult() *PluginServiceCreateToolResult {
	return &PluginServiceCreateToolResult{}
}

func (p *PluginServiceCreateToolResult) InitDefault() {
}

var PluginServiceCreateToolResult_Success_DEFAULT *base.Empty

func (p *PluginServiceCreateToolResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return PluginServiceCreateToolResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceCreateToolResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_PluginServiceCreateToolResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceCreateToolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceCreateToolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceCreateToolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceCreateToolResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceCreateToolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceCreateToolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceCreateToolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceCreateToolResult(%+v)", *p)

}

func (p *PluginServiceCreateToolResult) DeepEqual(ano *PluginServiceCreateToolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceCreateToolResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceUpdateToolArgs struct {
	Req *UpdatePluginToolReq `thrift:"req,1" frugal:"1,default,UpdatePluginToolReq" json:"req"`
}

func NewPluginServiceUpdateToolArgs() *PluginServiceUpdateToolArgs {
	return &PluginServiceUpdateToolArgs{}
}

func (p *PluginServiceUpdateToolArgs) InitDefault() {
}

var PluginServiceUpdateToolArgs_Req_DEFAULT *UpdatePluginToolReq

func (p *PluginServiceUpdateToolArgs) GetReq() (v *UpdatePluginToolReq) {
	if !p.IsSetReq() {
		return PluginServiceUpdateToolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceUpdateToolArgs) SetReq(val *UpdatePluginToolReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceUpdateToolArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceUpdateToolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceUpdateToolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceUpdateToolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceUpdateToolArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdatePluginToolReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceUpdateToolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceUpdateToolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceUpdateToolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceUpdateToolArgs(%+v)", *p)

}

func (p *PluginServiceUpdateToolArgs) DeepEqual(ano *PluginServiceUpdateToolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceUpdateToolArgs) Field1DeepEqual(src *UpdatePluginToolReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceUpdateToolResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewPluginServiceUpdateToolResult() *PluginServiceUpdateToolResult {
	return &PluginServiceUpdateToolResult{}
}

func (p *PluginServiceUpdateToolResult) InitDefault() {
}

var PluginServiceUpdateToolResult_Success_DEFAULT *base.Empty

func (p *PluginServiceUpdateToolResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return PluginServiceUpdateToolResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceUpdateToolResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_PluginServiceUpdateToolResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceUpdateToolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceUpdateToolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceUpdateToolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceUpdateToolResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceUpdateToolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceUpdateToolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceUpdateToolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceUpdateToolResult(%+v)", *p)

}

func (p *PluginServiceUpdateToolResult) DeepEqual(ano *PluginServiceUpdateToolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceUpdateToolResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceDeleteToolArgs struct {
	Req *base.IDReq `thrift:"req,1" frugal:"1,default,base.IDReq" json:"req"`
}

func NewPluginServiceDeleteToolArgs() *PluginServiceDeleteToolArgs {
	return &PluginServiceDeleteToolArgs{}
}

func (p *PluginServiceDeleteToolArgs) InitDefault() {
}

var PluginServiceDeleteToolArgs_Req_DEFAULT *base.IDReq

func (p *PluginServiceDeleteToolArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return PluginServiceDeleteToolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceDeleteToolArgs) SetReq(val *base.IDReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceDeleteToolArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceDeleteToolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceDeleteToolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceDeleteToolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceDeleteToolArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceDeleteToolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceDeleteToolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceDeleteToolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceDeleteToolArgs(%+v)", *p)

}

func (p *PluginServiceDeleteToolArgs) DeepEqual(ano *PluginServiceDeleteToolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceDeleteToolArgs) Field1DeepEqual(src *base.IDReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceDeleteToolResult struct {
	Success *base.Empty `thrift:"success,0,optional" frugal:"0,optional,base.Empty" json:"success,omitempty"`
}

func NewPluginServiceDeleteToolResult() *PluginServiceDeleteToolResult {
	return &PluginServiceDeleteToolResult{}
}

func (p *PluginServiceDeleteToolResult) InitDefault() {
}

var PluginServiceDeleteToolResult_Success_DEFAULT *base.Empty

func (p *PluginServiceDeleteToolResult) GetSuccess() (v *base.Empty) {
	if !p.IsSetSuccess() {
		return PluginServiceDeleteToolResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceDeleteToolResult) SetSuccess(x interface{}) {
	p.Success = x.(*base.Empty)
}

var fieldIDToName_PluginServiceDeleteToolResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceDeleteToolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceDeleteToolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceDeleteToolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceDeleteToolResult) ReadField0(iprot thrift.TProtocol) error {
	_field := base.NewEmpty()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceDeleteToolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceDeleteToolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceDeleteToolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceDeleteToolResult(%+v)", *p)

}

func (p *PluginServiceDeleteToolResult) DeepEqual(ano *PluginServiceDeleteToolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceDeleteToolResult) Field0DeepEqual(src *base.Empty) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceGetToolByIDArgs struct {
	Req *base.IDReq `thrift:"req,1" frugal:"1,default,base.IDReq" json:"req"`
}

func NewPluginServiceGetToolByIDArgs() *PluginServiceGetToolByIDArgs {
	return &PluginServiceGetToolByIDArgs{}
}

func (p *PluginServiceGetToolByIDArgs) InitDefault() {
}

var PluginServiceGetToolByIDArgs_Req_DEFAULT *base.IDReq

func (p *PluginServiceGetToolByIDArgs) GetReq() (v *base.IDReq) {
	if !p.IsSetReq() {
		return PluginServiceGetToolByIDArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceGetToolByIDArgs) SetReq(val *base.IDReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceGetToolByIDArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceGetToolByIDArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceGetToolByIDArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceGetToolByIDArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceGetToolByIDArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewIDReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceGetToolByIDArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetToolByID_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceGetToolByIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceGetToolByIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceGetToolByIDArgs(%+v)", *p)

}

func (p *PluginServiceGetToolByIDArgs) DeepEqual(ano *PluginServiceGetToolByIDArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceGetToolByIDArgs) Field1DeepEqual(src *base.IDReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceGetToolByIDResult struct {
	Success *PluginTool `thrift:"success,0,optional" frugal:"0,optional,PluginTool" json:"success,omitempty"`
}

func NewPluginServiceGetToolByIDResult() *PluginServiceGetToolByIDResult {
	return &PluginServiceGetToolByIDResult{}
}

func (p *PluginServiceGetToolByIDResult) InitDefault() {
}

var PluginServiceGetToolByIDResult_Success_DEFAULT *PluginTool

func (p *PluginServiceGetToolByIDResult) GetSuccess() (v *PluginTool) {
	if !p.IsSetSuccess() {
		return PluginServiceGetToolByIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceGetToolByIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*PluginTool)
}

var fieldIDToName_PluginServiceGetToolByIDResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceGetToolByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceGetToolByIDResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceGetToolByIDResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceGetToolByIDResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewPluginTool()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceGetToolByIDResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetToolByID_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceGetToolByIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceGetToolByIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceGetToolByIDResult(%+v)", *p)

}

func (p *PluginServiceGetToolByIDResult) DeepEqual(ano *PluginServiceGetToolByIDResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceGetToolByIDResult) Field0DeepEqual(src *PluginTool) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceListPluginToolArgs struct {
	Req *ListPluginToolReq `thrift:"req,1" frugal:"1,default,ListPluginToolReq" json:"req"`
}

func NewPluginServiceListPluginToolArgs() *PluginServiceListPluginToolArgs {
	return &PluginServiceListPluginToolArgs{}
}

func (p *PluginServiceListPluginToolArgs) InitDefault() {
}

var PluginServiceListPluginToolArgs_Req_DEFAULT *ListPluginToolReq

func (p *PluginServiceListPluginToolArgs) GetReq() (v *ListPluginToolReq) {
	if !p.IsSetReq() {
		return PluginServiceListPluginToolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceListPluginToolArgs) SetReq(val *ListPluginToolReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceListPluginToolArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceListPluginToolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceListPluginToolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceListPluginToolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceListPluginToolArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListPluginToolReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceListPluginToolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPluginTool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceListPluginToolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceListPluginToolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceListPluginToolArgs(%+v)", *p)

}

func (p *PluginServiceListPluginToolArgs) DeepEqual(ano *PluginServiceListPluginToolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceListPluginToolArgs) Field1DeepEqual(src *ListPluginToolReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceListPluginToolResult struct {
	Success *ListPluginToolResp `thrift:"success,0,optional" frugal:"0,optional,ListPluginToolResp" json:"success,omitempty"`
}

func NewPluginServiceListPluginToolResult() *PluginServiceListPluginToolResult {
	return &PluginServiceListPluginToolResult{}
}

func (p *PluginServiceListPluginToolResult) InitDefault() {
}

var PluginServiceListPluginToolResult_Success_DEFAULT *ListPluginToolResp

func (p *PluginServiceListPluginToolResult) GetSuccess() (v *ListPluginToolResp) {
	if !p.IsSetSuccess() {
		return PluginServiceListPluginToolResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceListPluginToolResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListPluginToolResp)
}

var fieldIDToName_PluginServiceListPluginToolResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceListPluginToolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceListPluginToolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceListPluginToolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceListPluginToolResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListPluginToolResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceListPluginToolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPluginTool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceListPluginToolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceListPluginToolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceListPluginToolResult(%+v)", *p)

}

func (p *PluginServiceListPluginToolResult) DeepEqual(ano *PluginServiceListPluginToolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceListPluginToolResult) Field0DeepEqual(src *ListPluginToolResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceListPluginLabelArgs struct {
	Req *ListPluginLabelReq `thrift:"req,1" frugal:"1,default,ListPluginLabelReq" json:"req"`
}

func NewPluginServiceListPluginLabelArgs() *PluginServiceListPluginLabelArgs {
	return &PluginServiceListPluginLabelArgs{}
}

func (p *PluginServiceListPluginLabelArgs) InitDefault() {
}

var PluginServiceListPluginLabelArgs_Req_DEFAULT *ListPluginLabelReq

func (p *PluginServiceListPluginLabelArgs) GetReq() (v *ListPluginLabelReq) {
	if !p.IsSetReq() {
		return PluginServiceListPluginLabelArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceListPluginLabelArgs) SetReq(val *ListPluginLabelReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceListPluginLabelArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceListPluginLabelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceListPluginLabelArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceListPluginLabelArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceListPluginLabelArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListPluginLabelReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceListPluginLabelArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPluginLabel_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceListPluginLabelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceListPluginLabelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceListPluginLabelArgs(%+v)", *p)

}

func (p *PluginServiceListPluginLabelArgs) DeepEqual(ano *PluginServiceListPluginLabelArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceListPluginLabelArgs) Field1DeepEqual(src *ListPluginLabelReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceListPluginLabelResult struct {
	Success *ListPluginLabelResp `thrift:"success,0,optional" frugal:"0,optional,ListPluginLabelResp" json:"success,omitempty"`
}

func NewPluginServiceListPluginLabelResult() *PluginServiceListPluginLabelResult {
	return &PluginServiceListPluginLabelResult{}
}

func (p *PluginServiceListPluginLabelResult) InitDefault() {
}

var PluginServiceListPluginLabelResult_Success_DEFAULT *ListPluginLabelResp

func (p *PluginServiceListPluginLabelResult) GetSuccess() (v *ListPluginLabelResp) {
	if !p.IsSetSuccess() {
		return PluginServiceListPluginLabelResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceListPluginLabelResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListPluginLabelResp)
}

var fieldIDToName_PluginServiceListPluginLabelResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceListPluginLabelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceListPluginLabelResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceListPluginLabelResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceListPluginLabelResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListPluginLabelResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceListPluginLabelResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPluginLabel_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceListPluginLabelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceListPluginLabelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceListPluginLabelResult(%+v)", *p)

}

func (p *PluginServiceListPluginLabelResult) DeepEqual(ano *PluginServiceListPluginLabelResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceListPluginLabelResult) Field0DeepEqual(src *ListPluginLabelResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceCallPluginToolArgs struct {
	Req *CallPluginToolReq `thrift:"req,1" frugal:"1,default,CallPluginToolReq" json:"req"`
}

func NewPluginServiceCallPluginToolArgs() *PluginServiceCallPluginToolArgs {
	return &PluginServiceCallPluginToolArgs{}
}

func (p *PluginServiceCallPluginToolArgs) InitDefault() {
}

var PluginServiceCallPluginToolArgs_Req_DEFAULT *CallPluginToolReq

func (p *PluginServiceCallPluginToolArgs) GetReq() (v *CallPluginToolReq) {
	if !p.IsSetReq() {
		return PluginServiceCallPluginToolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceCallPluginToolArgs) SetReq(val *CallPluginToolReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceCallPluginToolArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceCallPluginToolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceCallPluginToolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceCallPluginToolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceCallPluginToolArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCallPluginToolReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceCallPluginToolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CallPluginTool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceCallPluginToolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceCallPluginToolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceCallPluginToolArgs(%+v)", *p)

}

func (p *PluginServiceCallPluginToolArgs) DeepEqual(ano *PluginServiceCallPluginToolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceCallPluginToolArgs) Field1DeepEqual(src *CallPluginToolReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceCallPluginToolResult struct {
	Success *CallPluginToolResp `thrift:"success,0,optional" frugal:"0,optional,CallPluginToolResp" json:"success,omitempty"`
}

func NewPluginServiceCallPluginToolResult() *PluginServiceCallPluginToolResult {
	return &PluginServiceCallPluginToolResult{}
}

func (p *PluginServiceCallPluginToolResult) InitDefault() {
}

var PluginServiceCallPluginToolResult_Success_DEFAULT *CallPluginToolResp

func (p *PluginServiceCallPluginToolResult) GetSuccess() (v *CallPluginToolResp) {
	if !p.IsSetSuccess() {
		return PluginServiceCallPluginToolResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceCallPluginToolResult) SetSuccess(x interface{}) {
	p.Success = x.(*CallPluginToolResp)
}

var fieldIDToName_PluginServiceCallPluginToolResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceCallPluginToolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceCallPluginToolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceCallPluginToolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceCallPluginToolResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCallPluginToolResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceCallPluginToolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CallPluginTool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceCallPluginToolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceCallPluginToolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceCallPluginToolResult(%+v)", *p)

}

func (p *PluginServiceCallPluginToolResult) DeepEqual(ano *PluginServiceCallPluginToolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceCallPluginToolResult) Field0DeepEqual(src *CallPluginToolResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceTestPluginToolArgs struct {
	Req *CallPluginToolReq `thrift:"req,1" frugal:"1,default,CallPluginToolReq" json:"req"`
}

func NewPluginServiceTestPluginToolArgs() *PluginServiceTestPluginToolArgs {
	return &PluginServiceTestPluginToolArgs{}
}

func (p *PluginServiceTestPluginToolArgs) InitDefault() {
}

var PluginServiceTestPluginToolArgs_Req_DEFAULT *CallPluginToolReq

func (p *PluginServiceTestPluginToolArgs) GetReq() (v *CallPluginToolReq) {
	if !p.IsSetReq() {
		return PluginServiceTestPluginToolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PluginServiceTestPluginToolArgs) SetReq(val *CallPluginToolReq) {
	p.Req = val
}

var fieldIDToName_PluginServiceTestPluginToolArgs = map[int16]string{
	1: "req",
}

func (p *PluginServiceTestPluginToolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PluginServiceTestPluginToolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceTestPluginToolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceTestPluginToolArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCallPluginToolReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PluginServiceTestPluginToolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TestPluginTool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceTestPluginToolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PluginServiceTestPluginToolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceTestPluginToolArgs(%+v)", *p)

}

func (p *PluginServiceTestPluginToolArgs) DeepEqual(ano *PluginServiceTestPluginToolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PluginServiceTestPluginToolArgs) Field1DeepEqual(src *CallPluginToolReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PluginServiceTestPluginToolResult struct {
	Success *TestPluginToolResp `thrift:"success,0,optional" frugal:"0,optional,TestPluginToolResp" json:"success,omitempty"`
}

func NewPluginServiceTestPluginToolResult() *PluginServiceTestPluginToolResult {
	return &PluginServiceTestPluginToolResult{}
}

func (p *PluginServiceTestPluginToolResult) InitDefault() {
}

var PluginServiceTestPluginToolResult_Success_DEFAULT *TestPluginToolResp

func (p *PluginServiceTestPluginToolResult) GetSuccess() (v *TestPluginToolResp) {
	if !p.IsSetSuccess() {
		return PluginServiceTestPluginToolResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PluginServiceTestPluginToolResult) SetSuccess(x interface{}) {
	p.Success = x.(*TestPluginToolResp)
}

var fieldIDToName_PluginServiceTestPluginToolResult = map[int16]string{
	0: "success",
}

func (p *PluginServiceTestPluginToolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PluginServiceTestPluginToolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PluginServiceTestPluginToolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PluginServiceTestPluginToolResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTestPluginToolResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PluginServiceTestPluginToolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TestPluginTool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PluginServiceTestPluginToolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PluginServiceTestPluginToolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PluginServiceTestPluginToolResult(%+v)", *p)

}

func (p *PluginServiceTestPluginToolResult) DeepEqual(ano *PluginServiceTestPluginToolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PluginServiceTestPluginToolResult) Field0DeepEqual(src *TestPluginToolResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

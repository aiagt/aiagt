// Code generated by Kitex v0.10.0. DO NOT EDIT.

package chatservice

import (
	"context"
	"errors"
	"fmt"
	base "github.com/aiagt/aiagt/kitex_gen/base"
	chatsvc "github.com/aiagt/aiagt/kitex_gen/chatsvc"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Chat": kitex.NewMethodInfo(
		chatHandler,
		newChatServiceChatArgs,
		newChatServiceChatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"UpdateMessage": kitex.NewMethodInfo(
		updateMessageHandler,
		newChatServiceUpdateMessageArgs,
		newChatServiceUpdateMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteMessage": kitex.NewMethodInfo(
		deleteMessageHandler,
		newChatServiceDeleteMessageArgs,
		newChatServiceDeleteMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListMessage": kitex.NewMethodInfo(
		listMessageHandler,
		newChatServiceListMessageArgs,
		newChatServiceListMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateConversation": kitex.NewMethodInfo(
		updateConversationHandler,
		newChatServiceUpdateConversationArgs,
		newChatServiceUpdateConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteConversation": kitex.NewMethodInfo(
		deleteConversationHandler,
		newChatServiceDeleteConversationArgs,
		newChatServiceDeleteConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetConversationByID": kitex.NewMethodInfo(
		getConversationByIDHandler,
		newChatServiceGetConversationByIDArgs,
		newChatServiceGetConversationByIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListConversation": kitex.NewMethodInfo(
		listConversationHandler,
		newChatServiceListConversationArgs,
		newChatServiceListConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	chatServiceServiceInfo                = NewServiceInfo()
	chatServiceServiceInfoForClient       = NewServiceInfoForClient()
	chatServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return chatServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return chatServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return chatServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ChatService"
	handlerType := (*chatsvc.ChatService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "chatsvc",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.0",
		Extra:           extra,
	}
	return svcInfo
}

func chatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("ChatService.Chat is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &chatServiceChatServer{st.Stream}
	req := new(chatsvc.ChatReq)
	if err := st.Stream.RecvMsg(req); err != nil {
		return err
	}
	return handler.(chatsvc.ChatService).Chat(req, stream)
}

type chatServiceChatClient struct {
	streaming.Stream
}

func (x *chatServiceChatClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *chatServiceChatClient) Recv() (*chatsvc.ChatResp, error) {
	m := new(chatsvc.ChatResp)
	return m, x.Stream.RecvMsg(m)
}

type chatServiceChatServer struct {
	streaming.Stream
}

func (x *chatServiceChatServer) Send(m *chatsvc.ChatResp) error {
	return x.Stream.SendMsg(m)
}

func newChatServiceChatArgs() interface{} {
	return chatsvc.NewChatServiceChatArgs()
}

func newChatServiceChatResult() interface{} {
	return chatsvc.NewChatServiceChatResult()
}

func updateMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chatsvc.ChatServiceUpdateMessageArgs)
	realResult := result.(*chatsvc.ChatServiceUpdateMessageResult)
	success, err := handler.(chatsvc.ChatService).UpdateMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceUpdateMessageArgs() interface{} {
	return chatsvc.NewChatServiceUpdateMessageArgs()
}

func newChatServiceUpdateMessageResult() interface{} {
	return chatsvc.NewChatServiceUpdateMessageResult()
}

func deleteMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chatsvc.ChatServiceDeleteMessageArgs)
	realResult := result.(*chatsvc.ChatServiceDeleteMessageResult)
	success, err := handler.(chatsvc.ChatService).DeleteMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceDeleteMessageArgs() interface{} {
	return chatsvc.NewChatServiceDeleteMessageArgs()
}

func newChatServiceDeleteMessageResult() interface{} {
	return chatsvc.NewChatServiceDeleteMessageResult()
}

func listMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chatsvc.ChatServiceListMessageArgs)
	realResult := result.(*chatsvc.ChatServiceListMessageResult)
	success, err := handler.(chatsvc.ChatService).ListMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceListMessageArgs() interface{} {
	return chatsvc.NewChatServiceListMessageArgs()
}

func newChatServiceListMessageResult() interface{} {
	return chatsvc.NewChatServiceListMessageResult()
}

func updateConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chatsvc.ChatServiceUpdateConversationArgs)
	realResult := result.(*chatsvc.ChatServiceUpdateConversationResult)
	success, err := handler.(chatsvc.ChatService).UpdateConversation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceUpdateConversationArgs() interface{} {
	return chatsvc.NewChatServiceUpdateConversationArgs()
}

func newChatServiceUpdateConversationResult() interface{} {
	return chatsvc.NewChatServiceUpdateConversationResult()
}

func deleteConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chatsvc.ChatServiceDeleteConversationArgs)
	realResult := result.(*chatsvc.ChatServiceDeleteConversationResult)
	success, err := handler.(chatsvc.ChatService).DeleteConversation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceDeleteConversationArgs() interface{} {
	return chatsvc.NewChatServiceDeleteConversationArgs()
}

func newChatServiceDeleteConversationResult() interface{} {
	return chatsvc.NewChatServiceDeleteConversationResult()
}

func getConversationByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chatsvc.ChatServiceGetConversationByIDArgs)
	realResult := result.(*chatsvc.ChatServiceGetConversationByIDResult)
	success, err := handler.(chatsvc.ChatService).GetConversationByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceGetConversationByIDArgs() interface{} {
	return chatsvc.NewChatServiceGetConversationByIDArgs()
}

func newChatServiceGetConversationByIDResult() interface{} {
	return chatsvc.NewChatServiceGetConversationByIDResult()
}

func listConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chatsvc.ChatServiceListConversationArgs)
	realResult := result.(*chatsvc.ChatServiceListConversationResult)
	success, err := handler.(chatsvc.ChatService).ListConversation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceListConversationArgs() interface{} {
	return chatsvc.NewChatServiceListConversationArgs()
}

func newChatServiceListConversationResult() interface{} {
	return chatsvc.NewChatServiceListConversationResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Chat(ctx context.Context, req *chatsvc.ChatReq) (ChatService_ChatClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "Chat", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &chatServiceChatClient{res.Stream}

	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) UpdateMessage(ctx context.Context, req *chatsvc.UpdateMessageReq) (r *base.Empty, err error) {
	var _args chatsvc.ChatServiceUpdateMessageArgs
	_args.Req = req
	var _result chatsvc.ChatServiceUpdateMessageResult
	if err = p.c.Call(ctx, "UpdateMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMessage(ctx context.Context, req *base.IDReq) (r *base.Empty, err error) {
	var _args chatsvc.ChatServiceDeleteMessageArgs
	_args.Req = req
	var _result chatsvc.ChatServiceDeleteMessageResult
	if err = p.c.Call(ctx, "DeleteMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListMessage(ctx context.Context, req *chatsvc.ListMessageReq) (r *chatsvc.ListMessageResp, err error) {
	var _args chatsvc.ChatServiceListMessageArgs
	_args.Req = req
	var _result chatsvc.ChatServiceListMessageResult
	if err = p.c.Call(ctx, "ListMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateConversation(ctx context.Context, req *chatsvc.UpdateConversationReq) (r *base.Empty, err error) {
	var _args chatsvc.ChatServiceUpdateConversationArgs
	_args.Req = req
	var _result chatsvc.ChatServiceUpdateConversationResult
	if err = p.c.Call(ctx, "UpdateConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteConversation(ctx context.Context, req *base.IDReq) (r *base.Empty, err error) {
	var _args chatsvc.ChatServiceDeleteConversationArgs
	_args.Req = req
	var _result chatsvc.ChatServiceDeleteConversationResult
	if err = p.c.Call(ctx, "DeleteConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetConversationByID(ctx context.Context, req *base.IDReq) (r *chatsvc.Conversation, err error) {
	var _args chatsvc.ChatServiceGetConversationByIDArgs
	_args.Req = req
	var _result chatsvc.ChatServiceGetConversationByIDResult
	if err = p.c.Call(ctx, "GetConversationByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListConversation(ctx context.Context, req *chatsvc.ListConversationReq) (r *chatsvc.ListConversationResp, err error) {
	var _args chatsvc.ChatServiceListConversationArgs
	_args.Req = req
	var _result chatsvc.ChatServiceListConversationResult
	if err = p.c.Call(ctx, "ListConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Kitex v0.12.2. DO NOT EDIT.

package chatservice

import (
	"context"
	base "github.com/aiagt/aiagt/kitex_gen/base"
	chatsvc "github.com/aiagt/aiagt/kitex_gen/chatsvc"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/client/callopt/streamcall"
	"github.com/cloudwego/kitex/client/streamclient"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	UpdateMessage(ctx context.Context, req *chatsvc.UpdateMessageReq, callOptions ...callopt.Option) (r *base.Empty, err error)
	DeleteMessage(ctx context.Context, req *chatsvc.DeleteMessageReq, callOptions ...callopt.Option) (r *base.Empty, err error)
	ListMessage(ctx context.Context, req *chatsvc.ListMessageReq, callOptions ...callopt.Option) (r *chatsvc.ListMessageResp, err error)
	UpdateConversation(ctx context.Context, req *chatsvc.UpdateConversationReq, callOptions ...callopt.Option) (r *base.Empty, err error)
	DeleteConversation(ctx context.Context, req *base.IDReq, callOptions ...callopt.Option) (r *base.Empty, err error)
	GetConversationByID(ctx context.Context, req *base.IDReq, callOptions ...callopt.Option) (r *chatsvc.Conversation, err error)
	ListConversation(ctx context.Context, req *chatsvc.ListConversationReq, callOptions ...callopt.Option) (r *chatsvc.ListConversationResp, err error)
	InitDevelop(ctx context.Context, req *chatsvc.InitDevelopReq, callOptions ...callopt.Option) (r *chatsvc.InitDevelopResp, err error)
}

// StreamClient is designed to provide Interface for Streaming APIs.
type StreamClient interface {
	Chat(ctx context.Context, req *chatsvc.ChatReq, callOptions ...streamcall.Option) (stream ChatService_ChatClient, err error)
}

type ChatService_ChatClient interface {
	streaming.Stream
	Recv() (*chatsvc.ChatResp, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kChatServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kChatServiceClient struct {
	*kClient
}

func (p *kChatServiceClient) UpdateMessage(ctx context.Context, req *chatsvc.UpdateMessageReq, callOptions ...callopt.Option) (r *base.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateMessage(ctx, req)
}

func (p *kChatServiceClient) DeleteMessage(ctx context.Context, req *chatsvc.DeleteMessageReq, callOptions ...callopt.Option) (r *base.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteMessage(ctx, req)
}

func (p *kChatServiceClient) ListMessage(ctx context.Context, req *chatsvc.ListMessageReq, callOptions ...callopt.Option) (r *chatsvc.ListMessageResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListMessage(ctx, req)
}

func (p *kChatServiceClient) UpdateConversation(ctx context.Context, req *chatsvc.UpdateConversationReq, callOptions ...callopt.Option) (r *base.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateConversation(ctx, req)
}

func (p *kChatServiceClient) DeleteConversation(ctx context.Context, req *base.IDReq, callOptions ...callopt.Option) (r *base.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteConversation(ctx, req)
}

func (p *kChatServiceClient) GetConversationByID(ctx context.Context, req *base.IDReq, callOptions ...callopt.Option) (r *chatsvc.Conversation, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetConversationByID(ctx, req)
}

func (p *kChatServiceClient) ListConversation(ctx context.Context, req *chatsvc.ListConversationReq, callOptions ...callopt.Option) (r *chatsvc.ListConversationResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListConversation(ctx, req)
}

func (p *kChatServiceClient) InitDevelop(ctx context.Context, req *chatsvc.InitDevelopReq, callOptions ...callopt.Option) (r *chatsvc.InitDevelopResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InitDevelop(ctx, req)
}

// NewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
func NewStreamClient(destService string, opts ...streamclient.Option) (StreamClient, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))
	options = append(options, client.WithTransportProtocol(transport.GRPC))
	options = append(options, streamclient.GetClientOptions(opts)...)

	kc, err := client.NewClient(serviceInfoForStreamClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kChatServiceStreamClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
// It panics if any error occurs.
func MustNewStreamClient(destService string, opts ...streamclient.Option) StreamClient {
	kc, err := NewStreamClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kChatServiceStreamClient struct {
	*kClient
}

func (p *kChatServiceStreamClient) Chat(ctx context.Context, req *chatsvc.ChatReq, callOptions ...streamcall.Option) (stream ChatService_ChatClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.Chat(ctx, req)
}

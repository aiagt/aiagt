// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package openai

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type ToolType int64

const (
	ToolType_FUNCTION ToolType = 1
)

func (p ToolType) String() string {
	switch p {
	case ToolType_FUNCTION:
		return "FUNCTION"
	}
	return "<UNSET>"
}

func ToolTypeFromString(s string) (ToolType, error) {
	switch s {
	case "FUNCTION":
		return ToolType_FUNCTION, nil
	}
	return ToolType(0), fmt.Errorf("not a valid ToolType string")
}

func ToolTypePtr(v ToolType) *ToolType { return &v }
func (p *ToolType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ToolType(result.Int64)
	return
}

func (p *ToolType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ChatMessagePartType int64

const (
	ChatMessagePartType_TEXT      ChatMessagePartType = 1
	ChatMessagePartType_IMAGE_URL ChatMessagePartType = 2
)

func (p ChatMessagePartType) String() string {
	switch p {
	case ChatMessagePartType_TEXT:
		return "TEXT"
	case ChatMessagePartType_IMAGE_URL:
		return "IMAGE_URL"
	}
	return "<UNSET>"
}

func ChatMessagePartTypeFromString(s string) (ChatMessagePartType, error) {
	switch s {
	case "TEXT":
		return ChatMessagePartType_TEXT, nil
	case "IMAGE_URL":
		return ChatMessagePartType_IMAGE_URL, nil
	}
	return ChatMessagePartType(0), fmt.Errorf("not a valid ChatMessagePartType string")
}

func ChatMessagePartTypePtr(v ChatMessagePartType) *ChatMessagePartType { return &v }
func (p *ChatMessagePartType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ChatMessagePartType(result.Int64)
	return
}

func (p *ChatMessagePartType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ImageURLDetail int64

const (
	ImageURLDetail_HIGH ImageURLDetail = 1
	ImageURLDetail_LOW  ImageURLDetail = 2
	ImageURLDetail_AUTO ImageURLDetail = 3
)

func (p ImageURLDetail) String() string {
	switch p {
	case ImageURLDetail_HIGH:
		return "HIGH"
	case ImageURLDetail_LOW:
		return "LOW"
	case ImageURLDetail_AUTO:
		return "AUTO"
	}
	return "<UNSET>"
}

func ImageURLDetailFromString(s string) (ImageURLDetail, error) {
	switch s {
	case "HIGH":
		return ImageURLDetail_HIGH, nil
	case "LOW":
		return ImageURLDetail_LOW, nil
	case "AUTO":
		return ImageURLDetail_AUTO, nil
	}
	return ImageURLDetail(0), fmt.Errorf("not a valid ImageURLDetail string")
}

func ImageURLDetailPtr(v ImageURLDetail) *ImageURLDetail { return &v }
func (p *ImageURLDetail) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ImageURLDetail(result.Int64)
	return
}

func (p *ImageURLDetail) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ChatCompletionResponseFormatType int64

const (
	ChatCompletionResponseFormatType_JSON_OBJECT ChatCompletionResponseFormatType = 1
	ChatCompletionResponseFormatType_JSON_SCHEMA ChatCompletionResponseFormatType = 2
	ChatCompletionResponseFormatType_TEXT        ChatCompletionResponseFormatType = 3
)

func (p ChatCompletionResponseFormatType) String() string {
	switch p {
	case ChatCompletionResponseFormatType_JSON_OBJECT:
		return "JSON_OBJECT"
	case ChatCompletionResponseFormatType_JSON_SCHEMA:
		return "JSON_SCHEMA"
	case ChatCompletionResponseFormatType_TEXT:
		return "TEXT"
	}
	return "<UNSET>"
}

func ChatCompletionResponseFormatTypeFromString(s string) (ChatCompletionResponseFormatType, error) {
	switch s {
	case "JSON_OBJECT":
		return ChatCompletionResponseFormatType_JSON_OBJECT, nil
	case "JSON_SCHEMA":
		return ChatCompletionResponseFormatType_JSON_SCHEMA, nil
	case "TEXT":
		return ChatCompletionResponseFormatType_TEXT, nil
	}
	return ChatCompletionResponseFormatType(0), fmt.Errorf("not a valid ChatCompletionResponseFormatType string")
}

func ChatCompletionResponseFormatTypePtr(v ChatCompletionResponseFormatType) *ChatCompletionResponseFormatType {
	return &v
}
func (p *ChatCompletionResponseFormatType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ChatCompletionResponseFormatType(result.Int64)
	return
}

func (p *ChatCompletionResponseFormatType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FinishReason int64

const (
	FinishReason_STOP           FinishReason = 1
	FinishReason_LENGTH         FinishReason = 2
	FinishReason_FUNCTION_CALL  FinishReason = 3
	FinishReason_TOOL_CALLS     FinishReason = 4
	FinishReason_CONTENT_FILTER FinishReason = 5
	FinishReason_NULL_REASON    FinishReason = 6
)

func (p FinishReason) String() string {
	switch p {
	case FinishReason_STOP:
		return "STOP"
	case FinishReason_LENGTH:
		return "LENGTH"
	case FinishReason_FUNCTION_CALL:
		return "FUNCTION_CALL"
	case FinishReason_TOOL_CALLS:
		return "TOOL_CALLS"
	case FinishReason_CONTENT_FILTER:
		return "CONTENT_FILTER"
	case FinishReason_NULL_REASON:
		return "NULL_REASON"
	}
	return "<UNSET>"
}

func FinishReasonFromString(s string) (FinishReason, error) {
	switch s {
	case "STOP":
		return FinishReason_STOP, nil
	case "LENGTH":
		return FinishReason_LENGTH, nil
	case "FUNCTION_CALL":
		return FinishReason_FUNCTION_CALL, nil
	case "TOOL_CALLS":
		return FinishReason_TOOL_CALLS, nil
	case "CONTENT_FILTER":
		return FinishReason_CONTENT_FILTER, nil
	case "NULL_REASON":
		return FinishReason_NULL_REASON, nil
	}
	return FinishReason(0), fmt.Errorf("not a valid FinishReason string")
}

func FinishReasonPtr(v FinishReason) *FinishReason { return &v }
func (p *FinishReason) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FinishReason(result.Int64)
	return
}

func (p *FinishReason) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Hate struct {
	Filtered bool    `thrift:"filtered,1,required" frugal:"1,required,bool" json:"filtered"`
	Severity *string `thrift:"severity,2,optional" frugal:"2,optional,string" json:"severity,omitempty"`
}

func NewHate() *Hate {
	return &Hate{}
}

func (p *Hate) InitDefault() {
}

func (p *Hate) GetFiltered() (v bool) {
	return p.Filtered
}

var Hate_Severity_DEFAULT string

func (p *Hate) GetSeverity() (v string) {
	if !p.IsSetSeverity() {
		return Hate_Severity_DEFAULT
	}
	return *p.Severity
}
func (p *Hate) SetFiltered(val bool) {
	p.Filtered = val
}
func (p *Hate) SetSeverity(val *string) {
	p.Severity = val
}

var fieldIDToName_Hate = map[int16]string{
	1: "filtered",
	2: "severity",
}

func (p *Hate) IsSetSeverity() bool {
	return p.Severity != nil
}

func (p *Hate) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFiltered bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFiltered = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFiltered {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Hate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Hate[fieldId]))
}

func (p *Hate) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Filtered = _field
	return nil
}
func (p *Hate) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Severity = _field
	return nil
}

func (p *Hate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Hate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Hate) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filtered", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Filtered); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Hate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSeverity() {
		if err = oprot.WriteFieldBegin("severity", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Severity); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Hate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Hate(%+v)", *p)

}

func (p *Hate) DeepEqual(ano *Hate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Filtered) {
		return false
	}
	if !p.Field2DeepEqual(ano.Severity) {
		return false
	}
	return true
}

func (p *Hate) Field1DeepEqual(src bool) bool {

	if p.Filtered != src {
		return false
	}
	return true
}
func (p *Hate) Field2DeepEqual(src *string) bool {

	if p.Severity == src {
		return true
	} else if p.Severity == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Severity, *src) != 0 {
		return false
	}
	return true
}

type SelfHarm struct {
	Filtered bool    `thrift:"filtered,1,required" frugal:"1,required,bool" json:"filtered"`
	Severity *string `thrift:"severity,2,optional" frugal:"2,optional,string" json:"severity,omitempty"`
}

func NewSelfHarm() *SelfHarm {
	return &SelfHarm{}
}

func (p *SelfHarm) InitDefault() {
}

func (p *SelfHarm) GetFiltered() (v bool) {
	return p.Filtered
}

var SelfHarm_Severity_DEFAULT string

func (p *SelfHarm) GetSeverity() (v string) {
	if !p.IsSetSeverity() {
		return SelfHarm_Severity_DEFAULT
	}
	return *p.Severity
}
func (p *SelfHarm) SetFiltered(val bool) {
	p.Filtered = val
}
func (p *SelfHarm) SetSeverity(val *string) {
	p.Severity = val
}

var fieldIDToName_SelfHarm = map[int16]string{
	1: "filtered",
	2: "severity",
}

func (p *SelfHarm) IsSetSeverity() bool {
	return p.Severity != nil
}

func (p *SelfHarm) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFiltered bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFiltered = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFiltered {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SelfHarm[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SelfHarm[fieldId]))
}

func (p *SelfHarm) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Filtered = _field
	return nil
}
func (p *SelfHarm) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Severity = _field
	return nil
}

func (p *SelfHarm) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SelfHarm"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SelfHarm) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filtered", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Filtered); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SelfHarm) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSeverity() {
		if err = oprot.WriteFieldBegin("severity", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Severity); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SelfHarm) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SelfHarm(%+v)", *p)

}

func (p *SelfHarm) DeepEqual(ano *SelfHarm) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Filtered) {
		return false
	}
	if !p.Field2DeepEqual(ano.Severity) {
		return false
	}
	return true
}

func (p *SelfHarm) Field1DeepEqual(src bool) bool {

	if p.Filtered != src {
		return false
	}
	return true
}
func (p *SelfHarm) Field2DeepEqual(src *string) bool {

	if p.Severity == src {
		return true
	} else if p.Severity == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Severity, *src) != 0 {
		return false
	}
	return true
}

type Sexual struct {
	Filtered bool    `thrift:"filtered,1,required" frugal:"1,required,bool" json:"filtered"`
	Severity *string `thrift:"severity,2,optional" frugal:"2,optional,string" json:"severity,omitempty"`
}

func NewSexual() *Sexual {
	return &Sexual{}
}

func (p *Sexual) InitDefault() {
}

func (p *Sexual) GetFiltered() (v bool) {
	return p.Filtered
}

var Sexual_Severity_DEFAULT string

func (p *Sexual) GetSeverity() (v string) {
	if !p.IsSetSeverity() {
		return Sexual_Severity_DEFAULT
	}
	return *p.Severity
}
func (p *Sexual) SetFiltered(val bool) {
	p.Filtered = val
}
func (p *Sexual) SetSeverity(val *string) {
	p.Severity = val
}

var fieldIDToName_Sexual = map[int16]string{
	1: "filtered",
	2: "severity",
}

func (p *Sexual) IsSetSeverity() bool {
	return p.Severity != nil
}

func (p *Sexual) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFiltered bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFiltered = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFiltered {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Sexual[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Sexual[fieldId]))
}

func (p *Sexual) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Filtered = _field
	return nil
}
func (p *Sexual) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Severity = _field
	return nil
}

func (p *Sexual) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Sexual"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Sexual) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filtered", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Filtered); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Sexual) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSeverity() {
		if err = oprot.WriteFieldBegin("severity", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Severity); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Sexual) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sexual(%+v)", *p)

}

func (p *Sexual) DeepEqual(ano *Sexual) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Filtered) {
		return false
	}
	if !p.Field2DeepEqual(ano.Severity) {
		return false
	}
	return true
}

func (p *Sexual) Field1DeepEqual(src bool) bool {

	if p.Filtered != src {
		return false
	}
	return true
}
func (p *Sexual) Field2DeepEqual(src *string) bool {

	if p.Severity == src {
		return true
	} else if p.Severity == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Severity, *src) != 0 {
		return false
	}
	return true
}

type Violence struct {
	Filtered bool    `thrift:"filtered,1,required" frugal:"1,required,bool" json:"filtered"`
	Severity *string `thrift:"severity,2,optional" frugal:"2,optional,string" json:"severity,omitempty"`
}

func NewViolence() *Violence {
	return &Violence{}
}

func (p *Violence) InitDefault() {
}

func (p *Violence) GetFiltered() (v bool) {
	return p.Filtered
}

var Violence_Severity_DEFAULT string

func (p *Violence) GetSeverity() (v string) {
	if !p.IsSetSeverity() {
		return Violence_Severity_DEFAULT
	}
	return *p.Severity
}
func (p *Violence) SetFiltered(val bool) {
	p.Filtered = val
}
func (p *Violence) SetSeverity(val *string) {
	p.Severity = val
}

var fieldIDToName_Violence = map[int16]string{
	1: "filtered",
	2: "severity",
}

func (p *Violence) IsSetSeverity() bool {
	return p.Severity != nil
}

func (p *Violence) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFiltered bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFiltered = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFiltered {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Violence[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Violence[fieldId]))
}

func (p *Violence) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Filtered = _field
	return nil
}
func (p *Violence) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Severity = _field
	return nil
}

func (p *Violence) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Violence"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Violence) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filtered", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Filtered); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Violence) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSeverity() {
		if err = oprot.WriteFieldBegin("severity", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Severity); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Violence) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Violence(%+v)", *p)

}

func (p *Violence) DeepEqual(ano *Violence) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Filtered) {
		return false
	}
	if !p.Field2DeepEqual(ano.Severity) {
		return false
	}
	return true
}

func (p *Violence) Field1DeepEqual(src bool) bool {

	if p.Filtered != src {
		return false
	}
	return true
}
func (p *Violence) Field2DeepEqual(src *string) bool {

	if p.Severity == src {
		return true
	} else if p.Severity == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Severity, *src) != 0 {
		return false
	}
	return true
}

type ContentFilterResults struct {
	Hate     *Hate     `thrift:"hate,1,required" frugal:"1,required,Hate" json:"hate"`
	SelfHarm *SelfHarm `thrift:"self_harm,2,required" frugal:"2,required,SelfHarm" json:"self_harm"`
	Sexual   *Sexual   `thrift:"sexual,3,required" frugal:"3,required,Sexual" json:"sexual"`
	Violence *Violence `thrift:"violence,4,required" frugal:"4,required,Violence" json:"violence"`
}

func NewContentFilterResults() *ContentFilterResults {
	return &ContentFilterResults{}
}

func (p *ContentFilterResults) InitDefault() {
}

var ContentFilterResults_Hate_DEFAULT *Hate

func (p *ContentFilterResults) GetHate() (v *Hate) {
	if !p.IsSetHate() {
		return ContentFilterResults_Hate_DEFAULT
	}
	return p.Hate
}

var ContentFilterResults_SelfHarm_DEFAULT *SelfHarm

func (p *ContentFilterResults) GetSelfHarm() (v *SelfHarm) {
	if !p.IsSetSelfHarm() {
		return ContentFilterResults_SelfHarm_DEFAULT
	}
	return p.SelfHarm
}

var ContentFilterResults_Sexual_DEFAULT *Sexual

func (p *ContentFilterResults) GetSexual() (v *Sexual) {
	if !p.IsSetSexual() {
		return ContentFilterResults_Sexual_DEFAULT
	}
	return p.Sexual
}

var ContentFilterResults_Violence_DEFAULT *Violence

func (p *ContentFilterResults) GetViolence() (v *Violence) {
	if !p.IsSetViolence() {
		return ContentFilterResults_Violence_DEFAULT
	}
	return p.Violence
}
func (p *ContentFilterResults) SetHate(val *Hate) {
	p.Hate = val
}
func (p *ContentFilterResults) SetSelfHarm(val *SelfHarm) {
	p.SelfHarm = val
}
func (p *ContentFilterResults) SetSexual(val *Sexual) {
	p.Sexual = val
}
func (p *ContentFilterResults) SetViolence(val *Violence) {
	p.Violence = val
}

var fieldIDToName_ContentFilterResults = map[int16]string{
	1: "hate",
	2: "self_harm",
	3: "sexual",
	4: "violence",
}

func (p *ContentFilterResults) IsSetHate() bool {
	return p.Hate != nil
}

func (p *ContentFilterResults) IsSetSelfHarm() bool {
	return p.SelfHarm != nil
}

func (p *ContentFilterResults) IsSetSexual() bool {
	return p.Sexual != nil
}

func (p *ContentFilterResults) IsSetViolence() bool {
	return p.Violence != nil
}

func (p *ContentFilterResults) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHate bool = false
	var issetSelfHarm bool = false
	var issetSexual bool = false
	var issetViolence bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetHate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSelfHarm = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSexual = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetViolence = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetHate {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSelfHarm {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSexual {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetViolence {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContentFilterResults[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ContentFilterResults[fieldId]))
}

func (p *ContentFilterResults) ReadField1(iprot thrift.TProtocol) error {
	_field := NewHate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Hate = _field
	return nil
}
func (p *ContentFilterResults) ReadField2(iprot thrift.TProtocol) error {
	_field := NewSelfHarm()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SelfHarm = _field
	return nil
}
func (p *ContentFilterResults) ReadField3(iprot thrift.TProtocol) error {
	_field := NewSexual()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Sexual = _field
	return nil
}
func (p *ContentFilterResults) ReadField4(iprot thrift.TProtocol) error {
	_field := NewViolence()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Violence = _field
	return nil
}

func (p *ContentFilterResults) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContentFilterResults"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContentFilterResults) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hate", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Hate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContentFilterResults) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("self_harm", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SelfHarm.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContentFilterResults) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sexual", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Sexual.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ContentFilterResults) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("violence", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Violence.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ContentFilterResults) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentFilterResults(%+v)", *p)

}

func (p *ContentFilterResults) DeepEqual(ano *ContentFilterResults) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Hate) {
		return false
	}
	if !p.Field2DeepEqual(ano.SelfHarm) {
		return false
	}
	if !p.Field3DeepEqual(ano.Sexual) {
		return false
	}
	if !p.Field4DeepEqual(ano.Violence) {
		return false
	}
	return true
}

func (p *ContentFilterResults) Field1DeepEqual(src *Hate) bool {

	if !p.Hate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ContentFilterResults) Field2DeepEqual(src *SelfHarm) bool {

	if !p.SelfHarm.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ContentFilterResults) Field3DeepEqual(src *Sexual) bool {

	if !p.Sexual.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ContentFilterResults) Field4DeepEqual(src *Violence) bool {

	if !p.Violence.DeepEqual(src) {
		return false
	}
	return true
}

type PromptAnnotation struct {
	PromptIndex          int32                 `thrift:"prompt_index,1,required" frugal:"1,required,i32" json:"prompt_index"`
	ContentFilterResults *ContentFilterResults `thrift:"content_filter_results,2,required" frugal:"2,required,ContentFilterResults" json:"content_filter_results"`
}

func NewPromptAnnotation() *PromptAnnotation {
	return &PromptAnnotation{}
}

func (p *PromptAnnotation) InitDefault() {
}

func (p *PromptAnnotation) GetPromptIndex() (v int32) {
	return p.PromptIndex
}

var PromptAnnotation_ContentFilterResults_DEFAULT *ContentFilterResults

func (p *PromptAnnotation) GetContentFilterResults() (v *ContentFilterResults) {
	if !p.IsSetContentFilterResults() {
		return PromptAnnotation_ContentFilterResults_DEFAULT
	}
	return p.ContentFilterResults
}
func (p *PromptAnnotation) SetPromptIndex(val int32) {
	p.PromptIndex = val
}
func (p *PromptAnnotation) SetContentFilterResults(val *ContentFilterResults) {
	p.ContentFilterResults = val
}

var fieldIDToName_PromptAnnotation = map[int16]string{
	1: "prompt_index",
	2: "content_filter_results",
}

func (p *PromptAnnotation) IsSetContentFilterResults() bool {
	return p.ContentFilterResults != nil
}

func (p *PromptAnnotation) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPromptIndex bool = false
	var issetContentFilterResults bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPromptIndex = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetContentFilterResults = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPromptIndex {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetContentFilterResults {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptAnnotation[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PromptAnnotation[fieldId]))
}

func (p *PromptAnnotation) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PromptIndex = _field
	return nil
}
func (p *PromptAnnotation) ReadField2(iprot thrift.TProtocol) error {
	_field := NewContentFilterResults()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ContentFilterResults = _field
	return nil
}

func (p *PromptAnnotation) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptAnnotation"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptAnnotation) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("prompt_index", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PromptIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptAnnotation) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content_filter_results", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ContentFilterResults.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PromptAnnotation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptAnnotation(%+v)", *p)

}

func (p *PromptAnnotation) DeepEqual(ano *PromptAnnotation) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptIndex) {
		return false
	}
	if !p.Field2DeepEqual(ano.ContentFilterResults) {
		return false
	}
	return true
}

func (p *PromptAnnotation) Field1DeepEqual(src int32) bool {

	if p.PromptIndex != src {
		return false
	}
	return true
}
func (p *PromptAnnotation) Field2DeepEqual(src *ContentFilterResults) bool {

	if !p.ContentFilterResults.DeepEqual(src) {
		return false
	}
	return true
}

type ChatMessageImageURL struct {
	Url    string         `thrift:"url,1,required" frugal:"1,required,string" json:"url"`
	Detail ImageURLDetail `thrift:"detail,2,required" frugal:"2,required,ImageURLDetail" json:"detail"`
}

func NewChatMessageImageURL() *ChatMessageImageURL {
	return &ChatMessageImageURL{}
}

func (p *ChatMessageImageURL) InitDefault() {
}

func (p *ChatMessageImageURL) GetUrl() (v string) {
	return p.Url
}

func (p *ChatMessageImageURL) GetDetail() (v ImageURLDetail) {
	return p.Detail
}
func (p *ChatMessageImageURL) SetUrl(val string) {
	p.Url = val
}
func (p *ChatMessageImageURL) SetDetail(val ImageURLDetail) {
	p.Detail = val
}

var fieldIDToName_ChatMessageImageURL = map[int16]string{
	1: "url",
	2: "detail",
}

func (p *ChatMessageImageURL) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUrl bool = false
	var issetDetail bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDetail = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUrl {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDetail {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatMessageImageURL[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChatMessageImageURL[fieldId]))
}

func (p *ChatMessageImageURL) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Url = _field
	return nil
}
func (p *ChatMessageImageURL) ReadField2(iprot thrift.TProtocol) error {

	var _field ImageURLDetail
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = ImageURLDetail(v)
	}
	p.Detail = _field
	return nil
}

func (p *ChatMessageImageURL) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatMessageImageURL"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatMessageImageURL) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatMessageImageURL) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("detail", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Detail)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChatMessageImageURL) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessageImageURL(%+v)", *p)

}

func (p *ChatMessageImageURL) DeepEqual(ano *ChatMessageImageURL) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Url) {
		return false
	}
	if !p.Field2DeepEqual(ano.Detail) {
		return false
	}
	return true
}

func (p *ChatMessageImageURL) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *ChatMessageImageURL) Field2DeepEqual(src ImageURLDetail) bool {

	if p.Detail != src {
		return false
	}
	return true
}

type ChatMessagePart struct {
	Type     ChatMessagePartType  `thrift:"type,1,required" frugal:"1,required,ChatMessagePartType" json:"type"`
	Text     *string              `thrift:"text,2,optional" frugal:"2,optional,string" json:"text,omitempty"`
	ImageUrl *ChatMessageImageURL `thrift:"image_url,3,optional" frugal:"3,optional,ChatMessageImageURL" json:"image_url,omitempty"`
}

func NewChatMessagePart() *ChatMessagePart {
	return &ChatMessagePart{}
}

func (p *ChatMessagePart) InitDefault() {
}

func (p *ChatMessagePart) GetType() (v ChatMessagePartType) {
	return p.Type
}

var ChatMessagePart_Text_DEFAULT string

func (p *ChatMessagePart) GetText() (v string) {
	if !p.IsSetText() {
		return ChatMessagePart_Text_DEFAULT
	}
	return *p.Text
}

var ChatMessagePart_ImageUrl_DEFAULT *ChatMessageImageURL

func (p *ChatMessagePart) GetImageUrl() (v *ChatMessageImageURL) {
	if !p.IsSetImageUrl() {
		return ChatMessagePart_ImageUrl_DEFAULT
	}
	return p.ImageUrl
}
func (p *ChatMessagePart) SetType(val ChatMessagePartType) {
	p.Type = val
}
func (p *ChatMessagePart) SetText(val *string) {
	p.Text = val
}
func (p *ChatMessagePart) SetImageUrl(val *ChatMessageImageURL) {
	p.ImageUrl = val
}

var fieldIDToName_ChatMessagePart = map[int16]string{
	1: "type",
	2: "text",
	3: "image_url",
}

func (p *ChatMessagePart) IsSetText() bool {
	return p.Text != nil
}

func (p *ChatMessagePart) IsSetImageUrl() bool {
	return p.ImageUrl != nil
}

func (p *ChatMessagePart) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatMessagePart[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChatMessagePart[fieldId]))
}

func (p *ChatMessagePart) ReadField1(iprot thrift.TProtocol) error {

	var _field ChatMessagePartType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = ChatMessagePartType(v)
	}
	p.Type = _field
	return nil
}
func (p *ChatMessagePart) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Text = _field
	return nil
}
func (p *ChatMessagePart) ReadField3(iprot thrift.TProtocol) error {
	_field := NewChatMessageImageURL()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ImageUrl = _field
	return nil
}

func (p *ChatMessagePart) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatMessagePart"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatMessagePart) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatMessagePart) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Text); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChatMessagePart) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageUrl() {
		if err = oprot.WriteFieldBegin("image_url", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ImageUrl.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChatMessagePart) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessagePart(%+v)", *p)

}

func (p *ChatMessagePart) DeepEqual(ano *ChatMessagePart) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	if !p.Field3DeepEqual(ano.ImageUrl) {
		return false
	}
	return true
}

func (p *ChatMessagePart) Field1DeepEqual(src ChatMessagePartType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *ChatMessagePart) Field2DeepEqual(src *string) bool {

	if p.Text == src {
		return true
	} else if p.Text == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Text, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatMessagePart) Field3DeepEqual(src *ChatMessageImageURL) bool {

	if !p.ImageUrl.DeepEqual(src) {
		return false
	}
	return true
}

type FunctionCall struct {
	Name      *string `thrift:"name,1,optional" frugal:"1,optional,string" json:"name,omitempty"`
	Arguments *string `thrift:"arguments,2,optional" frugal:"2,optional,string" json:"arguments,omitempty"`
}

func NewFunctionCall() *FunctionCall {
	return &FunctionCall{}
}

func (p *FunctionCall) InitDefault() {
}

var FunctionCall_Name_DEFAULT string

func (p *FunctionCall) GetName() (v string) {
	if !p.IsSetName() {
		return FunctionCall_Name_DEFAULT
	}
	return *p.Name
}

var FunctionCall_Arguments_DEFAULT string

func (p *FunctionCall) GetArguments() (v string) {
	if !p.IsSetArguments() {
		return FunctionCall_Arguments_DEFAULT
	}
	return *p.Arguments
}
func (p *FunctionCall) SetName(val *string) {
	p.Name = val
}
func (p *FunctionCall) SetArguments(val *string) {
	p.Arguments = val
}

var fieldIDToName_FunctionCall = map[int16]string{
	1: "name",
	2: "arguments",
}

func (p *FunctionCall) IsSetName() bool {
	return p.Name != nil
}

func (p *FunctionCall) IsSetArguments() bool {
	return p.Arguments != nil
}

func (p *FunctionCall) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FunctionCall[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FunctionCall) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FunctionCall) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Arguments = _field
	return nil
}

func (p *FunctionCall) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FunctionCall"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FunctionCall) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FunctionCall) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetArguments() {
		if err = oprot.WriteFieldBegin("arguments", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Arguments); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FunctionCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunctionCall(%+v)", *p)

}

func (p *FunctionCall) DeepEqual(ano *FunctionCall) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Arguments) {
		return false
	}
	return true
}

func (p *FunctionCall) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FunctionCall) Field2DeepEqual(src *string) bool {

	if p.Arguments == src {
		return true
	} else if p.Arguments == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Arguments, *src) != 0 {
		return false
	}
	return true
}

type ToolCall struct {
	Index    *int32        `thrift:"index,1,optional" frugal:"1,optional,i32" json:"index,omitempty"`
	Id       string        `thrift:"id,2,required" frugal:"2,required,string" json:"id"`
	Type     ToolType      `thrift:"type,3,required" frugal:"3,required,ToolType" json:"type"`
	Function *FunctionCall `thrift:"function,4,required" frugal:"4,required,FunctionCall" json:"function"`
}

func NewToolCall() *ToolCall {
	return &ToolCall{}
}

func (p *ToolCall) InitDefault() {
}

var ToolCall_Index_DEFAULT int32

func (p *ToolCall) GetIndex() (v int32) {
	if !p.IsSetIndex() {
		return ToolCall_Index_DEFAULT
	}
	return *p.Index
}

func (p *ToolCall) GetId() (v string) {
	return p.Id
}

func (p *ToolCall) GetType() (v ToolType) {
	return p.Type
}

var ToolCall_Function_DEFAULT *FunctionCall

func (p *ToolCall) GetFunction() (v *FunctionCall) {
	if !p.IsSetFunction() {
		return ToolCall_Function_DEFAULT
	}
	return p.Function
}
func (p *ToolCall) SetIndex(val *int32) {
	p.Index = val
}
func (p *ToolCall) SetId(val string) {
	p.Id = val
}
func (p *ToolCall) SetType(val ToolType) {
	p.Type = val
}
func (p *ToolCall) SetFunction(val *FunctionCall) {
	p.Function = val
}

var fieldIDToName_ToolCall = map[int16]string{
	1: "index",
	2: "id",
	3: "type",
	4: "function",
}

func (p *ToolCall) IsSetIndex() bool {
	return p.Index != nil
}

func (p *ToolCall) IsSetFunction() bool {
	return p.Function != nil
}

func (p *ToolCall) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetType bool = false
	var issetFunction bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetFunction = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetFunction {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ToolCall[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ToolCall[fieldId]))
}

func (p *ToolCall) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Index = _field
	return nil
}
func (p *ToolCall) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ToolCall) ReadField3(iprot thrift.TProtocol) error {

	var _field ToolType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = ToolType(v)
	}
	p.Type = _field
	return nil
}
func (p *ToolCall) ReadField4(iprot thrift.TProtocol) error {
	_field := NewFunctionCall()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Function = _field
	return nil
}

func (p *ToolCall) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ToolCall"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ToolCall) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndex() {
		if err = oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Index); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ToolCall) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ToolCall) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ToolCall) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("function", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Function.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ToolCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ToolCall(%+v)", *p)

}

func (p *ToolCall) DeepEqual(ano *ToolCall) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Index) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.Function) {
		return false
	}
	return true
}

func (p *ToolCall) Field1DeepEqual(src *int32) bool {

	if p.Index == src {
		return true
	} else if p.Index == nil || src == nil {
		return false
	}
	if *p.Index != *src {
		return false
	}
	return true
}
func (p *ToolCall) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *ToolCall) Field3DeepEqual(src ToolType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *ToolCall) Field4DeepEqual(src *FunctionCall) bool {

	if !p.Function.DeepEqual(src) {
		return false
	}
	return true
}

type ChatCompletionMessage struct {
	Role         string             `thrift:"role,1,required" frugal:"1,required,string" json:"role"`
	Content      *string            `thrift:"content,2,optional" frugal:"2,optional,string" json:"content,omitempty"`
	MultiContent []*ChatMessagePart `thrift:"multi_content,3,optional" frugal:"3,optional,list<ChatMessagePart>" json:"multi_content,omitempty"`
	Name         *string            `thrift:"name,4,optional" frugal:"4,optional,string" json:"name,omitempty"`
	FunctionCall *FunctionCall      `thrift:"function_call,5,optional" frugal:"5,optional,FunctionCall" json:"function_call,omitempty"`
	ToolCalls    []*ToolCall        `thrift:"tool_calls,6,optional" frugal:"6,optional,list<ToolCall>" json:"tool_calls,omitempty"`
	ToolCallId   *string            `thrift:"tool_call_id,7,optional" frugal:"7,optional,string" json:"tool_call_id,omitempty"`
}

func NewChatCompletionMessage() *ChatCompletionMessage {
	return &ChatCompletionMessage{}
}

func (p *ChatCompletionMessage) InitDefault() {
}

func (p *ChatCompletionMessage) GetRole() (v string) {
	return p.Role
}

var ChatCompletionMessage_Content_DEFAULT string

func (p *ChatCompletionMessage) GetContent() (v string) {
	if !p.IsSetContent() {
		return ChatCompletionMessage_Content_DEFAULT
	}
	return *p.Content
}

var ChatCompletionMessage_MultiContent_DEFAULT []*ChatMessagePart

func (p *ChatCompletionMessage) GetMultiContent() (v []*ChatMessagePart) {
	if !p.IsSetMultiContent() {
		return ChatCompletionMessage_MultiContent_DEFAULT
	}
	return p.MultiContent
}

var ChatCompletionMessage_Name_DEFAULT string

func (p *ChatCompletionMessage) GetName() (v string) {
	if !p.IsSetName() {
		return ChatCompletionMessage_Name_DEFAULT
	}
	return *p.Name
}

var ChatCompletionMessage_FunctionCall_DEFAULT *FunctionCall

func (p *ChatCompletionMessage) GetFunctionCall() (v *FunctionCall) {
	if !p.IsSetFunctionCall() {
		return ChatCompletionMessage_FunctionCall_DEFAULT
	}
	return p.FunctionCall
}

var ChatCompletionMessage_ToolCalls_DEFAULT []*ToolCall

func (p *ChatCompletionMessage) GetToolCalls() (v []*ToolCall) {
	if !p.IsSetToolCalls() {
		return ChatCompletionMessage_ToolCalls_DEFAULT
	}
	return p.ToolCalls
}

var ChatCompletionMessage_ToolCallId_DEFAULT string

func (p *ChatCompletionMessage) GetToolCallId() (v string) {
	if !p.IsSetToolCallId() {
		return ChatCompletionMessage_ToolCallId_DEFAULT
	}
	return *p.ToolCallId
}
func (p *ChatCompletionMessage) SetRole(val string) {
	p.Role = val
}
func (p *ChatCompletionMessage) SetContent(val *string) {
	p.Content = val
}
func (p *ChatCompletionMessage) SetMultiContent(val []*ChatMessagePart) {
	p.MultiContent = val
}
func (p *ChatCompletionMessage) SetName(val *string) {
	p.Name = val
}
func (p *ChatCompletionMessage) SetFunctionCall(val *FunctionCall) {
	p.FunctionCall = val
}
func (p *ChatCompletionMessage) SetToolCalls(val []*ToolCall) {
	p.ToolCalls = val
}
func (p *ChatCompletionMessage) SetToolCallId(val *string) {
	p.ToolCallId = val
}

var fieldIDToName_ChatCompletionMessage = map[int16]string{
	1: "role",
	2: "content",
	3: "multi_content",
	4: "name",
	5: "function_call",
	6: "tool_calls",
	7: "tool_call_id",
}

func (p *ChatCompletionMessage) IsSetContent() bool {
	return p.Content != nil
}

func (p *ChatCompletionMessage) IsSetMultiContent() bool {
	return p.MultiContent != nil
}

func (p *ChatCompletionMessage) IsSetName() bool {
	return p.Name != nil
}

func (p *ChatCompletionMessage) IsSetFunctionCall() bool {
	return p.FunctionCall != nil
}

func (p *ChatCompletionMessage) IsSetToolCalls() bool {
	return p.ToolCalls != nil
}

func (p *ChatCompletionMessage) IsSetToolCallId() bool {
	return p.ToolCallId != nil
}

func (p *ChatCompletionMessage) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRole bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRole = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRole {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatCompletionMessage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChatCompletionMessage[fieldId]))
}

func (p *ChatCompletionMessage) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Role = _field
	return nil
}
func (p *ChatCompletionMessage) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}
func (p *ChatCompletionMessage) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ChatMessagePart, 0, size)
	values := make([]ChatMessagePart, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MultiContent = _field
	return nil
}
func (p *ChatCompletionMessage) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ChatCompletionMessage) ReadField5(iprot thrift.TProtocol) error {
	_field := NewFunctionCall()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FunctionCall = _field
	return nil
}
func (p *ChatCompletionMessage) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ToolCall, 0, size)
	values := make([]ToolCall, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolCalls = _field
	return nil
}
func (p *ChatCompletionMessage) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ToolCallId = _field
	return nil
}

func (p *ChatCompletionMessage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatCompletionMessage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatCompletionMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Role); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatCompletionMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChatCompletionMessage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultiContent() {
		if err = oprot.WriteFieldBegin("multi_content", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MultiContent)); err != nil {
			return err
		}
		for _, v := range p.MultiContent {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChatCompletionMessage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ChatCompletionMessage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctionCall() {
		if err = oprot.WriteFieldBegin("function_call", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FunctionCall.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ChatCompletionMessage) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCalls() {
		if err = oprot.WriteFieldBegin("tool_calls", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ToolCalls)); err != nil {
			return err
		}
		for _, v := range p.ToolCalls {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ChatCompletionMessage) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCallId() {
		if err = oprot.WriteFieldBegin("tool_call_id", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ToolCallId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ChatCompletionMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatCompletionMessage(%+v)", *p)

}

func (p *ChatCompletionMessage) DeepEqual(ano *ChatCompletionMessage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Role) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	if !p.Field3DeepEqual(ano.MultiContent) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.FunctionCall) {
		return false
	}
	if !p.Field6DeepEqual(ano.ToolCalls) {
		return false
	}
	if !p.Field7DeepEqual(ano.ToolCallId) {
		return false
	}
	return true
}

func (p *ChatCompletionMessage) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Role, src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionMessage) Field2DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionMessage) Field3DeepEqual(src []*ChatMessagePart) bool {

	if len(p.MultiContent) != len(src) {
		return false
	}
	for i, v := range p.MultiContent {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ChatCompletionMessage) Field4DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionMessage) Field5DeepEqual(src *FunctionCall) bool {

	if !p.FunctionCall.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChatCompletionMessage) Field6DeepEqual(src []*ToolCall) bool {

	if len(p.ToolCalls) != len(src) {
		return false
	}
	for i, v := range p.ToolCalls {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ChatCompletionMessage) Field7DeepEqual(src *string) bool {

	if p.ToolCallId == src {
		return true
	} else if p.ToolCallId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ToolCallId, *src) != 0 {
		return false
	}
	return true
}

type FunctionDefinition struct {
	Name        string  `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Description *string `thrift:"description,2,optional" frugal:"2,optional,string" json:"description,omitempty"`
	Strict      *bool   `thrift:"strict,3,optional" frugal:"3,optional,bool" json:"strict,omitempty"`
	Parameters  *string `thrift:"parameters,4,optional" frugal:"4,optional,string" json:"parameters,omitempty"`
}

func NewFunctionDefinition() *FunctionDefinition {
	return &FunctionDefinition{}
}

func (p *FunctionDefinition) InitDefault() {
}

func (p *FunctionDefinition) GetName() (v string) {
	return p.Name
}

var FunctionDefinition_Description_DEFAULT string

func (p *FunctionDefinition) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return FunctionDefinition_Description_DEFAULT
	}
	return *p.Description
}

var FunctionDefinition_Strict_DEFAULT bool

func (p *FunctionDefinition) GetStrict() (v bool) {
	if !p.IsSetStrict() {
		return FunctionDefinition_Strict_DEFAULT
	}
	return *p.Strict
}

var FunctionDefinition_Parameters_DEFAULT string

func (p *FunctionDefinition) GetParameters() (v string) {
	if !p.IsSetParameters() {
		return FunctionDefinition_Parameters_DEFAULT
	}
	return *p.Parameters
}
func (p *FunctionDefinition) SetName(val string) {
	p.Name = val
}
func (p *FunctionDefinition) SetDescription(val *string) {
	p.Description = val
}
func (p *FunctionDefinition) SetStrict(val *bool) {
	p.Strict = val
}
func (p *FunctionDefinition) SetParameters(val *string) {
	p.Parameters = val
}

var fieldIDToName_FunctionDefinition = map[int16]string{
	1: "name",
	2: "description",
	3: "strict",
	4: "parameters",
}

func (p *FunctionDefinition) IsSetDescription() bool {
	return p.Description != nil
}

func (p *FunctionDefinition) IsSetStrict() bool {
	return p.Strict != nil
}

func (p *FunctionDefinition) IsSetParameters() bool {
	return p.Parameters != nil
}

func (p *FunctionDefinition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FunctionDefinition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FunctionDefinition[fieldId]))
}

func (p *FunctionDefinition) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *FunctionDefinition) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *FunctionDefinition) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Strict = _field
	return nil
}
func (p *FunctionDefinition) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Parameters = _field
	return nil
}

func (p *FunctionDefinition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FunctionDefinition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FunctionDefinition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FunctionDefinition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FunctionDefinition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrict() {
		if err = oprot.WriteFieldBegin("strict", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Strict); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FunctionDefinition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetParameters() {
		if err = oprot.WriteFieldBegin("parameters", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Parameters); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *FunctionDefinition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunctionDefinition(%+v)", *p)

}

func (p *FunctionDefinition) DeepEqual(ano *FunctionDefinition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.Strict) {
		return false
	}
	if !p.Field4DeepEqual(ano.Parameters) {
		return false
	}
	return true
}

func (p *FunctionDefinition) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *FunctionDefinition) Field2DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *FunctionDefinition) Field3DeepEqual(src *bool) bool {

	if p.Strict == src {
		return true
	} else if p.Strict == nil || src == nil {
		return false
	}
	if *p.Strict != *src {
		return false
	}
	return true
}
func (p *FunctionDefinition) Field4DeepEqual(src *string) bool {

	if p.Parameters == src {
		return true
	} else if p.Parameters == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Parameters, *src) != 0 {
		return false
	}
	return true
}

type Tool struct {
	Type     ToolType            `thrift:"type,1,required" frugal:"1,required,ToolType" json:"type"`
	Function *FunctionDefinition `thrift:"function,2,optional" frugal:"2,optional,FunctionDefinition" json:"function,omitempty"`
}

func NewTool() *Tool {
	return &Tool{}
}

func (p *Tool) InitDefault() {
}

func (p *Tool) GetType() (v ToolType) {
	return p.Type
}

var Tool_Function_DEFAULT *FunctionDefinition

func (p *Tool) GetFunction() (v *FunctionDefinition) {
	if !p.IsSetFunction() {
		return Tool_Function_DEFAULT
	}
	return p.Function
}
func (p *Tool) SetType(val ToolType) {
	p.Type = val
}
func (p *Tool) SetFunction(val *FunctionDefinition) {
	p.Function = val
}

var fieldIDToName_Tool = map[int16]string{
	1: "type",
	2: "function",
}

func (p *Tool) IsSetFunction() bool {
	return p.Function != nil
}

func (p *Tool) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Tool[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Tool[fieldId]))
}

func (p *Tool) ReadField1(iprot thrift.TProtocol) error {

	var _field ToolType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = ToolType(v)
	}
	p.Type = _field
	return nil
}
func (p *Tool) ReadField2(iprot thrift.TProtocol) error {
	_field := NewFunctionDefinition()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Function = _field
	return nil
}

func (p *Tool) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Tool"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Tool) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Tool) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunction() {
		if err = oprot.WriteFieldBegin("function", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Function.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Tool) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tool(%+v)", *p)

}

func (p *Tool) DeepEqual(ano *Tool) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Function) {
		return false
	}
	return true
}

func (p *Tool) Field1DeepEqual(src ToolType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *Tool) Field2DeepEqual(src *FunctionDefinition) bool {

	if !p.Function.DeepEqual(src) {
		return false
	}
	return true
}

type ToolChoice struct {
	Type         ToolType `thrift:"type,1,required" frugal:"1,required,ToolType" json:"type"`
	FunctionName *string  `thrift:"function_name,2,optional" frugal:"2,optional,string" json:"function_name,omitempty"`
}

func NewToolChoice() *ToolChoice {
	return &ToolChoice{}
}

func (p *ToolChoice) InitDefault() {
}

func (p *ToolChoice) GetType() (v ToolType) {
	return p.Type
}

var ToolChoice_FunctionName_DEFAULT string

func (p *ToolChoice) GetFunctionName() (v string) {
	if !p.IsSetFunctionName() {
		return ToolChoice_FunctionName_DEFAULT
	}
	return *p.FunctionName
}
func (p *ToolChoice) SetType(val ToolType) {
	p.Type = val
}
func (p *ToolChoice) SetFunctionName(val *string) {
	p.FunctionName = val
}

var fieldIDToName_ToolChoice = map[int16]string{
	1: "type",
	2: "function_name",
}

func (p *ToolChoice) IsSetFunctionName() bool {
	return p.FunctionName != nil
}

func (p *ToolChoice) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ToolChoice[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ToolChoice[fieldId]))
}

func (p *ToolChoice) ReadField1(iprot thrift.TProtocol) error {

	var _field ToolType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = ToolType(v)
	}
	p.Type = _field
	return nil
}
func (p *ToolChoice) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FunctionName = _field
	return nil
}

func (p *ToolChoice) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ToolChoice"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ToolChoice) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ToolChoice) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctionName() {
		if err = oprot.WriteFieldBegin("function_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FunctionName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ToolChoice) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ToolChoice(%+v)", *p)

}

func (p *ToolChoice) DeepEqual(ano *ToolChoice) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.FunctionName) {
		return false
	}
	return true
}

func (p *ToolChoice) Field1DeepEqual(src ToolType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *ToolChoice) Field2DeepEqual(src *string) bool {

	if p.FunctionName == src {
		return true
	} else if p.FunctionName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FunctionName, *src) != 0 {
		return false
	}
	return true
}

type StreamOptions struct {
	IncludeUsage *bool `thrift:"include_usage,1,optional" frugal:"1,optional,bool" json:"include_usage,omitempty"`
}

func NewStreamOptions() *StreamOptions {
	return &StreamOptions{}
}

func (p *StreamOptions) InitDefault() {
}

var StreamOptions_IncludeUsage_DEFAULT bool

func (p *StreamOptions) GetIncludeUsage() (v bool) {
	if !p.IsSetIncludeUsage() {
		return StreamOptions_IncludeUsage_DEFAULT
	}
	return *p.IncludeUsage
}
func (p *StreamOptions) SetIncludeUsage(val *bool) {
	p.IncludeUsage = val
}

var fieldIDToName_StreamOptions = map[int16]string{
	1: "include_usage",
}

func (p *StreamOptions) IsSetIncludeUsage() bool {
	return p.IncludeUsage != nil
}

func (p *StreamOptions) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StreamOptions[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *StreamOptions) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeUsage = _field
	return nil
}

func (p *StreamOptions) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StreamOptions"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StreamOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeUsage() {
		if err = oprot.WriteFieldBegin("include_usage", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeUsage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *StreamOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamOptions(%+v)", *p)

}

func (p *StreamOptions) DeepEqual(ano *StreamOptions) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IncludeUsage) {
		return false
	}
	return true
}

func (p *StreamOptions) Field1DeepEqual(src *bool) bool {

	if p.IncludeUsage == src {
		return true
	} else if p.IncludeUsage == nil || src == nil {
		return false
	}
	if *p.IncludeUsage != *src {
		return false
	}
	return true
}

type ChatCompletionResponseFormatJSONSchema struct {
	Name        string  `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Description *string `thrift:"description,2,optional" frugal:"2,optional,string" json:"description,omitempty"`
	Schema      string  `thrift:"schema,3,required" frugal:"3,required,string" json:"schema"`
	Strict      *bool   `thrift:"strict,4,optional" frugal:"4,optional,bool" json:"strict,omitempty"`
}

func NewChatCompletionResponseFormatJSONSchema() *ChatCompletionResponseFormatJSONSchema {
	return &ChatCompletionResponseFormatJSONSchema{}
}

func (p *ChatCompletionResponseFormatJSONSchema) InitDefault() {
}

func (p *ChatCompletionResponseFormatJSONSchema) GetName() (v string) {
	return p.Name
}

var ChatCompletionResponseFormatJSONSchema_Description_DEFAULT string

func (p *ChatCompletionResponseFormatJSONSchema) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return ChatCompletionResponseFormatJSONSchema_Description_DEFAULT
	}
	return *p.Description
}

func (p *ChatCompletionResponseFormatJSONSchema) GetSchema() (v string) {
	return p.Schema
}

var ChatCompletionResponseFormatJSONSchema_Strict_DEFAULT bool

func (p *ChatCompletionResponseFormatJSONSchema) GetStrict() (v bool) {
	if !p.IsSetStrict() {
		return ChatCompletionResponseFormatJSONSchema_Strict_DEFAULT
	}
	return *p.Strict
}
func (p *ChatCompletionResponseFormatJSONSchema) SetName(val string) {
	p.Name = val
}
func (p *ChatCompletionResponseFormatJSONSchema) SetDescription(val *string) {
	p.Description = val
}
func (p *ChatCompletionResponseFormatJSONSchema) SetSchema(val string) {
	p.Schema = val
}
func (p *ChatCompletionResponseFormatJSONSchema) SetStrict(val *bool) {
	p.Strict = val
}

var fieldIDToName_ChatCompletionResponseFormatJSONSchema = map[int16]string{
	1: "name",
	2: "description",
	3: "schema",
	4: "strict",
}

func (p *ChatCompletionResponseFormatJSONSchema) IsSetDescription() bool {
	return p.Description != nil
}

func (p *ChatCompletionResponseFormatJSONSchema) IsSetStrict() bool {
	return p.Strict != nil
}

func (p *ChatCompletionResponseFormatJSONSchema) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetSchema bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchema = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchema {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatCompletionResponseFormatJSONSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChatCompletionResponseFormatJSONSchema[fieldId]))
}

func (p *ChatCompletionResponseFormatJSONSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *ChatCompletionResponseFormatJSONSchema) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *ChatCompletionResponseFormatJSONSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Schema = _field
	return nil
}
func (p *ChatCompletionResponseFormatJSONSchema) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Strict = _field
	return nil
}

func (p *ChatCompletionResponseFormatJSONSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatCompletionResponseFormatJSONSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatCompletionResponseFormatJSONSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatCompletionResponseFormatJSONSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChatCompletionResponseFormatJSONSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Schema); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChatCompletionResponseFormatJSONSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrict() {
		if err = oprot.WriteFieldBegin("strict", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Strict); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ChatCompletionResponseFormatJSONSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatCompletionResponseFormatJSONSchema(%+v)", *p)

}

func (p *ChatCompletionResponseFormatJSONSchema) DeepEqual(ano *ChatCompletionResponseFormatJSONSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.Schema) {
		return false
	}
	if !p.Field4DeepEqual(ano.Strict) {
		return false
	}
	return true
}

func (p *ChatCompletionResponseFormatJSONSchema) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionResponseFormatJSONSchema) Field2DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionResponseFormatJSONSchema) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Schema, src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionResponseFormatJSONSchema) Field4DeepEqual(src *bool) bool {

	if p.Strict == src {
		return true
	} else if p.Strict == nil || src == nil {
		return false
	}
	if *p.Strict != *src {
		return false
	}
	return true
}

type ChatCompletionResponseFormat struct {
	Type       ChatCompletionResponseFormatType        `thrift:"type,1,required" frugal:"1,required,ChatCompletionResponseFormatType" json:"type"`
	JsonSchema *ChatCompletionResponseFormatJSONSchema `thrift:"json_schema,2,optional" frugal:"2,optional,ChatCompletionResponseFormatJSONSchema" json:"json_schema,omitempty"`
}

func NewChatCompletionResponseFormat() *ChatCompletionResponseFormat {
	return &ChatCompletionResponseFormat{}
}

func (p *ChatCompletionResponseFormat) InitDefault() {
}

func (p *ChatCompletionResponseFormat) GetType() (v ChatCompletionResponseFormatType) {
	return p.Type
}

var ChatCompletionResponseFormat_JsonSchema_DEFAULT *ChatCompletionResponseFormatJSONSchema

func (p *ChatCompletionResponseFormat) GetJsonSchema() (v *ChatCompletionResponseFormatJSONSchema) {
	if !p.IsSetJsonSchema() {
		return ChatCompletionResponseFormat_JsonSchema_DEFAULT
	}
	return p.JsonSchema
}
func (p *ChatCompletionResponseFormat) SetType(val ChatCompletionResponseFormatType) {
	p.Type = val
}
func (p *ChatCompletionResponseFormat) SetJsonSchema(val *ChatCompletionResponseFormatJSONSchema) {
	p.JsonSchema = val
}

var fieldIDToName_ChatCompletionResponseFormat = map[int16]string{
	1: "type",
	2: "json_schema",
}

func (p *ChatCompletionResponseFormat) IsSetJsonSchema() bool {
	return p.JsonSchema != nil
}

func (p *ChatCompletionResponseFormat) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatCompletionResponseFormat[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChatCompletionResponseFormat[fieldId]))
}

func (p *ChatCompletionResponseFormat) ReadField1(iprot thrift.TProtocol) error {

	var _field ChatCompletionResponseFormatType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = ChatCompletionResponseFormatType(v)
	}
	p.Type = _field
	return nil
}
func (p *ChatCompletionResponseFormat) ReadField2(iprot thrift.TProtocol) error {
	_field := NewChatCompletionResponseFormatJSONSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.JsonSchema = _field
	return nil
}

func (p *ChatCompletionResponseFormat) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatCompletionResponseFormat"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatCompletionResponseFormat) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatCompletionResponseFormat) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetJsonSchema() {
		if err = oprot.WriteFieldBegin("json_schema", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.JsonSchema.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChatCompletionResponseFormat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatCompletionResponseFormat(%+v)", *p)

}

func (p *ChatCompletionResponseFormat) DeepEqual(ano *ChatCompletionResponseFormat) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.JsonSchema) {
		return false
	}
	return true
}

func (p *ChatCompletionResponseFormat) Field1DeepEqual(src ChatCompletionResponseFormatType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *ChatCompletionResponseFormat) Field2DeepEqual(src *ChatCompletionResponseFormatJSONSchema) bool {

	if !p.JsonSchema.DeepEqual(src) {
		return false
	}
	return true
}

type ChatCompletionRequest struct {
	Model             string                        `thrift:"model,1,required" frugal:"1,required,string" json:"model"`
	Messages          []*ChatCompletionMessage      `thrift:"messages,2,required" frugal:"2,required,list<ChatCompletionMessage>" json:"messages"`
	MaxTokens         *int32                        `thrift:"max_tokens,3,optional" frugal:"3,optional,i32" json:"max_tokens,omitempty"`
	Temperature       *float64                      `thrift:"temperature,4,optional" frugal:"4,optional,double" json:"temperature,omitempty"`
	TopP              *float64                      `thrift:"top_p,5,optional" frugal:"5,optional,double" json:"top_p,omitempty"`
	N                 *int32                        `thrift:"n,6,optional" frugal:"6,optional,i32" json:"n,omitempty"`
	Stream            *bool                         `thrift:"stream,7,optional" frugal:"7,optional,bool" json:"stream,omitempty"`
	Stop              []string                      `thrift:"stop,8,optional" frugal:"8,optional,list<string>" json:"stop,omitempty"`
	PresencePenalty   *float64                      `thrift:"presence_penalty,9,optional" frugal:"9,optional,double" json:"presence_penalty,omitempty"`
	ResponseFormat    *ChatCompletionResponseFormat `thrift:"response_format,10,optional" frugal:"10,optional,ChatCompletionResponseFormat" json:"response_format,omitempty"`
	Seed              *int32                        `thrift:"seed,11,optional" frugal:"11,optional,i32" json:"seed,omitempty"`
	FrequencyPenalty  *float64                      `thrift:"frequency_penalty,12,optional" frugal:"12,optional,double" json:"frequency_penalty,omitempty"`
	LogitBias         map[string]int32              `thrift:"logit_bias,13,optional" frugal:"13,optional,map<string:i32>" json:"logit_bias,omitempty"`
	Logprobs          *bool                         `thrift:"logprobs,14,optional" frugal:"14,optional,bool" json:"logprobs,omitempty"`
	TopLogprobs       *int32                        `thrift:"top_logprobs,15,optional" frugal:"15,optional,i32" json:"top_logprobs,omitempty"`
	User              *string                       `thrift:"user,16,optional" frugal:"16,optional,string" json:"user,omitempty"`
	Functions         []*FunctionDefinition         `thrift:"functions,17,optional" frugal:"17,optional,list<FunctionDefinition>" json:"functions,omitempty"`
	FunctionCall      *string                       `thrift:"function_call,18,optional" frugal:"18,optional,string" json:"function_call,omitempty"`
	Tools             []*Tool                       `thrift:"tools,19,optional" frugal:"19,optional,list<Tool>" json:"tools,omitempty"`
	ToolChoice        *ToolChoice                   `thrift:"tool_choice,20,optional" frugal:"20,optional,ToolChoice" json:"tool_choice,omitempty"`
	StreamOptions     *StreamOptions                `thrift:"stream_options,21,optional" frugal:"21,optional,StreamOptions" json:"stream_options,omitempty"`
	ParallelToolCalls *bool                         `thrift:"parallel_tool_calls,22,optional" frugal:"22,optional,bool" json:"parallel_tool_calls,omitempty"`
}

func NewChatCompletionRequest() *ChatCompletionRequest {
	return &ChatCompletionRequest{}
}

func (p *ChatCompletionRequest) InitDefault() {
}

func (p *ChatCompletionRequest) GetModel() (v string) {
	return p.Model
}

func (p *ChatCompletionRequest) GetMessages() (v []*ChatCompletionMessage) {
	return p.Messages
}

var ChatCompletionRequest_MaxTokens_DEFAULT int32

func (p *ChatCompletionRequest) GetMaxTokens() (v int32) {
	if !p.IsSetMaxTokens() {
		return ChatCompletionRequest_MaxTokens_DEFAULT
	}
	return *p.MaxTokens
}

var ChatCompletionRequest_Temperature_DEFAULT float64

func (p *ChatCompletionRequest) GetTemperature() (v float64) {
	if !p.IsSetTemperature() {
		return ChatCompletionRequest_Temperature_DEFAULT
	}
	return *p.Temperature
}

var ChatCompletionRequest_TopP_DEFAULT float64

func (p *ChatCompletionRequest) GetTopP() (v float64) {
	if !p.IsSetTopP() {
		return ChatCompletionRequest_TopP_DEFAULT
	}
	return *p.TopP
}

var ChatCompletionRequest_N_DEFAULT int32

func (p *ChatCompletionRequest) GetN() (v int32) {
	if !p.IsSetN() {
		return ChatCompletionRequest_N_DEFAULT
	}
	return *p.N
}

var ChatCompletionRequest_Stream_DEFAULT bool

func (p *ChatCompletionRequest) GetStream() (v bool) {
	if !p.IsSetStream() {
		return ChatCompletionRequest_Stream_DEFAULT
	}
	return *p.Stream
}

var ChatCompletionRequest_Stop_DEFAULT []string

func (p *ChatCompletionRequest) GetStop() (v []string) {
	if !p.IsSetStop() {
		return ChatCompletionRequest_Stop_DEFAULT
	}
	return p.Stop
}

var ChatCompletionRequest_PresencePenalty_DEFAULT float64

func (p *ChatCompletionRequest) GetPresencePenalty() (v float64) {
	if !p.IsSetPresencePenalty() {
		return ChatCompletionRequest_PresencePenalty_DEFAULT
	}
	return *p.PresencePenalty
}

var ChatCompletionRequest_ResponseFormat_DEFAULT *ChatCompletionResponseFormat

func (p *ChatCompletionRequest) GetResponseFormat() (v *ChatCompletionResponseFormat) {
	if !p.IsSetResponseFormat() {
		return ChatCompletionRequest_ResponseFormat_DEFAULT
	}
	return p.ResponseFormat
}

var ChatCompletionRequest_Seed_DEFAULT int32

func (p *ChatCompletionRequest) GetSeed() (v int32) {
	if !p.IsSetSeed() {
		return ChatCompletionRequest_Seed_DEFAULT
	}
	return *p.Seed
}

var ChatCompletionRequest_FrequencyPenalty_DEFAULT float64

func (p *ChatCompletionRequest) GetFrequencyPenalty() (v float64) {
	if !p.IsSetFrequencyPenalty() {
		return ChatCompletionRequest_FrequencyPenalty_DEFAULT
	}
	return *p.FrequencyPenalty
}

var ChatCompletionRequest_LogitBias_DEFAULT map[string]int32

func (p *ChatCompletionRequest) GetLogitBias() (v map[string]int32) {
	if !p.IsSetLogitBias() {
		return ChatCompletionRequest_LogitBias_DEFAULT
	}
	return p.LogitBias
}

var ChatCompletionRequest_Logprobs_DEFAULT bool

func (p *ChatCompletionRequest) GetLogprobs() (v bool) {
	if !p.IsSetLogprobs() {
		return ChatCompletionRequest_Logprobs_DEFAULT
	}
	return *p.Logprobs
}

var ChatCompletionRequest_TopLogprobs_DEFAULT int32

func (p *ChatCompletionRequest) GetTopLogprobs() (v int32) {
	if !p.IsSetTopLogprobs() {
		return ChatCompletionRequest_TopLogprobs_DEFAULT
	}
	return *p.TopLogprobs
}

var ChatCompletionRequest_User_DEFAULT string

func (p *ChatCompletionRequest) GetUser() (v string) {
	if !p.IsSetUser() {
		return ChatCompletionRequest_User_DEFAULT
	}
	return *p.User
}

var ChatCompletionRequest_Functions_DEFAULT []*FunctionDefinition

func (p *ChatCompletionRequest) GetFunctions() (v []*FunctionDefinition) {
	if !p.IsSetFunctions() {
		return ChatCompletionRequest_Functions_DEFAULT
	}
	return p.Functions
}

var ChatCompletionRequest_FunctionCall_DEFAULT string

func (p *ChatCompletionRequest) GetFunctionCall() (v string) {
	if !p.IsSetFunctionCall() {
		return ChatCompletionRequest_FunctionCall_DEFAULT
	}
	return *p.FunctionCall
}

var ChatCompletionRequest_Tools_DEFAULT []*Tool

func (p *ChatCompletionRequest) GetTools() (v []*Tool) {
	if !p.IsSetTools() {
		return ChatCompletionRequest_Tools_DEFAULT
	}
	return p.Tools
}

var ChatCompletionRequest_ToolChoice_DEFAULT *ToolChoice

func (p *ChatCompletionRequest) GetToolChoice() (v *ToolChoice) {
	if !p.IsSetToolChoice() {
		return ChatCompletionRequest_ToolChoice_DEFAULT
	}
	return p.ToolChoice
}

var ChatCompletionRequest_StreamOptions_DEFAULT *StreamOptions

func (p *ChatCompletionRequest) GetStreamOptions() (v *StreamOptions) {
	if !p.IsSetStreamOptions() {
		return ChatCompletionRequest_StreamOptions_DEFAULT
	}
	return p.StreamOptions
}

var ChatCompletionRequest_ParallelToolCalls_DEFAULT bool

func (p *ChatCompletionRequest) GetParallelToolCalls() (v bool) {
	if !p.IsSetParallelToolCalls() {
		return ChatCompletionRequest_ParallelToolCalls_DEFAULT
	}
	return *p.ParallelToolCalls
}
func (p *ChatCompletionRequest) SetModel(val string) {
	p.Model = val
}
func (p *ChatCompletionRequest) SetMessages(val []*ChatCompletionMessage) {
	p.Messages = val
}
func (p *ChatCompletionRequest) SetMaxTokens(val *int32) {
	p.MaxTokens = val
}
func (p *ChatCompletionRequest) SetTemperature(val *float64) {
	p.Temperature = val
}
func (p *ChatCompletionRequest) SetTopP(val *float64) {
	p.TopP = val
}
func (p *ChatCompletionRequest) SetN(val *int32) {
	p.N = val
}
func (p *ChatCompletionRequest) SetStream(val *bool) {
	p.Stream = val
}
func (p *ChatCompletionRequest) SetStop(val []string) {
	p.Stop = val
}
func (p *ChatCompletionRequest) SetPresencePenalty(val *float64) {
	p.PresencePenalty = val
}
func (p *ChatCompletionRequest) SetResponseFormat(val *ChatCompletionResponseFormat) {
	p.ResponseFormat = val
}
func (p *ChatCompletionRequest) SetSeed(val *int32) {
	p.Seed = val
}
func (p *ChatCompletionRequest) SetFrequencyPenalty(val *float64) {
	p.FrequencyPenalty = val
}
func (p *ChatCompletionRequest) SetLogitBias(val map[string]int32) {
	p.LogitBias = val
}
func (p *ChatCompletionRequest) SetLogprobs(val *bool) {
	p.Logprobs = val
}
func (p *ChatCompletionRequest) SetTopLogprobs(val *int32) {
	p.TopLogprobs = val
}
func (p *ChatCompletionRequest) SetUser(val *string) {
	p.User = val
}
func (p *ChatCompletionRequest) SetFunctions(val []*FunctionDefinition) {
	p.Functions = val
}
func (p *ChatCompletionRequest) SetFunctionCall(val *string) {
	p.FunctionCall = val
}
func (p *ChatCompletionRequest) SetTools(val []*Tool) {
	p.Tools = val
}
func (p *ChatCompletionRequest) SetToolChoice(val *ToolChoice) {
	p.ToolChoice = val
}
func (p *ChatCompletionRequest) SetStreamOptions(val *StreamOptions) {
	p.StreamOptions = val
}
func (p *ChatCompletionRequest) SetParallelToolCalls(val *bool) {
	p.ParallelToolCalls = val
}

var fieldIDToName_ChatCompletionRequest = map[int16]string{
	1:  "model",
	2:  "messages",
	3:  "max_tokens",
	4:  "temperature",
	5:  "top_p",
	6:  "n",
	7:  "stream",
	8:  "stop",
	9:  "presence_penalty",
	10: "response_format",
	11: "seed",
	12: "frequency_penalty",
	13: "logit_bias",
	14: "logprobs",
	15: "top_logprobs",
	16: "user",
	17: "functions",
	18: "function_call",
	19: "tools",
	20: "tool_choice",
	21: "stream_options",
	22: "parallel_tool_calls",
}

func (p *ChatCompletionRequest) IsSetMaxTokens() bool {
	return p.MaxTokens != nil
}

func (p *ChatCompletionRequest) IsSetTemperature() bool {
	return p.Temperature != nil
}

func (p *ChatCompletionRequest) IsSetTopP() bool {
	return p.TopP != nil
}

func (p *ChatCompletionRequest) IsSetN() bool {
	return p.N != nil
}

func (p *ChatCompletionRequest) IsSetStream() bool {
	return p.Stream != nil
}

func (p *ChatCompletionRequest) IsSetStop() bool {
	return p.Stop != nil
}

func (p *ChatCompletionRequest) IsSetPresencePenalty() bool {
	return p.PresencePenalty != nil
}

func (p *ChatCompletionRequest) IsSetResponseFormat() bool {
	return p.ResponseFormat != nil
}

func (p *ChatCompletionRequest) IsSetSeed() bool {
	return p.Seed != nil
}

func (p *ChatCompletionRequest) IsSetFrequencyPenalty() bool {
	return p.FrequencyPenalty != nil
}

func (p *ChatCompletionRequest) IsSetLogitBias() bool {
	return p.LogitBias != nil
}

func (p *ChatCompletionRequest) IsSetLogprobs() bool {
	return p.Logprobs != nil
}

func (p *ChatCompletionRequest) IsSetTopLogprobs() bool {
	return p.TopLogprobs != nil
}

func (p *ChatCompletionRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *ChatCompletionRequest) IsSetFunctions() bool {
	return p.Functions != nil
}

func (p *ChatCompletionRequest) IsSetFunctionCall() bool {
	return p.FunctionCall != nil
}

func (p *ChatCompletionRequest) IsSetTools() bool {
	return p.Tools != nil
}

func (p *ChatCompletionRequest) IsSetToolChoice() bool {
	return p.ToolChoice != nil
}

func (p *ChatCompletionRequest) IsSetStreamOptions() bool {
	return p.StreamOptions != nil
}

func (p *ChatCompletionRequest) IsSetParallelToolCalls() bool {
	return p.ParallelToolCalls != nil
}

func (p *ChatCompletionRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetModel bool = false
	var issetMessages bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetModel = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMessages = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetModel {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMessages {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatCompletionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChatCompletionRequest[fieldId]))
}

func (p *ChatCompletionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Model = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ChatCompletionMessage, 0, size)
	values := make([]ChatCompletionMessage, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Messages = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxTokens = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Temperature = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopP = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.N = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Stream = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Stop = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PresencePenalty = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField10(iprot thrift.TProtocol) error {
	_field := NewChatCompletionResponseFormat()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResponseFormat = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Seed = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FrequencyPenalty = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField13(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]int32, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.LogitBias = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField14(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Logprobs = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField15(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopLogprobs = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField16(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FunctionDefinition, 0, size)
	values := make([]FunctionDefinition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Functions = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField18(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FunctionCall = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField19(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Tool, 0, size)
	values := make([]Tool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tools = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField20(iprot thrift.TProtocol) error {
	_field := NewToolChoice()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ToolChoice = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField21(iprot thrift.TProtocol) error {
	_field := NewStreamOptions()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.StreamOptions = _field
	return nil
}
func (p *ChatCompletionRequest) ReadField22(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ParallelToolCalls = _field
	return nil
}

func (p *ChatCompletionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatCompletionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("model", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Model); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
		return err
	}
	for _, v := range p.Messages {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTokens() {
		if err = oprot.WriteFieldBegin("max_tokens", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTemperature() {
		if err = oprot.WriteFieldBegin("temperature", thrift.DOUBLE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Temperature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopP() {
		if err = oprot.WriteFieldBegin("top_p", thrift.DOUBLE, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.TopP); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetN() {
		if err = oprot.WriteFieldBegin("n", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.N); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStream() {
		if err = oprot.WriteFieldBegin("stream", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Stream); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStop() {
		if err = oprot.WriteFieldBegin("stop", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Stop)); err != nil {
			return err
		}
		for _, v := range p.Stop {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPresencePenalty() {
		if err = oprot.WriteFieldBegin("presence_penalty", thrift.DOUBLE, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.PresencePenalty); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseFormat() {
		if err = oprot.WriteFieldBegin("response_format", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResponseFormat.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSeed() {
		if err = oprot.WriteFieldBegin("seed", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Seed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetFrequencyPenalty() {
		if err = oprot.WriteFieldBegin("frequency_penalty", thrift.DOUBLE, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.FrequencyPenalty); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogitBias() {
		if err = oprot.WriteFieldBegin("logit_bias", thrift.MAP, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.LogitBias)); err != nil {
			return err
		}
		for k, v := range p.LogitBias {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogprobs() {
		if err = oprot.WriteFieldBegin("logprobs", thrift.BOOL, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Logprobs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopLogprobs() {
		if err = oprot.WriteFieldBegin("top_logprobs", thrift.I32, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TopLogprobs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctions() {
		if err = oprot.WriteFieldBegin("functions", thrift.LIST, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Functions)); err != nil {
			return err
		}
		for _, v := range p.Functions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctionCall() {
		if err = oprot.WriteFieldBegin("function_call", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FunctionCall); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetTools() {
		if err = oprot.WriteFieldBegin("tools", thrift.LIST, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tools)); err != nil {
			return err
		}
		for _, v := range p.Tools {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolChoice() {
		if err = oprot.WriteFieldBegin("tool_choice", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ToolChoice.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetStreamOptions() {
		if err = oprot.WriteFieldBegin("stream_options", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.StreamOptions.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ChatCompletionRequest) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelToolCalls() {
		if err = oprot.WriteFieldBegin("parallel_tool_calls", thrift.BOOL, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ParallelToolCalls); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ChatCompletionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatCompletionRequest(%+v)", *p)

}

func (p *ChatCompletionRequest) DeepEqual(ano *ChatCompletionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Model) {
		return false
	}
	if !p.Field2DeepEqual(ano.Messages) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaxTokens) {
		return false
	}
	if !p.Field4DeepEqual(ano.Temperature) {
		return false
	}
	if !p.Field5DeepEqual(ano.TopP) {
		return false
	}
	if !p.Field6DeepEqual(ano.N) {
		return false
	}
	if !p.Field7DeepEqual(ano.Stream) {
		return false
	}
	if !p.Field8DeepEqual(ano.Stop) {
		return false
	}
	if !p.Field9DeepEqual(ano.PresencePenalty) {
		return false
	}
	if !p.Field10DeepEqual(ano.ResponseFormat) {
		return false
	}
	if !p.Field11DeepEqual(ano.Seed) {
		return false
	}
	if !p.Field12DeepEqual(ano.FrequencyPenalty) {
		return false
	}
	if !p.Field13DeepEqual(ano.LogitBias) {
		return false
	}
	if !p.Field14DeepEqual(ano.Logprobs) {
		return false
	}
	if !p.Field15DeepEqual(ano.TopLogprobs) {
		return false
	}
	if !p.Field16DeepEqual(ano.User) {
		return false
	}
	if !p.Field17DeepEqual(ano.Functions) {
		return false
	}
	if !p.Field18DeepEqual(ano.FunctionCall) {
		return false
	}
	if !p.Field19DeepEqual(ano.Tools) {
		return false
	}
	if !p.Field20DeepEqual(ano.ToolChoice) {
		return false
	}
	if !p.Field21DeepEqual(ano.StreamOptions) {
		return false
	}
	if !p.Field22DeepEqual(ano.ParallelToolCalls) {
		return false
	}
	return true
}

func (p *ChatCompletionRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Model, src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field2DeepEqual(src []*ChatCompletionMessage) bool {

	if len(p.Messages) != len(src) {
		return false
	}
	for i, v := range p.Messages {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ChatCompletionRequest) Field3DeepEqual(src *int32) bool {

	if p.MaxTokens == src {
		return true
	} else if p.MaxTokens == nil || src == nil {
		return false
	}
	if *p.MaxTokens != *src {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field4DeepEqual(src *float64) bool {

	if p.Temperature == src {
		return true
	} else if p.Temperature == nil || src == nil {
		return false
	}
	if *p.Temperature != *src {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field5DeepEqual(src *float64) bool {

	if p.TopP == src {
		return true
	} else if p.TopP == nil || src == nil {
		return false
	}
	if *p.TopP != *src {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field6DeepEqual(src *int32) bool {

	if p.N == src {
		return true
	} else if p.N == nil || src == nil {
		return false
	}
	if *p.N != *src {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field7DeepEqual(src *bool) bool {

	if p.Stream == src {
		return true
	} else if p.Stream == nil || src == nil {
		return false
	}
	if *p.Stream != *src {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field8DeepEqual(src []string) bool {

	if len(p.Stop) != len(src) {
		return false
	}
	for i, v := range p.Stop {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ChatCompletionRequest) Field9DeepEqual(src *float64) bool {

	if p.PresencePenalty == src {
		return true
	} else if p.PresencePenalty == nil || src == nil {
		return false
	}
	if *p.PresencePenalty != *src {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field10DeepEqual(src *ChatCompletionResponseFormat) bool {

	if !p.ResponseFormat.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field11DeepEqual(src *int32) bool {

	if p.Seed == src {
		return true
	} else if p.Seed == nil || src == nil {
		return false
	}
	if *p.Seed != *src {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field12DeepEqual(src *float64) bool {

	if p.FrequencyPenalty == src {
		return true
	} else if p.FrequencyPenalty == nil || src == nil {
		return false
	}
	if *p.FrequencyPenalty != *src {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field13DeepEqual(src map[string]int32) bool {

	if len(p.LogitBias) != len(src) {
		return false
	}
	for k, v := range p.LogitBias {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ChatCompletionRequest) Field14DeepEqual(src *bool) bool {

	if p.Logprobs == src {
		return true
	} else if p.Logprobs == nil || src == nil {
		return false
	}
	if *p.Logprobs != *src {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field15DeepEqual(src *int32) bool {

	if p.TopLogprobs == src {
		return true
	} else if p.TopLogprobs == nil || src == nil {
		return false
	}
	if *p.TopLogprobs != *src {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field16DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field17DeepEqual(src []*FunctionDefinition) bool {

	if len(p.Functions) != len(src) {
		return false
	}
	for i, v := range p.Functions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ChatCompletionRequest) Field18DeepEqual(src *string) bool {

	if p.FunctionCall == src {
		return true
	} else if p.FunctionCall == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FunctionCall, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field19DeepEqual(src []*Tool) bool {

	if len(p.Tools) != len(src) {
		return false
	}
	for i, v := range p.Tools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ChatCompletionRequest) Field20DeepEqual(src *ToolChoice) bool {

	if !p.ToolChoice.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field21DeepEqual(src *StreamOptions) bool {

	if !p.StreamOptions.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChatCompletionRequest) Field22DeepEqual(src *bool) bool {

	if p.ParallelToolCalls == src {
		return true
	} else if p.ParallelToolCalls == nil || src == nil {
		return false
	}
	if *p.ParallelToolCalls != *src {
		return false
	}
	return true
}

type ChatCompletionChoice struct {
	Index             int32                  `thrift:"index,1,required" frugal:"1,required,i32" json:"index"`
	Message           *ChatCompletionMessage `thrift:"message,2,required" frugal:"2,required,ChatCompletionMessage" json:"message"`
	FinishReason      *string                `thrift:"finish_reason,3,optional" frugal:"3,optional,string" json:"finish_reason,omitempty"`
	FinishProbability *float64               `thrift:"finish_probability,4,optional" frugal:"4,optional,double" json:"finish_probability,omitempty"`
}

func NewChatCompletionChoice() *ChatCompletionChoice {
	return &ChatCompletionChoice{}
}

func (p *ChatCompletionChoice) InitDefault() {
}

func (p *ChatCompletionChoice) GetIndex() (v int32) {
	return p.Index
}

var ChatCompletionChoice_Message_DEFAULT *ChatCompletionMessage

func (p *ChatCompletionChoice) GetMessage() (v *ChatCompletionMessage) {
	if !p.IsSetMessage() {
		return ChatCompletionChoice_Message_DEFAULT
	}
	return p.Message
}

var ChatCompletionChoice_FinishReason_DEFAULT string

func (p *ChatCompletionChoice) GetFinishReason() (v string) {
	if !p.IsSetFinishReason() {
		return ChatCompletionChoice_FinishReason_DEFAULT
	}
	return *p.FinishReason
}

var ChatCompletionChoice_FinishProbability_DEFAULT float64

func (p *ChatCompletionChoice) GetFinishProbability() (v float64) {
	if !p.IsSetFinishProbability() {
		return ChatCompletionChoice_FinishProbability_DEFAULT
	}
	return *p.FinishProbability
}
func (p *ChatCompletionChoice) SetIndex(val int32) {
	p.Index = val
}
func (p *ChatCompletionChoice) SetMessage(val *ChatCompletionMessage) {
	p.Message = val
}
func (p *ChatCompletionChoice) SetFinishReason(val *string) {
	p.FinishReason = val
}
func (p *ChatCompletionChoice) SetFinishProbability(val *float64) {
	p.FinishProbability = val
}

var fieldIDToName_ChatCompletionChoice = map[int16]string{
	1: "index",
	2: "message",
	3: "finish_reason",
	4: "finish_probability",
}

func (p *ChatCompletionChoice) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ChatCompletionChoice) IsSetFinishReason() bool {
	return p.FinishReason != nil
}

func (p *ChatCompletionChoice) IsSetFinishProbability() bool {
	return p.FinishProbability != nil
}

func (p *ChatCompletionChoice) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIndex bool = false
	var issetMessage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndex = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMessage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIndex {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMessage {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatCompletionChoice[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChatCompletionChoice[fieldId]))
}

func (p *ChatCompletionChoice) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Index = _field
	return nil
}
func (p *ChatCompletionChoice) ReadField2(iprot thrift.TProtocol) error {
	_field := NewChatCompletionMessage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Message = _field
	return nil
}
func (p *ChatCompletionChoice) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FinishReason = _field
	return nil
}
func (p *ChatCompletionChoice) ReadField4(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FinishProbability = _field
	return nil
}

func (p *ChatCompletionChoice) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatCompletionChoice"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatCompletionChoice) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Index); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatCompletionChoice) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Message.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChatCompletionChoice) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFinishReason() {
		if err = oprot.WriteFieldBegin("finish_reason", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FinishReason); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChatCompletionChoice) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFinishProbability() {
		if err = oprot.WriteFieldBegin("finish_probability", thrift.DOUBLE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.FinishProbability); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ChatCompletionChoice) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatCompletionChoice(%+v)", *p)

}

func (p *ChatCompletionChoice) DeepEqual(ano *ChatCompletionChoice) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Index) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.FinishReason) {
		return false
	}
	if !p.Field4DeepEqual(ano.FinishProbability) {
		return false
	}
	return true
}

func (p *ChatCompletionChoice) Field1DeepEqual(src int32) bool {

	if p.Index != src {
		return false
	}
	return true
}
func (p *ChatCompletionChoice) Field2DeepEqual(src *ChatCompletionMessage) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChatCompletionChoice) Field3DeepEqual(src *string) bool {

	if p.FinishReason == src {
		return true
	} else if p.FinishReason == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FinishReason, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionChoice) Field4DeepEqual(src *float64) bool {

	if p.FinishProbability == src {
		return true
	} else if p.FinishProbability == nil || src == nil {
		return false
	}
	if *p.FinishProbability != *src {
		return false
	}
	return true
}

type Usage struct {
	PromptTokens     int32 `thrift:"prompt_tokens,1,required" frugal:"1,required,i32" json:"prompt_tokens"`
	CompletionTokens int32 `thrift:"completion_tokens,2,required" frugal:"2,required,i32" json:"completion_tokens"`
	TotalTokens      int32 `thrift:"total_tokens,3,required" frugal:"3,required,i32" json:"total_tokens"`
}

func NewUsage() *Usage {
	return &Usage{}
}

func (p *Usage) InitDefault() {
}

func (p *Usage) GetPromptTokens() (v int32) {
	return p.PromptTokens
}

func (p *Usage) GetCompletionTokens() (v int32) {
	return p.CompletionTokens
}

func (p *Usage) GetTotalTokens() (v int32) {
	return p.TotalTokens
}
func (p *Usage) SetPromptTokens(val int32) {
	p.PromptTokens = val
}
func (p *Usage) SetCompletionTokens(val int32) {
	p.CompletionTokens = val
}
func (p *Usage) SetTotalTokens(val int32) {
	p.TotalTokens = val
}

var fieldIDToName_Usage = map[int16]string{
	1: "prompt_tokens",
	2: "completion_tokens",
	3: "total_tokens",
}

func (p *Usage) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPromptTokens bool = false
	var issetCompletionTokens bool = false
	var issetTotalTokens bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPromptTokens = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompletionTokens = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalTokens = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPromptTokens {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCompletionTokens {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTotalTokens {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Usage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Usage[fieldId]))
}

func (p *Usage) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PromptTokens = _field
	return nil
}
func (p *Usage) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompletionTokens = _field
	return nil
}
func (p *Usage) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TotalTokens = _field
	return nil
}

func (p *Usage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Usage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Usage) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("prompt_tokens", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PromptTokens); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Usage) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("completion_tokens", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CompletionTokens); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Usage) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total_tokens", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalTokens); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Usage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Usage(%+v)", *p)

}

func (p *Usage) DeepEqual(ano *Usage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptTokens) {
		return false
	}
	if !p.Field2DeepEqual(ano.CompletionTokens) {
		return false
	}
	if !p.Field3DeepEqual(ano.TotalTokens) {
		return false
	}
	return true
}

func (p *Usage) Field1DeepEqual(src int32) bool {

	if p.PromptTokens != src {
		return false
	}
	return true
}
func (p *Usage) Field2DeepEqual(src int32) bool {

	if p.CompletionTokens != src {
		return false
	}
	return true
}
func (p *Usage) Field3DeepEqual(src int32) bool {

	if p.TotalTokens != src {
		return false
	}
	return true
}

type ChatCompletionResponse struct {
	Id      string                  `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	Object  string                  `thrift:"object,2,required" frugal:"2,required,string" json:"object"`
	Created int64                   `thrift:"created,3,required" frugal:"3,required,i64" json:"created"`
	Model   string                  `thrift:"model,4,required" frugal:"4,required,string" json:"model"`
	Choices []*ChatCompletionChoice `thrift:"choices,5,required" frugal:"5,required,list<ChatCompletionChoice>" json:"choices"`
	Usage   *Usage                  `thrift:"usage,6,optional" frugal:"6,optional,Usage" json:"usage,omitempty"`
}

func NewChatCompletionResponse() *ChatCompletionResponse {
	return &ChatCompletionResponse{}
}

func (p *ChatCompletionResponse) InitDefault() {
}

func (p *ChatCompletionResponse) GetId() (v string) {
	return p.Id
}

func (p *ChatCompletionResponse) GetObject() (v string) {
	return p.Object
}

func (p *ChatCompletionResponse) GetCreated() (v int64) {
	return p.Created
}

func (p *ChatCompletionResponse) GetModel() (v string) {
	return p.Model
}

func (p *ChatCompletionResponse) GetChoices() (v []*ChatCompletionChoice) {
	return p.Choices
}

var ChatCompletionResponse_Usage_DEFAULT *Usage

func (p *ChatCompletionResponse) GetUsage() (v *Usage) {
	if !p.IsSetUsage() {
		return ChatCompletionResponse_Usage_DEFAULT
	}
	return p.Usage
}
func (p *ChatCompletionResponse) SetId(val string) {
	p.Id = val
}
func (p *ChatCompletionResponse) SetObject(val string) {
	p.Object = val
}
func (p *ChatCompletionResponse) SetCreated(val int64) {
	p.Created = val
}
func (p *ChatCompletionResponse) SetModel(val string) {
	p.Model = val
}
func (p *ChatCompletionResponse) SetChoices(val []*ChatCompletionChoice) {
	p.Choices = val
}
func (p *ChatCompletionResponse) SetUsage(val *Usage) {
	p.Usage = val
}

var fieldIDToName_ChatCompletionResponse = map[int16]string{
	1: "id",
	2: "object",
	3: "created",
	4: "model",
	5: "choices",
	6: "usage",
}

func (p *ChatCompletionResponse) IsSetUsage() bool {
	return p.Usage != nil
}

func (p *ChatCompletionResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetObject bool = false
	var issetCreated bool = false
	var issetModel bool = false
	var issetChoices bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetObject = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreated = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetModel = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetChoices = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetObject {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCreated {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetModel {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetChoices {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatCompletionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChatCompletionResponse[fieldId]))
}

func (p *ChatCompletionResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *ChatCompletionResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Object = _field
	return nil
}
func (p *ChatCompletionResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Created = _field
	return nil
}
func (p *ChatCompletionResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Model = _field
	return nil
}
func (p *ChatCompletionResponse) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ChatCompletionChoice, 0, size)
	values := make([]ChatCompletionChoice, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Choices = _field
	return nil
}
func (p *ChatCompletionResponse) ReadField6(iprot thrift.TProtocol) error {
	_field := NewUsage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Usage = _field
	return nil
}

func (p *ChatCompletionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatCompletionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatCompletionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChatCompletionResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("object", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Object); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChatCompletionResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Created); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChatCompletionResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("model", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Model); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ChatCompletionResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("choices", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Choices)); err != nil {
		return err
	}
	for _, v := range p.Choices {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ChatCompletionResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsage() {
		if err = oprot.WriteFieldBegin("usage", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Usage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ChatCompletionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatCompletionResponse(%+v)", *p)

}

func (p *ChatCompletionResponse) DeepEqual(ano *ChatCompletionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Object) {
		return false
	}
	if !p.Field3DeepEqual(ano.Created) {
		return false
	}
	if !p.Field4DeepEqual(ano.Model) {
		return false
	}
	if !p.Field5DeepEqual(ano.Choices) {
		return false
	}
	if !p.Field6DeepEqual(ano.Usage) {
		return false
	}
	return true
}

func (p *ChatCompletionResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Object, src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionResponse) Field3DeepEqual(src int64) bool {

	if p.Created != src {
		return false
	}
	return true
}
func (p *ChatCompletionResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Model, src) != 0 {
		return false
	}
	return true
}
func (p *ChatCompletionResponse) Field5DeepEqual(src []*ChatCompletionChoice) bool {

	if len(p.Choices) != len(src) {
		return false
	}
	for i, v := range p.Choices {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ChatCompletionResponse) Field6DeepEqual(src *Usage) bool {

	if !p.Usage.DeepEqual(src) {
		return false
	}
	return true
}
